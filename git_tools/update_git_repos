#! /usr/bin/env bash
# @file update_git_repos
# Simple script to pull changes from origin for a set of git repos.
# @author Alister Lewis-Bowen <alister@lewis-bowen.org>

[[ -n $DEBUG ]] && set -x
set -eou pipefail

DIR=$( cd "$(dirname "${BASH_SOURCE[0]}")" && pwd )
SCRIPT_NAME=$(basename "${BASH_SOURCE[0]}")
UPDATE_NAME='update_git_repos'
UPDATE_INTERVAL='3600'
UPDATE_PLIST='n'

help() {
    echo "Simple script to pull changes from origin for a set of git repos found"
    echo "under a directory."
    echo
    echo "Place this script in the directory above the set of git repos you wish to"
    echo "keep up-to-date."
    echo
    echo "Run this script periodically, either manually, with cron or, if using macOS"
    echo "with launchd. This script will set up a launchd plist if run on macOS."
    echo
    echo "Usage: update_git_repos [options]"
    echo "Options:"
    echo "  -h, --help, help ............ displays this help information"
    echo "  -d directory ................ the directory from where to look for git repostories."
    echo "                                Defaults to the current directory"
    echo "  --update-name name .......... the launchd plist name (macOS only)."
    echo "                                Default is $UPDATE_NAME"
    echo "  --update-interval seconds ... the interval when the launchd plist executes (macOS only)."
    echo "                                Default is $UPDATE_INTERVAL"
    echo "  --update-plist  ............. forces the launchd plist to be installed (macOS only)"
    return 0
}

log() { logger -s "$(basename $0) - $*"; }

install_plist() {
    ## Configure launchd to run this script at a set interval when the user is
    ## logged in.
    LAUNCHD_DIR=~/Library/LaunchAgents
    LAUNCHD_PLIST_FILE="org.lewis-bowen.org.$UPDATE_NAME.agent.plist"
    LAUNCHD_PLIST_CONTENT=$(cat <<EOPLIST
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>$LAUNCHD_PLIST_FILE</string>
    <key>ProgramArguments</key>
    <array>
        <string>$DIR/$SCRIPT_NAME</string>
        <string>-d</string>
        <string>$DIR</string>
    </array>
    <key>StartInterval</key>
    <integer>$UPDATE_INTERVAL</integer>
    <key>RunAtLoad</key>
    <true/>
    <key>StandardErrorPath</key>
    <string>/tmp/$LAUNCHD_PLIST_FILE.err</string>
    <key>StandardOutPath</key>
    <string>/tmp/$LAUNCHD_PLIST_FILE.out</string>
</dict>
</plist>
EOPLIST
    )
    [[ "$OSTYPE" == "darwin"* ]] && {
        if [[ ! -f "$LAUNCHD_DIR/$LAUNCHD_PLIST_FILE" || "$UPDATE_PLIST" == 'y' ]]; then
            if launchctl list | grep "$LAUNCHD_PLIST_FILE" >/dev/null; then
                launchctl unload "$LAUNCHD_DIR/$LAUNCHD_PLIST_FILE"
            fi
            log "Loading launchd plist at $LAUNCHD_DIR/$LAUNCHD_PLIST_FILE"
            echo "$LAUNCHD_PLIST_CONTENT" > "$LAUNCHD_DIR/$LAUNCHD_PLIST_FILE"
            launchctl load "$LAUNCHD_DIR/$LAUNCHD_PLIST_FILE"
        fi
    }
}

notify() {
    ## User Notification Center to display a banner when this script is
    ## being executed.
    MSG="Updating git repositories under $DIR"
    [[ "$OSTYPE" == "darwin"* ]] && {
        osascript -e "display notification \"$MSG\" with title \"$(basename $0)\""
    }
    log "$MSG"
}

update_git_repos() {
    ## Find repos and pull changes from their origin
    REPOS="$(find . -type d | grep -E ".git$" | sed 's/\/\.git//g' | sed 's/ /##/g')"
    for repo in $REPOS; do
        repo=$(echo "$repo" | sed 's/##/ /g')
        log "Updating $repo..."
        cd "$repo"
        git pull 2>&1 | logger -s
        cd "$DIR"
    done
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        -d )                    DIR="$2"; shift; shift;;
        --update-interval )     UPDATE_INTERVAL="$2"; shift; shift;;
        --update-name)          UPDATE_NAME="$2"; shift; shift;;
        --update-plist )        UPDATE_PLIST='y'; shift ;;
        help | -h | --help )    help; exit 0;;
        * ) shift ;;
    esac
done

install_plist
notify
update_git_repos