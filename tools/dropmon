#!/usr/bin/env bash
# @file dropmon
# -r ... rotate the log file
# Super simple recording of network dropouts. Outputs live overview of dropouts
# and a csv log file that can be imported to a spreadsheet
# @author Alister Lewis-Bowen <alister@lewis-bowen.org>

[[ -n $DEBUG ]] && set -x
set -eou pipefail

export DOMAIN=${1:-google.com}
export OPTION=${2:-}
export LOG=~/.dropmon.csv
export DROP=0
export EXIT=0
export TIMESTAMP=0

# Ping settings...
export INTERVAL=2
export TIMEOUT=2

exiting() {
    echo -e "\nDropout timestamps written to $LOG"
    EXIT=1
}
trap exiting SIGINT SIGTERM

log() {
    local message="$*"
    # shellcheck disable=SC2086
    echo "$(epochToDate $EPOCHSECONDS), $message" >> "$LOG"
}

# Implemented using macOS version of date...
epochToDate() {
    local epoc="$1"
    date -j -f '%s' +'%m/%d/%Y %H:%M:%S' "$epoc"
}

if [[ "$OPTION" == "-r" ]]; then
    if [[ -f "$LOG" ]]; then
        mv "$LOG" "${LOG}-$(date '+%s')"
    fi
fi

echo -n "Keeping an eye on the connection "
until [[ $EXIT == 1 ]]; do
    if ping -i $INTERVAL -t $TIMEOUT "$DOMAIN" >/dev/null 2>&1; then
        if [[ "$DROP" == 1 ]]; then
            duration=$(( EPOCHSECONDS - TIMESTAMP ))
            # shellcheck disable=SC2086
            log "$(epochToDate $TIMESTAMP), $duration"
            DROP=0
        fi
        echo -n "‚ö°Ô∏è"
    else
        if [[ "$DROP" == 0 ]]; then
            TIMESTAMP=$EPOCHSECONDS
            DROP=1
        fi
        echo -n "üíÄ"
    fi
done