swagger: '2.0'
info:
  description: This is Olympus server.
  version: 0.0.1
  title: Swagger Olympus
host: olympus.vmware.com
basePath: /v1alpha
schemes:
  - https
  - http
paths:
  /v1alpha/cloud/accounts:
    get:
      tags:
        - AccountResourceService
      summary: List Accounts.
      operationId: listCloudAccount
      parameters:
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/accountListAccountsResponse'
    post:
      tags:
        - AccountResourceService
      summary: Create a Account.
      operationId: createCloudAccount
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/accountCreateAccountRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/accountCreateAccountResponse'
  '/v1alpha/cloud/accounts/{name}':
    get:
      tags:
        - AccountResourceService
      summary: Get a Account.
      operationId: getCloudAccount
      parameters:
        - type: string
          description: Name of the account.
          name: name
          in: path
          required: true
        - type: string
          description: Org ID of the cluster organization.
          name: full_name.org_id
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/accountGetAccountResponse'
    put:
      tags:
        - AccountResourceService
      summary: Update (overwrite) a Account.
      operationId: updateCloudAccount
      parameters:
        - type: string
          description: Name of the account.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/accountUpdateAccountRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/accountUpdateAccountResponse'
    delete:
      tags:
        - AccountResourceService
      summary: Delete Account.
      operationId: deleteCloudAccount
      parameters:
        - type: string
          description: Name of the account.
          name: name
          in: path
          required: true
        - type: string
          description: Org ID of the cluster organization.
          name: full_name.org_id
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/accountDeleteAccountResponse'
    patch:
      tags:
        - AccountResourceService
      summary: Patch a Account.
      operationId: patchCloudAccount
      parameters:
        - type: string
          description: Name of the account.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/accountPatchAccountRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/accountPatchAccountResponse'
  /v1alpha/cloud/backuplocations:
    get:
      tags:
        - BackupLocationResourceService
      summary: List BackupLocations.
      operationId: listCloudBackupLocation
      parameters:
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `account`; supports globbing; default (*).
          name: search_scope.account
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationListBackupLocationsResponse'
    post:
      tags:
        - BackupLocationResourceService
      summary: Create a BackupLocation.
      operationId: createCloudBackupLocation
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/backuplocationCreateBackupLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationCreateBackupLocationResponse'
  '/v1alpha/cloud/backuplocations/{name}':
    get:
      tags:
        - BackupLocationResourceService
      summary: Get a BackupLocation.
      operationId: getCloudBackupLocation
      parameters:
        - type: string
          description: Name of the Backup Location.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: >-
            The reference to the provider account where the storage bucket was
            created.
          name: full_name.account
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationGetBackupLocationResponse'
    put:
      tags:
        - BackupLocationResourceService
      summary: Update (overwrite) a BackupLocation.
      operationId: updateCloudBackupLocation
      parameters:
        - type: string
          description: Name of the Backup Location.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/backuplocationUpdateBackupLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationUpdateBackupLocationResponse'
    delete:
      tags:
        - BackupLocationResourceService
      summary: Delete BackupLocation.
      operationId: deleteCloudBackupLocation
      parameters:
        - type: string
          description: Name of the Backup Location.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: >-
            The reference to the provider account where the storage bucket was
            created.
          name: full_name.account
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationDeleteBackupLocationResponse'
    patch:
      tags:
        - BackupLocationResourceService
      summary: Patch a BackupLocation.
      operationId: patchCloudBackupLocation
      parameters:
        - type: string
          description: Name of the Backup Location.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/backuplocationPatchBackupLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationPatchBackupLocationResponse'
  /v1alpha/cloud/snapshotlocations:
    get:
      tags:
        - SnapshotLocationResourceService
      summary: List SnapshotLocations.
      operationId: listCloudSnapshotLocation
      parameters:
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `account`; supports globbing; default (*).
          name: search_scope.account
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationListSnapshotLocationsResponse'
    post:
      tags:
        - SnapshotLocationResourceService
      summary: Create a SnapshotLocation.
      operationId: createCloudSnapshotLocation
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/snapshotlocationCreateSnapshotLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationCreateSnapshotLocationResponse'
  '/v1alpha/cloud/snapshotlocations/{name}':
    get:
      tags:
        - SnapshotLocationResourceService
      summary: Get a SnapshotLocation.
      operationId: getCloudSnapshotLocation
      parameters:
        - type: string
          description: Name of the Snapshot Location.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: >-
            The reference to the provider account where the volume snapshot
            location was created.
          name: full_name.account
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationGetSnapshotLocationResponse'
    put:
      tags:
        - SnapshotLocationResourceService
      summary: Update (overwrite) a SnapshotLocation.
      operationId: updateCloudSnapshotLocation
      parameters:
        - type: string
          description: Name of the Snapshot Location.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/snapshotlocationUpdateSnapshotLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationUpdateSnapshotLocationResponse'
    delete:
      tags:
        - SnapshotLocationResourceService
      summary: Delete SnapshotLocation.
      operationId: deleteCloudSnapshotLocation
      parameters:
        - type: string
          description: Name of the Snapshot Location.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: >-
            The reference to the provider account where the volume snapshot
            location was created.
          name: full_name.account
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationDeleteSnapshotLocationResponse'
    patch:
      tags:
        - SnapshotLocationResourceService
      summary: Patch a SnapshotLocation.
      operationId: patchCloudSnapshotLocation
      parameters:
        - type: string
          description: Name of the Snapshot Location.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/snapshotlocationPatchSnapshotLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationPatchSnapshotLocationResponse'
  '/v1alpha/clusters/{cluster_name}/agents':
    get:
      tags:
        - AgentResourceService
      summary: List Agents.
      operationId: listClusterAgent
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/agentListAgentsResponse'
    post:
      tags:
        - AgentResourceService
      summary: Create a Agent.
      operationId: createClusterAgent
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/agentCreateAgentRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/agentCreateAgentResponse'
  '/v1alpha/clusters/{cluster_name}/agents/{name}':
    get:
      tags:
        - AgentResourceService
      summary: Get a Agent.
      operationId: getClusterAgent
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the agent.
          name: name
          in: path
          required: true
        - type: string
          description: Org ID of the cluster organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of the cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/agentGetAgentResponse'
    put:
      tags:
        - AgentResourceService
      summary: Update (overwrite) a Agent.
      operationId: updateClusterAgent
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the agent.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/agentUpdateAgentRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/agentUpdateAgentResponse'
    delete:
      tags:
        - AgentResourceService
      summary: Delete Agent.
      operationId: deleteClusterAgent
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the agent.
          name: name
          in: path
          required: true
        - type: string
          description: Org ID of the cluster organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of the cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/agentDeleteAgentResponse'
    patch:
      tags:
        - AgentResourceService
      summary: Patch a Agent.
      operationId: patchClusterAgent
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the agent.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/agentPatchAgentRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/agentPatchAgentResponse'
  '/v1alpha/clusters/{cluster_name}/agents/{agent_name}/extensions':
    get:
      tags:
        - ExtensionResourceService
      summary: List Extensions.
      operationId: listClusterAgentExtension
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Scope search to `agent_name`; supports globbing; default (*).
          name: agent_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/extensionListExtensionsResponse'
    post:
      tags:
        - ExtensionResourceService
      summary: Create a Extension.
      operationId: createClusterAgentExtension
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the agent.
          name: agent_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/extensionCreateExtensionRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/extensionCreateExtensionResponse'
  '/v1alpha/clusters/{cluster_name}/agents/{agent_name}/extensions/{name}':
    get:
      tags:
        - ExtensionResourceService
      summary: Get a Extension.
      operationId: getClusterAgentExtension
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the agent.
          name: agent_name
          in: path
          required: true
        - type: string
          description: Name of the extension.
          name: name
          in: path
          required: true
        - type: string
          description: Org ID of the cluster organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of the cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/extensionGetExtensionResponse'
    put:
      tags:
        - ExtensionResourceService
      summary: Update (overwrite) a Extension.
      operationId: updateClusterAgentExtension
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the agent.
          name: agent_name
          in: path
          required: true
        - type: string
          description: Name of the extension.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/extensionUpdateExtensionRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/extensionUpdateExtensionResponse'
    delete:
      tags:
        - ExtensionResourceService
      summary: Delete Extension.
      operationId: deleteClusterAgentExtension
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the agent.
          name: agent_name
          in: path
          required: true
        - type: string
          description: Name of the extension.
          name: name
          in: path
          required: true
        - type: string
          description: Org ID of the cluster organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of the cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/extensionDeleteExtensionResponse'
    patch:
      tags:
        - ExtensionResourceService
      summary: Patch a Extension.
      operationId: patchClusterAgentExtension
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the agent.
          name: agent_name
          in: path
          required: true
        - type: string
          description: Name of the extension.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/extensionPatchExtensionRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/extensionPatchExtensionResponse'
  '/v1alpha/clusters/{cluster_name}/brms':
    get:
      tags:
        - BrmResourceService
      summary: List Brms.
      operationId: listClusterBrm
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/brmListBrmsResponse'
    post:
      tags:
        - BrmResourceService
      summary: Create a Brm.
      operationId: createClusterBrm
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/brmCreateBrmRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/brmCreateBrmResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{name}':
    get:
      tags:
        - BrmResourceService
      summary: Get a Brm.
      operationId: getClusterBrm
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of this BRM.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/brmGetBrmResponse'
    put:
      tags:
        - BrmResourceService
      summary: Update (overwrite) a Brm.
      operationId: updateClusterBrm
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of this BRM.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/brmUpdateBrmRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/brmUpdateBrmResponse'
    delete:
      tags:
        - BrmResourceService
      summary: Delete Brm.
      operationId: deleteClusterBrm
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of this BRM.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/brmDeleteBrmResponse'
    patch:
      tags:
        - BrmResourceService
      summary: Patch a Brm.
      operationId: patchClusterBrm
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of this BRM.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/brmPatchBrmRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/brmPatchBrmResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/backups':
    get:
      tags:
        - BackupResourceService
      summary: List Backups.
      operationId: listClusterBrmBackup
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Scope search to `brm_name`; supports globbing; default (*).
          name: brm_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backupListBackupsResponse'
    post:
      tags:
        - BackupResourceService
      summary: Create a Backup.
      operationId: createClusterBrmBackup
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/backupCreateBackupRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backupCreateBackupResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/backups/{name}':
    get:
      tags:
        - BackupResourceService
      summary: Get a Backup.
      operationId: getClusterBrmBackup
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Backup.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backupGetBackupResponse'
    put:
      tags:
        - BackupResourceService
      summary: Update (overwrite) a Backup.
      operationId: updateClusterBrmBackup
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Backup.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/backupUpdateBackupRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backupUpdateBackupResponse'
    delete:
      tags:
        - BackupResourceService
      summary: Delete Backup.
      operationId: deleteClusterBrmBackup
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Backup.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backupDeleteBackupResponse'
    patch:
      tags:
        - BackupResourceService
      summary: Patch a Backup.
      operationId: patchClusterBrmBackup
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Backup.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/backupPatchBackupRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backupPatchBackupResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/backuplocations':
    get:
      tags:
        - BackupLocationResourceService
      summary: List BackupLocations.
      operationId: listClusterBrmBackupLocation
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Scope search to `brm_name`; supports globbing; default (*).
          name: brm_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationListBackupLocationsResponse'
    post:
      tags:
        - BackupLocationResourceService
      summary: Create a BackupLocation.
      operationId: createClusterBrmBackupLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/backuplocationCreateBackupLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationCreateBackupLocationResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/backuplocations/{name}':
    get:
      tags:
        - BackupLocationResourceService
      summary: Get a BackupLocation.
      operationId: getClusterBrmBackupLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Backup Location.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationGetBackupLocationResponse'
    put:
      tags:
        - BackupLocationResourceService
      summary: Update (overwrite) a BackupLocation.
      operationId: updateClusterBrmBackupLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Backup Location.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/backuplocationUpdateBackupLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationUpdateBackupLocationResponse'
    delete:
      tags:
        - BackupLocationResourceService
      summary: Delete BackupLocation.
      operationId: deleteClusterBrmBackupLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Backup Location.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationDeleteBackupLocationResponse'
    patch:
      tags:
        - BackupLocationResourceService
      summary: Patch a BackupLocation.
      operationId: patchClusterBrmBackupLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Backup Location.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/backuplocationPatchBackupLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/backuplocationPatchBackupLocationResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/restores':
    get:
      tags:
        - RestoreResourceService
      summary: List Restores.
      operationId: listClusterBrmRestore
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Scope search to `brm_name`; supports globbing; default (*).
          name: brm_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/restoreListRestoresResponse'
    post:
      tags:
        - RestoreResourceService
      summary: Create a Restore.
      operationId: createClusterBrmRestore
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/restoreCreateRestoreRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/restoreCreateRestoreResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/restores/{name}':
    get:
      tags:
        - RestoreResourceService
      summary: Get a Restore.
      operationId: getClusterBrmRestore
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Restore.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/restoreGetRestoreResponse'
    put:
      tags:
        - RestoreResourceService
      summary: Update (overwrite) a Restore.
      operationId: updateClusterBrmRestore
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Restore.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/restoreUpdateRestoreRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/restoreUpdateRestoreResponse'
    delete:
      tags:
        - RestoreResourceService
      summary: Delete Restore.
      operationId: deleteClusterBrmRestore
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Restore.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/restoreDeleteRestoreResponse'
    patch:
      tags:
        - RestoreResourceService
      summary: Patch a Restore.
      operationId: patchClusterBrmRestore
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Restore.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/restorePatchRestoreRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/restorePatchRestoreResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/schedules':
    get:
      tags:
        - ScheduleResourceService
      summary: List Schedules.
      operationId: listClusterBrmSchedule
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Scope search to `brm_name`; supports globbing; default (*).
          name: brm_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/scheduleListSchedulesResponse'
    post:
      tags:
        - ScheduleResourceService
      summary: Create a Schedule.
      operationId: createClusterBrmSchedule
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scheduleCreateScheduleRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/scheduleCreateScheduleResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/schedules/{name}':
    get:
      tags:
        - ScheduleResourceService
      summary: Get a Schedule.
      operationId: getClusterBrmSchedule
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Schedule.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/scheduleGetScheduleResponse'
    put:
      tags:
        - ScheduleResourceService
      summary: Update (overwrite) a Schedule.
      operationId: updateClusterBrmSchedule
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Schedule.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scheduleUpdateScheduleRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/scheduleUpdateScheduleResponse'
    delete:
      tags:
        - ScheduleResourceService
      summary: Delete Schedule.
      operationId: deleteClusterBrmSchedule
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Schedule.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/scheduleDeleteScheduleResponse'
    patch:
      tags:
        - ScheduleResourceService
      summary: Patch a Schedule.
      operationId: patchClusterBrmSchedule
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Schedule.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/schedulePatchScheduleRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/schedulePatchScheduleResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/snapshotlocations':
    get:
      tags:
        - SnapshotLocationResourceService
      summary: List SnapshotLocations.
      operationId: listClusterBrmSnapshotLocation
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Scope search to `brm_name`; supports globbing; default (*).
          name: brm_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationListSnapshotLocationsResponse'
    post:
      tags:
        - SnapshotLocationResourceService
      summary: Create a SnapshotLocation.
      operationId: createClusterBrmSnapshotLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/snapshotlocationCreateSnapshotLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationCreateSnapshotLocationResponse'
  '/v1alpha/clusters/{cluster_name}/brms/{brm_name}/snapshotlocations/{name}':
    get:
      tags:
        - SnapshotLocationResourceService
      summary: Get a SnapshotLocation.
      operationId: getClusterBrmSnapshotLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Snapshot location.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationGetSnapshotLocationResponse'
    put:
      tags:
        - SnapshotLocationResourceService
      summary: Update (overwrite) a SnapshotLocation.
      operationId: updateClusterBrmSnapshotLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Snapshot location.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/snapshotlocationUpdateSnapshotLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationUpdateSnapshotLocationResponse'
    delete:
      tags:
        - SnapshotLocationResourceService
      summary: Delete SnapshotLocation.
      operationId: deleteClusterBrmSnapshotLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Snapshot location.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationDeleteSnapshotLocationResponse'
    patch:
      tags:
        - SnapshotLocationResourceService
      summary: Patch a SnapshotLocation.
      operationId: patchClusterBrmSnapshotLocation
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of backup restore and migration tool.
          name: brm_name
          in: path
          required: true
        - type: string
          description: Name of this Snapshot location.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/snapshotlocationPatchSnapshotLocationRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/snapshotlocationPatchSnapshotLocationResponse'
  '/v1alpha/clusters/{full_name.cluster_name}/healths/{full_name.name}':
    get:
      summary: Get a Health.
      operationId: getClusterHealth
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/healthGetHealthResponse'
      parameters:
        - name: full_name.cluster_name
          description: Name of the cluster.
          in: path
          required: true
          type: string
        - name: full_name.name
          description: Name of the cluster health.
          in: path
          required: true
          type: string
        - name: full_name.org_id
          description: Org ID of the cluster organization.
          in: query
          required: false
          type: string
        - name: full_name.location
          description: Location of the cluster.
          in: query
          required: false
          type: string
      tags:
        - HealthResourceService
  '/v1alpha/clusters/{search_scope.cluster_name}/healths':
    get:
      summary: List Healths.
      operationId: listClusterHealth
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/healthListHealthsResponse'
      parameters:
        - name: search_scope.cluster_name
          description: Scope search to `cluster_name`; supports globbing; default (*).
          in: path
          required: true
          type: string
        - name: query
          description: OQL query string.
          in: query
          required: false
          type: string
        - name: pagination_options.size
          description: Number of records to return.
          in: query
          required: false
          type: string
          format: int64
        - name: pagination_options.page_token
          description: Token to specify a page of returning records.
          in: query
          required: false
          type: string
        - name: search_scope.group
          description: Scope search to `group`; supports globbing; default (*).
          in: query
          required: false
          type: string
        - name: search_scope.org_id
          description: Scope search to `org_id`; supports globbing; default (*).
          in: query
          required: false
          type: string
        - name: search_scope.location
          description: Scope search to `location`; supports globbing; default (*).
          in: query
          required: false
          type: string
        - name: search_scope.name
          description: Scope search to `name`; supports globbing; default (*).
          in: query
          required: false
          type: string
        - name: sort_by
          description: Sort Order.
          in: query
          required: false
          type: string
      tags:
        - HealthResourceService
  '/v1alpha/clusters/{cluster_name}/inspections':
    get:
      tags:
        - InspectionResourceService
      summary: List Inspections.
      operationId: listClusterInspection
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/inspectionListInspectionsResponse'
    post:
      tags:
        - InspectionResourceService
      summary: Create a Inspection.
      operationId: createClusterInspection
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/inspectionCreateInspectionRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/inspectionCreateInspectionResponse'
  '/v1alpha/clusters/{cluster_name}/inspections/{name}':
    get:
      tags:
        - InspectionResourceService
      summary: Get a Inspection.
      operationId: getClusterInspection
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the inspection object.
          name: name
          in: path
          required: true
        - type: string
          description: Org ID of the cluster organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of the cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/inspectionGetInspectionResponse'
    put:
      tags:
        - InspectionResourceService
      summary: Update (overwrite) a Inspection.
      operationId: updateClusterInspection
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the inspection object.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/inspectionUpdateInspectionRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/inspectionUpdateInspectionResponse'
    delete:
      tags:
        - InspectionResourceService
      summary: Delete Inspection.
      operationId: deleteClusterInspection
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the inspection object.
          name: name
          in: path
          required: true
        - type: string
          description: Org ID of the cluster organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of the cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/inspectionDeleteInspectionResponse'
    patch:
      tags:
        - InspectionResourceService
      summary: Patch a Inspection.
      operationId: patchClusterInspection
      parameters:
        - type: string
          description: Name of the cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of the inspection object.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/inspectionPatchInspectionRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/inspectionPatchInspectionResponse'
  '/v1alpha/clusters/{cluster_name}/namespaces':
    get:
      tags:
        - NamespaceResourceService
      summary: List Namespaces.
      operationId: listClusterNamespace
      parameters:
        - type: string
          description: Scope search to `cluster_name`; supports globbing; default (*).
          name: cluster_name
          in: path
          required: true
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `location`; supports globbing; default (*).
          name: search_scope.location
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/namespaceListNamespacesResponse'
    post:
      tags:
        - NamespaceResourceService
      summary: Create a Namespace.
      operationId: createClusterNamespace
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/namespaceCreateNamespaceRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/namespaceCreateNamespaceResponse'
  '/v1alpha/clusters/{cluster_name}/namespaces/{name}':
    get:
      tags:
        - NamespaceResourceService
      summary: Get a Namespace.
      operationId: getClusterNamespace
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of this Namespace.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/namespaceGetNamespaceResponse'
    put:
      tags:
        - NamespaceResourceService
      summary: Update (overwrite) a Namespace.
      operationId: updateClusterNamespace
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of this Namespace.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/namespaceUpdateNamespaceRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/namespaceUpdateNamespaceResponse'
    delete:
      tags:
        - NamespaceResourceService
      summary: Delete Namespace.
      operationId: deleteClusterNamespace
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of this Namespace.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
        - type: string
          description: Location of parent Cluster.
          name: full_name.location
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/namespaceDeleteNamespaceResponse'
    patch:
      tags:
        - NamespaceResourceService
      summary: Patch a Namespace.
      operationId: patchClusterNamespace
      parameters:
        - type: string
          description: Name of parent Cluster.
          name: cluster_name
          in: path
          required: true
        - type: string
          description: Name of this Namespace.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/namespacePatchNamespaceRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/namespacePatchNamespaceResponse'
  '/v1alpha/clusters/{full_name.cluster_name}/namespaces:iam/{full_name.name}':
    get:
      summary: Get policy for a Namespace.
      operationId: getClusterNamespaceIam
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/namespaceGetNamespaceIAMPolicyResponse'
      parameters:
        - name: full_name.cluster_name
          description: Name of parent Cluster.
          in: path
          required: true
          type: string
        - name: full_name.name
          description: Name of this Namespace.
          in: path
          required: true
          type: string
        - name: full_name.org_id
          description: ID of Organization.
          in: query
          required: false
          type: string
        - name: full_name.location
          description: Location of parent Cluster.
          in: query
          required: false
          type: string
      tags:
        - NamespaceIAMPolicy
  '/v1alpha/clusters/{full_name.cluster_name}/namespaces:iam/{full_name.name}/testPermissions':
    post:
      summary: Tests permissions for a Namespace.
      operationId: testPermissionsClusterNamespaceIam
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/namespaceTestNamespaceIAMPermissionsResponse'
      parameters:
        - name: full_name.cluster_name
          description: Name of parent Cluster.
          in: path
          required: true
          type: string
        - name: full_name.name
          description: Name of this Namespace.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/namespaceTestNamespaceIAMPermissionsRequest'
      tags:
        - NamespaceIAMPolicy
  '/v1alpha/clusters/{full_name.cluster_name}/objects/{full_name.name}':
    get:
      summary: Get a Object.
      operationId: getClusterObject
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/objectGetObjectResponse'
      parameters:
        - name: full_name.cluster_name
          description: Name of the cluster.
          in: path
          required: true
          type: string
        - name: full_name.name
          description: Name of the cluster object.
          in: path
          required: true
          type: string
        - name: full_name.org_id
          description: Org ID of the cluster organization.
          in: query
          required: false
          type: string
        - name: full_name.location
          description: Location of the cluster.
          in: query
          required: false
          type: string
      tags:
        - ObjectResourceService
  '/v1alpha/clusters/{search_scope.cluster_name}/objects':
    get:
      summary: List Objects.
      operationId: listClusterObject
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/objectListObjectsResponse'
      parameters:
        - name: search_scope.cluster_name
          description: Scope search to `cluster_name`; supports globbing; default (*).
          in: path
          required: true
          type: string
        - name: query
          description: OQL query string.
          in: query
          required: false
          type: string
        - name: pagination_options.size
          description: Number of records to return.
          in: query
          required: false
          type: string
          format: int64
        - name: pagination_options.page_token
          description: Token to specify a page of returning records.
          in: query
          required: false
          type: string
        - name: search_scope.group
          description: Scope search to `group`; supports globbing; default (*).
          in: query
          required: false
          type: string
        - name: search_scope.org_id
          description: Scope search to `org_id`; supports globbing; default (*).
          in: query
          required: false
          type: string
        - name: search_scope.location
          description: Scope search to `location`; supports globbing; default (*).
          in: query
          required: false
          type: string
        - name: search_scope.name
          description: Scope search to `name`; supports globbing; default (*).
          in: query
          required: false
          type: string
        - name: sort_by
          description: Sort Order.
          in: query
          required: false
          type: string
      tags:
        - ObjectResourceService
  /v1alpha/clustergroups:
    get:
      tags:
        - ClusterGroupResourceService
      summary: List ClusterGroups.
      operationId: listClustergroup
      parameters:
        - type: string
          description: OQL query string.
          name: query
          in: query
        - type: string
          format: int64
          description: Number of records to return.
          name: pagination_options.size
          in: query
        - type: string
          description: Token to specify a page of returning records.
          name: pagination_options.page_token
          in: query
        - type: string
          description: Scope search to `group`; supports globbing; default (*).
          name: search_scope.group
          in: query
        - type: string
          description: Scope search to `org_id`; supports globbing; default (*).
          name: search_scope.org_id
          in: query
        - type: string
          description: Scope search to `name`; supports globbing; default (*).
          name: search_scope.name
          in: query
        - type: string
          description: Sort Order.
          name: sort_by
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupListClusterGroupsResponse'
    post:
      tags:
        - ClusterGroupResourceService
      summary: Create a ClusterGroup.
      operationId: createClustergroup
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/clustergroupCreateClusterGroupRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupCreateClusterGroupResponse'
  '/v1alpha/clustergroups/{name}':
    get:
      tags:
        - ClusterGroupResourceService
      summary: Get a ClusterGroup.
      operationId: getClustergroup
      parameters:
        - type: string
          description: Name of this ClusterGroup.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupGetClusterGroupResponse'
    put:
      tags:
        - ClusterGroupResourceService
      summary: Update (overwrite) a ClusterGroup.
      operationId: updateClustergroup
      parameters:
        - type: string
          description: Name of this ClusterGroup.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/clustergroupUpdateClusterGroupRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupUpdateClusterGroupResponse'
    delete:
      tags:
        - ClusterGroupResourceService
      summary: Delete ClusterGroup.
      operationId: deleteClustergroup
      parameters:
        - type: string
          description: Name of this ClusterGroup.
          name: name
          in: path
          required: true
        - type: string
          description: ID of Organization.
          name: full_name.org_id
          in: query
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupDeleteClusterGroupResponse'
    patch:
      tags:
        - ClusterGroupResourceService
      summary: Patch a ClusterGroup.
      operationId: patchClustergroup
      parameters:
        - type: string
          description: Name of this ClusterGroup.
          name: name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/clustergroupPatchClusterGroupRequest'
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupPatchClusterGroupResponse'
  '/v1alpha/clustergroups:iam/{full_name.name}':
    get:
      summary: Get policy for a ClusterGroup.
      operationId: getClustergroupIam
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupGetClusterGroupIAMPolicyResponse'
      parameters:
        - name: full_name.name
          description: Name of this ClusterGroup.
          in: path
          required: true
          type: string
        - name: full_name.org_id
          description: ID of Organization.
          in: query
          required: false
          type: string
      tags:
        - ClusterGroupIAMPolicy
    put:
      summary: Update (overwrite) policy for a ClusterGroup - deleted if body is empty.
      operationId: updateClustergroupIam
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupUpdateClusterGroupIAMPolicyResponse'
      parameters:
        - name: full_name.name
          description: Name of this ClusterGroup.
          in: path
          required: true
          type: string
        - name: body
          description: ClusterGroup policy.
          in: body
          required: true
          schema:
            $ref: '#/definitions/policyIAMPolicy'
      tags:
        - ClusterGroupIAMPolicy
    patch:
      summary: Patch a ClusterGroup policy.
      operationId: patchClustergroupIam
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupPatchClusterGroupIAMPolicyResponse'
      parameters:
        - name: full_name.name
          description: Name of this ClusterGroup.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/clustergroupPatchClusterGroupIAMPolicyRequest'
      tags:
        - ClusterGroupIAMPolicy
  '/v1alpha/clustergroups:iam/{full_name.name}/testPermissions':
    post:
      summary: Tests permissions for a ClusterGroup.
      operationId: testPermissionsClustergroupIam
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/clustergroupTestClusterGroupIAMPermissionsResponse'
      parameters:
        - name: full_name.name
          description: Name of this ClusterGroup.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/clustergroupTestClusterGroupIAMPermissionsRequest'
      tags:
        - ClusterGroupIAMPolicy
definitions:
  ResourceHealthHealth:
    type: string
    enum:
      - UNKNOWN
      - HEALTHY
      - WARNING
      - UNHEALTHY
    default: UNKNOWN
    description: |-
      Health describes the health of a resource.

       - UNKNOWN: Unknown health.
       - HEALTHY: Resource is healthy.
       - WARNING: Resource is in warning state.
       - UNHEALTHY: Resource is unhealthy.
  ResourceStateState:
    type: string
    enum:
      - UNKNOWN
      - PENDING
      - PROCESSING
      - CREATING
      - COMPLETE
      - READY
      - DELETING
      - ERROR
    default: UNKNOWN
    description: |-
      State describes the state of a resource.

       - UNKNOWN: Unknown state.
       - PENDING: Resource is pending processing.
       - PROCESSING: Processing the resource.
       - CREATING: Resource is being created.
       - COMPLETE: Processing complete.
       - READY: Resource is ready state.
       - DELETING: Resource is being deleted.
       - ERROR: Error in processing.
  WatchAccountsResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  accountAWSRoleBasedConfig:
    description: AWS role based config.
    type: object
    properties:
      role:
        description: Role to assume.
        type: string
  accountAWSSecretBasedConfig:
    description: AWS secret based config.
    type: object
    properties:
      access_key:
        description: User's AWS access key.
        type: string
      account_id:
        description: User's AWS account ID.
        type: string
      secret_key:
        description: User's secret key.
        type: string
  accountAccount:
    description: A cloud provider account details.
    type: object
    properties:
      full_name:
        description: Full name for the provider accounts.
        $ref: '#/definitions/cloudaccountFullName'
      object_meta:
        description: Metadata for the provisioned cluster object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for Account.
        $ref: '#/definitions/accountAccountSpec'
      status:
        description: Status of the Account.
        $ref: '#/definitions/accountAccountStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  accountAccountSpec:
    description: The Account spec.
    type: object
    properties:
      cloud_provider_config:
        description: User's cloud provider account.
        $ref: '#/definitions/accountCloudProviderVendorSpecificConfig'
  accountAccountStatus:
    description: Status of Account resource.
    type: object
    properties:
      common_status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
  accountCloudProviderAWSAccountConfiguration:
    description: Cloud provider AWS specific account details.
    type: object
    properties:
      aws_role:
        description: Role based config.
        $ref: '#/definitions/accountAWSRoleBasedConfig'
      aws_secret:
        description: Secret based config.
        $ref: '#/definitions/accountAWSSecretBasedConfig'
  accountCloudProviderAzureAccountConfiguration:
    description: Cloud provider Azure specific account details.
    type: object
    properties:
      account_id:
        description: User's Azure account ID.
        type: string
  accountCloudProviderGCPAccountConfiguration:
    description: Cloud provider GCP specific account details.
    type: object
    properties:
      account_id:
        description: User's GCP account ID.
        type: string
  accountCloudProviderVSphereAccountConfiguration:
    description: Cloud provider vSphere specific account details.
    type: object
    properties:
      endpoint:
        description: User's Vsphere endpoint.
        type: string
  accountCloudProviderVendorSpecificConfig:
    description: Cloud provider specific configuration for user accounts.
    type: object
    properties:
      aws_config:
        description: Provider AWS specific config.
        $ref: '#/definitions/accountCloudProviderAWSAccountConfiguration'
      azure_config:
        description: Provider Azure specific config.
        $ref: '#/definitions/accountCloudProviderAzureAccountConfiguration'
      gcp_config:
        description: Provider GCP specific config.
        $ref: '#/definitions/accountCloudProviderGCPAccountConfiguration'
      vsphere_config:
        description: Provider vSphere specific config.
        $ref: '#/definitions/accountCloudProviderVSphereAccountConfiguration'
  accountCreateAccountRequest:
    description: Request to create a Account.
    type: object
    properties:
      account:
        description: Account to create.
        $ref: '#/definitions/accountAccount'
  accountCreateAccountResponse:
    description: Response from creating a Account.
    type: object
    properties:
      account:
        description: Account created.
        $ref: '#/definitions/accountAccount'
  accountDeleteAccountResponse:
    description: Response from deleting Account.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  accountGetAccountResponse:
    description: Response from getting a Account.
    type: object
    properties:
      account:
        description: Account returned.
        $ref: '#/definitions/accountAccount'
  accountListAccountsResponse:
    description: Response from listing Accounts.
    type: object
    properties:
      accounts:
        description: List of accounts.
        type: array
        items:
          $ref: '#/definitions/accountAccount'
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
  accountPatchAccountRequest:
    description: Request to patch a Account.
    type: object
    properties:
      account:
        description: Patch Account.
        $ref: '#/definitions/accountAccount'
  accountPatchAccountResponse:
    description: Response from patching a Account.
    type: object
    properties:
      account:
        description: Account to patch.
        $ref: '#/definitions/accountAccount'
  accountSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  accountUpdateAccountRequest:
    description: Request to update (overwrite) a Account.
    type: object
    properties:
      account:
        description: Update Account.
        $ref: '#/definitions/accountAccount'
  accountUpdateAccountResponse:
    description: Response from updating a Account.
    type: object
    properties:
      account:
        description: Account updated.
        $ref: '#/definitions/accountAccount'
  accountWatchAccountsResponse:
    description: Streamed response from watching Accounts.
    type: object
    properties:
      account:
        description: Account event.
        $ref: '#/definitions/accountAccount'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchAccountsResponseEventType'
  cloudaccountFullName:
    description: Full name of the provider accounts.
    type: object
    properties:
      name:
        description: Name of the account.
        type: string
      org_id:
        description: Org ID of the cluster organization.
        type: string
  metaObjectMeta:
    description: Holds general shared object metadatas.
    type: object
    properties:
      annotations:
        description: >-
          Annotations for the object. Annotations hold system level imformation
          provisioned by controllers.
        type: object
        additionalProperties:
          type: string
      creation_time:
        description: Creation time of the object.
        type: string
        format: date-time
      description:
        description: Description of the resource.
        type: string
      group:
        description: >-
          Group this resource belongs to, if none is given the group is
          `default`.
        type: string
      labels:
        description: Arbitrary labels attached to the object.
        type: object
        additionalProperties:
          type: string
      resource_version:
        description: 'Version of the resource, increments on changes.'
        type: string
      uid:
        description: UID for the object.
        type: string
      update_time:
        description: Update time of the object.
        type: string
        format: date-time
  metaTypeMeta:
    description: Holds general type metadatas.
    type: object
    properties:
      kind:
        description: Kind of the type.
        type: string
      package:
        description: Package of the type.
        type: string
      version:
        description: Version of the type.
        type: string
  optionsTokenPaginationOptions:
    description: Options to paginate a response using page size and token.
    type: object
    properties:
      page_token:
        description: Token to specify a page of returning records.
        type: string
      size:
        description: Number of records to return.
        type: string
        format: int64
  protobufAny:
    type: object
    properties:
      type_url:
        type: string
      value:
        type: string
        format: byte
  runtimeStreamError:
    type: object
    properties:
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
      grpc_code:
        type: integer
        format: int32
      http_code:
        type: integer
        format: int32
      http_status:
        type: string
      message:
        type: string
  statusResourceHealth:
    type: object
    properties:
      health:
        $ref: '#/definitions/ResourceHealthHealth'
        description: Health of a resource.
      message:
        type: string
        title: 'Additional information e.g., reason for not HEALTHY'
    description: Health of a resource.
  statusResourceState:
    type: object
    properties:
      state:
        $ref: '#/definitions/ResourceStateState'
        description: State of a resource.
      message:
        type: string
        description: 'Additional information e.g., reason for ERROR state.'
    description: State of a resource.
  statusResourceStatus:
    type: object
    properties:
      state:
        $ref: '#/definitions/statusResourceState'
        description: State of a resource.
      health:
        $ref: '#/definitions/statusResourceHealth'
        description: Health of a resource.
    description: Status of a resource.
  WatchBackupLocationsResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  backuplocationAzureStorageConfiguration:
    description: Azure specific storage configuration details.
    type: object
    properties:
      resource_group:
        description: >-
          Name of the resource group containing the storage account for this
          backup storage location.
        type: string
      storage_accont:
        description: Name of the storage account for this backup storage location.
        type: string
  backuplocationBackupLocation:
    description: A target location for backups.
    type: object
    properties:
      full_name:
        description: Full name for the BackupLocation.
        $ref: '#/definitions/backuplocationFullName'
      object_meta:
        description: Metadata for the backup location object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the backup location.
        $ref: '#/definitions/backuplocationBackupLocationSpec'
      status:
        description: Status of the backup location.
        $ref: '#/definitions/backuplocationBackupLocationStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  backuplocationBackupLocationSpec:
    description: The backup location spec.
    type: object
    properties:
      bucket:
        description: The bucket to use for object storage.
        type: string
      config:
        description: Provider-specific storage configuration fields.
        $ref: '#/definitions/backuplocationProviderSpecificStorageConfig'
      provider:
        description: >-
          The name for whichever cloud provider will be used to actually store
          the backups, such as: aws, azure and gcp.
        type: string
      region:
        description: The region of the bucket origin. Optional.
        type: string
      secret_name:
        description: The name of secret to be used to access the bucket.
        type: string
  backuplocationBackupLocationStatus:
    description: Status of the backup location resource.
    type: object
    properties:
      status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
  backuplocationCreateBackupLocationRequest:
    description: Request to create a BackupLocation.
    type: object
    properties:
      backuplocation:
        description: BackupLocation to create.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocation'
  backuplocationCreateBackupLocationResponse:
    description: Response from creating a BackupLocation.
    type: object
    properties:
      backuplocation:
        description: BackupLocation created.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocation'
  backuplocationDeleteBackupLocationResponse:
    description: Response from deleting BackupLocation.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  backuplocationFullName:
    description: |-
      Full name of the resource. This includes the object name along
      with any parents or further identifiers.
    type: object
    properties:
      account:
        description: >-
          The reference to the provider account where the storage bucket was
          created.
        type: string
      name:
        description: Name of the Backup Location.
        type: string
      org_id:
        description: ID of Organization.
        type: string
  backuplocationGCPStorageConfiguration:
    description: GCP does not have any specific storage configuration detail.
    type: object
  backuplocationGetBackupLocationResponse:
    description: Response from getting a BackupLocation.
    type: object
    properties:
      backuplocation:
        description: BackupLocation returned.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocation'
  backuplocationListBackupLocationsResponse:
    description: Response from listing BackupLocations.
    type: object
    properties:
      backuplocations:
        description: List of backuplocations.
        type: array
        items:
          $ref: '#/definitions/clusterbrmbackuplocationBackupLocation'
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
  backuplocationPatchBackupLocationRequest:
    description: Request to patch a BackupLocation.
    type: object
    properties:
      backuplocation:
        description: Patch BackupLocation.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocation'
  backuplocationPatchBackupLocationResponse:
    description: Response from patching a BackupLocation.
    type: object
    properties:
      backuplocation:
        description: BackupLocation to patch.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocation'
  backuplocationProviderSpecificStorageConfig:
    description: >-
      Provider specific configuration for backup location
      (https://github.com/heptio/velero/blob/master/docs/api-types/backupstoragelocation.md).
    type: object
    properties:
      azure_config:
        description: Azure specific config.
        $ref: '#/definitions/backuplocationAzureStorageConfiguration'
      gcp_config:
        description: GCP specific config.
        $ref: '#/definitions/backuplocationGCPStorageConfiguration'
      s3_config:
        description: S3 and S3-compatible config.
        $ref: '#/definitions/backuplocationS3StorageConfiguration'
  backuplocationS3StorageConfiguration:
    description: AWS S3 or other S3-compatible storage configuration details.
    type: object
    properties:
      kms_key_id:
        description: >-
          An AWS KMS key id or alias to enable encryption of the backups stored
          in S3. Only works with AWS S3 and may

          require explicitly granting key usage rights.
        type: string
      public_url:
        description: >-
          The service endpoint used for generating download URLs. This field is
          primarily for local storage services like Minio.
        type: string
      s3_force_path_style:
        description: >-
          A flag for whether to force path style URLs for S3 objects. It is
          defaul to false and set it to true when

          using local storage service like Minio.
        type: boolean
        format: boolean
      s3_url:
        description: The service endpoint for non-AWS S3 storage solution.
        type: string
      signature_version:
        description: >-
          Version of the signature algorithm used to create signed URLs that are
          used to download backups or fetch logs.

          Possible versions are "1" and "4". Usually the default version 4 is
          correct, but some S3-compatible providers

          like Quobyte only support version 1.
        type: string
  backuplocationSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      brm_name:
        description: Scope search to `brm_name`; supports globbing; default (*).
        type: string
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  backuplocationUpdateBackupLocationRequest:
    description: Request to update (overwrite) a BackupLocation.
    type: object
    properties:
      backuplocation:
        description: Update BackupLocation.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocation'
  backuplocationUpdateBackupLocationResponse:
    description: Response from updating a BackupLocation.
    type: object
    properties:
      backuplocation:
        description: BackupLocation updated.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocation'
  backuplocationWatchBackupLocationsResponse:
    description: Streamed response from watching BackupLocations.
    type: object
    properties:
      backuplocation:
        description: BackupLocation event.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocation'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchBackupLocationsResponseEventType'
  WatchSnapshotLocationsResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  snapshotlocationAWSSnapshotConfiguration:
    description: AWS specific volume snapshot configuration details.
    type: object
    properties:
      region:
        description: The region of the volume snapshot.
        type: string
  snapshotlocationAzureSnapshotConfiguration:
    description: Azure specific volume snapshot configuration details.
    type: object
    properties:
      api_timeout:
        description: The timeout for Azure API request to complete.
        type: string
      resource_group:
        description: >-
          The name of the resource group where volume snapshots should be
          stored, if different from the cluster's

          resource group.
        type: string
  snapshotlocationCreateSnapshotLocationRequest:
    description: Request to create a SnapshotLocation.
    type: object
    properties:
      snapshotlocation:
        description: SnapshotLocation to create.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocation'
  snapshotlocationCreateSnapshotLocationResponse:
    description: Response from creating a SnapshotLocation.
    type: object
    properties:
      snapshotlocation:
        description: SnapshotLocation created.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocation'
  snapshotlocationCustomSnapshotConfiguration:
    description: Custom volume snapshot configuration details.
    type: object
    properties:
      config:
        description: The configuration map for any volume provider.
        type: object
        additionalProperties:
          type: string
  snapshotlocationDeleteSnapshotLocationResponse:
    description: Response from deleting SnapshotLocation.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  snapshotlocationFullName:
    description: |-
      Full name of the resource. This includes the object name along
      with any parents or further identifiers.
    type: object
    properties:
      account:
        description: >-
          The reference to the provider account where the volume snapshot
          location was created.
        type: string
      name:
        description: Name of the Snapshot Location.
        type: string
      org_id:
        description: ID of Organization.
        type: string
  snapshotlocationGCPSnapshotConfiguration:
    description: GCP specific volume snapshot configuration details.
    type: object
    properties:
      project:
        description: >-
          The project ID where snapshots should be stored, if different than the
          project that your IAM account is in.
        type: string
      snapshot_location:
        description: >-
          The location where volume snapshot will be stored
          (https://cloud.google.com/storage/docs/locations#available_locations).

          If not specified, the default location will be used.
          (https://cloud.google.com/compute/docs/disks/create-snapshots#default_location).
        type: string
  snapshotlocationGetSnapshotLocationResponse:
    description: Response from getting a SnapshotLocation.
    type: object
    properties:
      snapshotlocation:
        description: SnapshotLocation returned.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocation'
  snapshotlocationListSnapshotLocationsResponse:
    description: Response from listing SnapshotLocations.
    type: object
    properties:
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
      snapshotlocations:
        description: List of snapshotlocations.
        type: array
        items:
          $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocation'
  snapshotlocationPatchSnapshotLocationRequest:
    description: Request to patch a SnapshotLocation.
    type: object
    properties:
      snapshotlocation:
        description: Patch SnapshotLocation.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocation'
  snapshotlocationPatchSnapshotLocationResponse:
    description: Response from patching a SnapshotLocation.
    type: object
    properties:
      snapshotlocation:
        description: SnapshotLocation to patch.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocation'
  snapshotlocationProviderSpecificSnapshotConfig:
    description: >-
      Provider specific configuration for volume snapshot location
      (https://github.com/heptio/velero/blob/master/docs/api-types/volumesnapshotlocation.md).
    type: object
    properties:
      aws_config:
        description: AWS specific snapshot config.
        $ref: '#/definitions/snapshotlocationAWSSnapshotConfiguration'
      azure_config:
        description: Azure specific snapshot config.
        $ref: '#/definitions/snapshotlocationAzureSnapshotConfiguration'
      cust_config:
        description: The configuration for custom provider.
        $ref: '#/definitions/snapshotlocationCustomSnapshotConfiguration'
      gcp_config:
        description: GCP specific snapshot config.
        $ref: '#/definitions/snapshotlocationGCPSnapshotConfiguration'
  snapshotlocationSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      brm_name:
        description: Scope search to `brm_name`; supports globbing; default (*).
        type: string
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  snapshotlocationSnapshotLocation:
    description: The volume snapshot providers to use for a backup.
    type: object
    properties:
      full_name:
        description: Full name for the SnapshotLocation.
        $ref: '#/definitions/snapshotlocationFullName'
      object_meta:
        description: Metadata for the snapshot location object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the snapshot location.
        $ref: '#/definitions/snapshotlocationSnapshotLocationSpec'
      status:
        description: Status of the snapshot location.
        $ref: '#/definitions/snapshotlocationSnapshotLocationStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  snapshotlocationSnapshotLocationSpec:
    description: The snapshot location spec.
    type: object
    properties:
      config:
        description: Provider-specific configuration fields.
        $ref: '#/definitions/snapshotlocationProviderSpecificSnapshotConfig'
      provider:
        description: >-
          The name for whichever cloud provider will be used to actually store
          the volume, such as: aws, azure and gcp.
        type: string
      secret_name:
        description: The name of secret to be used to access the bucket.
        type: string
  snapshotlocationSnapshotLocationStatus:
    description: Status of the snapshot location resource.
    type: object
    properties:
      status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
  snapshotlocationUpdateSnapshotLocationRequest:
    description: Request to update (overwrite) a SnapshotLocation.
    type: object
    properties:
      snapshotlocation:
        description: Update SnapshotLocation.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocation'
  snapshotlocationUpdateSnapshotLocationResponse:
    description: Response from updating a SnapshotLocation.
    type: object
    properties:
      snapshotlocation:
        description: SnapshotLocation updated.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocation'
  snapshotlocationWatchSnapshotLocationsResponse:
    description: Streamed response from watching SnapshotLocations.
    type: object
    properties:
      snapshotlocation:
        description: SnapshotLocation event.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocation'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchSnapshotLocationsResponseEventType'
  ClusterMetadataCloudProvider:
    description: |-
      CloudProvider definition - indicate the cloud provider.

       - UNKNOWN: Unknown cloud provider (default).
       - NONE: No cloud provider (likely bare metal).
       - AWS_EC2: AmazonWeb Services EC2.
       - GCP_GCE: Google.
       - AZURE_COMPUTE: Azure Compute.
    type: string
    default: UNKNOWN
    enum:
      - UNKNOWN
      - NONE
      - AWS_EC2
      - GCP_GCE
      - AZURE_COMPUTE
  WatchAgentsResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  agentAgent:
    description: >-
      An Agent maintains the connection between a Kubernetes cluster and the
      platform.
    type: object
    properties:
      full_name:
        description: Full name of the agent type.
        $ref: '#/definitions/agentFullName'
      object_meta:
        description: Metadata for the agent object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the agent.
        $ref: '#/definitions/agentAgentSpec'
      status:
        description: Status for the agent.
        $ref: '#/definitions/agentAgentStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  agentAgentSpec:
    description: Spec of the agent resource.
    type: object
    properties:
      extensions:
        description: |-
          List of the extensions to be deployed on the cluster (optional).
          The canonical names of the extensions to be deployed has to provided.
        type: array
        items:
          type: string
  agentAgentStatus:
    description: Status of the agent resource.
    type: object
    properties:
      deployment_link:
        description: URL to fetch the installation YAML.
        type: string
      extensions:
        description: List of the extensions running on the cluster.
        type: array
        items:
          type: string
      metadata:
        description: Minimal metadata of the cluster.
        $ref: '#/definitions/agentClusterMetadata'
      status:
        description: Common status.
        $ref: '#/definitions/statusResourceStatus'
  agentClusterMetadata:
    description: Cluster metadata.
    type: object
    properties:
      cloud_provider:
        description: Cluster cloud provider.
        $ref: '#/definitions/ClusterMetadataCloudProvider'
      kube_server_version:
        description: Kubernetes Server Git Version.
        type: string
      last_update:
        description: Timestamp when metadata was last updated on this cluster.
        type: string
        format: date-time
      master_node_count:
        description: Total number of master nodes.
        type: string
        format: int64
      namespaces_count:
        description: Total number of namespaces.
        type: string
        format: int64
      physical_memory:
        description: Total physical memory.
        type: string
        format: int64
      pod_count:
        description: Total number of pods.
        type: string
        format: int64
      region:
        description: Cluster region.
        type: string
      vcpu_count:
        description: Total vCPU.
        type: string
        format: int64
      worker_node_count:
        description: Total number of worker nodes.
        type: string
        format: int64
  agentCreateAgentRequest:
    description: Request to create a Agent.
    type: object
    properties:
      agent:
        description: Agent to create.
        $ref: '#/definitions/agentAgent'
  agentCreateAgentResponse:
    description: Response from creating a Agent.
    type: object
    properties:
      agent:
        description: Agent created.
        $ref: '#/definitions/agentAgent'
  agentDeleteAgentResponse:
    description: Response from deleting Agent.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  agentFullName:
    description: FullName for the Agent.
    type: object
    properties:
      cluster_name:
        description: Name of the cluster.
        type: string
      location:
        description: Location of the cluster.
        type: string
      name:
        description: Name of the agent.
        type: string
      org_id:
        description: Org ID of the cluster organization.
        type: string
  agentGetAgentResponse:
    description: Response from getting a Agent.
    type: object
    properties:
      agent:
        description: Agent returned.
        $ref: '#/definitions/agentAgent'
  agentListAgentsResponse:
    description: Response from listing Agents.
    type: object
    properties:
      agents:
        description: List of agents.
        type: array
        items:
          $ref: '#/definitions/agentAgent'
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
  agentPatchAgentRequest:
    description: Request to patch a Agent.
    type: object
    properties:
      agent:
        description: Patch Agent.
        $ref: '#/definitions/agentAgent'
  agentPatchAgentResponse:
    description: Response from patching a Agent.
    type: object
    properties:
      agent:
        description: Agent to patch.
        $ref: '#/definitions/agentAgent'
  agentSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  agentUpdateAgentRequest:
    description: Request to update (overwrite) a Agent.
    type: object
    properties:
      agent:
        description: Update Agent.
        $ref: '#/definitions/agentAgent'
  agentUpdateAgentResponse:
    description: Response from updating a Agent.
    type: object
    properties:
      agent:
        description: Agent updated.
        $ref: '#/definitions/agentAgent'
  agentWatchAgentsResponse:
    description: Streamed response from watching Agents.
    type: object
    properties:
      agent:
        description: Agent event.
        $ref: '#/definitions/agentAgent'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchAgentsResponseEventType'
  WatchExtensionsResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  extensionCreateExtensionRequest:
    description: Request to create a Extension.
    type: object
    properties:
      extension:
        description: Extension to create.
        $ref: '#/definitions/extensionExtension'
  extensionCreateExtensionResponse:
    description: Response from creating a Extension.
    type: object
    properties:
      extension:
        description: Extension created.
        $ref: '#/definitions/extensionExtension'
  extensionDeleteExtensionResponse:
    description: Response from deleting Extension.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  extensionExtension:
    description: Cluster addons for the platform.
    type: object
    properties:
      full_name:
        description: Full name of the extension.
        $ref: '#/definitions/extensionFullName'
      object_meta:
        description: Metadata for the extension object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the extension.
        $ref: '#/definitions/extensionExtensionSpec'
      status:
        description: Status for the extension.
        $ref: '#/definitions/extensionExtensionStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  extensionExtensionSpec:
    description: Spec of the extension resource.
    type: object
    properties:
      description:
        description: Description of the extension.
        type: string
      name:
        description: Name of the extension.
        type: string
      objects:
        description: |-
          Structured Kubenetes objects that run as part of this extension. These
          Kubernetes objects are inlined and must be YAML/JSON compatible. Each
          must have `apiVersion`, `kind`, and `metadata`.  This is essentially
          equivalent to the Kubernetes `Unstructured` type.
        type: string
      version:
        description: |-
          Version of the extension.
          This has to follow SemVer 2 standards of the form major.minor.patch
          version.
        type: string
  extensionExtensionStatus:
    description: Status of the extension resource.
    type: object
    properties:
      health:
        description: Health of the deployed extension.
        $ref: '#/definitions/extensionExtensionStatusHealth'
      previous_version:
        description: Previous version of the extension.
        type: string
      state:
        description: State of the extension.
        $ref: '#/definitions/extensionExtensionStatusState'
      status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
      version:
        type: string
        title: |-
          Version of the extension.
          TODO move to the common version type once it is defined
  extensionExtensionStatusHealth:
    description: |-
      Health status of the deployed extension.

       - UNKNOWN: Unknown.
       - HEALTHY: Healthy.
       - UNHEALTHY: Unhealthy.
    type: string
    default: UNKNOWN
    enum:
      - UNKNOWN
      - HEALTHY
      - UNHEALTHY
  extensionExtensionStatusState:
    description: |-
      Extension lifecycle state.

       - UNSPECIFIED: Unspecified state.
       - ROLLING_BACK: Rolling back state.
       - ROLLED_BACK: Rolled back state.
       - PROCESSING: Processing state.
       - PROCESSED: Processed state.
       - FAILED: Failed state.
    type: string
    default: UNSPECIFIED
    enum:
      - UNSPECIFIED
      - ROLLING_BACK
      - ROLLED_BACK
      - PROCESSING
      - PROCESSED
      - FAILED
  extensionFullName:
    description: FullName for the Extension.
    type: object
    properties:
      agent_name:
        description: Name of the agent.
        type: string
      cluster_name:
        description: Name of the cluster.
        type: string
      location:
        description: Location of the cluster.
        type: string
      name:
        description: Name of the extension.
        type: string
      org_id:
        description: Org ID of the cluster organization.
        type: string
  extensionGetExtensionResponse:
    description: Response from getting a Extension.
    type: object
    properties:
      extension:
        description: Extension returned.
        $ref: '#/definitions/extensionExtension'
  extensionListExtensionsResponse:
    description: Response from listing Extensions.
    type: object
    properties:
      extensions:
        description: List of extensions.
        type: array
        items:
          $ref: '#/definitions/extensionExtension'
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
  extensionPatchExtensionRequest:
    description: Request to patch a Extension.
    type: object
    properties:
      extension:
        description: Patch Extension.
        $ref: '#/definitions/extensionExtension'
  extensionPatchExtensionResponse:
    description: Response from patching a Extension.
    type: object
    properties:
      extension:
        description: Extension to patch.
        $ref: '#/definitions/extensionExtension'
  extensionSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      agent_name:
        description: Scope search to `agent_name`; supports globbing; default (*).
        type: string
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  extensionUpdateExtensionRequest:
    description: Request to update (overwrite) a Extension.
    type: object
    properties:
      extension:
        description: Update Extension.
        $ref: '#/definitions/extensionExtension'
  extensionUpdateExtensionResponse:
    description: Response from updating a Extension.
    type: object
    properties:
      extension:
        description: Extension updated.
        $ref: '#/definitions/extensionExtension'
  extensionWatchExtensionsResponse:
    description: Streamed response from watching Extensions.
    type: object
    properties:
      extension:
        description: Extension event.
        $ref: '#/definitions/extensionExtension'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchExtensionsResponseEventType'
  statusResourceHealthHealth:
    type: string
    enum:
      - UNKNOWN
      - HEALTHY
      - WARNING
      - UNHEALTHY
    default: UNKNOWN
    description: |-
      Health describes the health of a resource.

       - UNKNOWN: Unknown health.
       - HEALTHY: Resource is healthy.
       - WARNING: Resource is in warning state.
       - UNHEALTHY: Resource is unhealthy.
  statusResourceStateState:
    description: |-
      State describes the state of a resource.

       - UNKNOWN: Unknown state.
       - PENDING: Resource is pending processing.
       - PROCESSING: Processing the resource.
       - CREATING: Resource is being created.
       - COMPLETE: Processing complete.
       - READY: Resource is ready state.
       - DELETING: Resource is being deleted.
       - ERROR: Error in processing.
    type: string
    default: UNKNOWN
    enum:
      - UNKNOWN
      - PENDING
      - PROCESSING
      - CREATING
      - COMPLETE
      - READY
      - DELETING
      - ERROR
  WatchBrmsResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  brmBrm:
    description: Backup/restore/migrate cluster data.
    type: object
    properties:
      full_name:
        description: Full name for the BRM.
        $ref: '#/definitions/brmFullName'
      object_meta:
        description: Metadata for the BRM object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec field for BRM.
        $ref: '#/definitions/brmBrmSpec'
      status:
        description: Status field.
        $ref: '#/definitions/brmBrmStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  brmBrmSpec:
    description: >-
      The spec collects all the options for installing backup and restore
      solution into a Kubernetes cluster.
    type: object
    properties:
      use_restic:
        description: >-
          A flag to indicate whether to use restic server
          (https://github.com/restic/restic).
        type: boolean
        format: boolean
  brmBrmStatus:
    description: Status of the BRM configure resource.
    type: object
    properties:
      namespace:
        description: The namespace is used to install backup solution.
        type: string
      status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
      version:
        description: The version information of backup solution.
        type: string
  brmCreateBrmRequest:
    description: Request to create a Brm.
    type: object
    properties:
      brm:
        description: Brm to create.
        $ref: '#/definitions/brmBrm'
  brmCreateBrmResponse:
    description: Response from creating a Brm.
    type: object
    properties:
      brm:
        description: Brm created.
        $ref: '#/definitions/brmBrm'
  brmDeleteBrmResponse:
    description: Response from deleting Brm.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  brmFullName:
    description: |-
      Full name of the namespace. This includes the object name along
      with any parents or further identifiers.
    type: object
    properties:
      cluster_name:
        description: Name of parent Cluster.
        type: string
      location:
        description: Location of parent Cluster.
        type: string
      name:
        description: Name of this BRM.
        type: string
      org_id:
        description: ID of Organization.
        type: string
  brmGetBrmResponse:
    description: Response from getting a Brm.
    type: object
    properties:
      brm:
        description: Brm returned.
        $ref: '#/definitions/brmBrm'
  brmListBrmsResponse:
    description: Response from listing Brms.
    type: object
    properties:
      brms:
        description: List of brms.
        type: array
        items:
          $ref: '#/definitions/brmBrm'
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
  brmPatchBrmRequest:
    description: Request to patch a Brm.
    type: object
    properties:
      brm:
        description: Patch Brm.
        $ref: '#/definitions/brmBrm'
  brmPatchBrmResponse:
    description: Response from patching a Brm.
    type: object
    properties:
      brm:
        description: Brm to patch.
        $ref: '#/definitions/brmBrm'
  brmSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  brmUpdateBrmRequest:
    description: Request to update (overwrite) a Brm.
    type: object
    properties:
      brm:
        description: Update Brm.
        $ref: '#/definitions/brmBrm'
  brmUpdateBrmResponse:
    description: Response from updating a Brm.
    type: object
    properties:
      brm:
        description: Brm updated.
        $ref: '#/definitions/brmBrm'
  brmWatchBrmsResponse:
    description: Streamed response from watching Brms.
    type: object
    properties:
      brm:
        description: Brm event.
        $ref: '#/definitions/brmBrm'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchBrmsResponseEventType'
  BackupStatusBackupPhase:
    description: |-
      The phase for the current backup.

       - NEW: The phase when backup has been created but not yet processed.
       - FAILEDVALIDATION: The phase when backup has failed the controller's validations and therefore will not run.
       - INPROGRESS: The phase when backup is currently executing.
       - COMPLETED: The phase when backup has run successfully without errors.
       - FAILED: The phase when backup ran but encountered an error that prevented it from completing successfully.
       - DELETING: The phase when backup and all its associated data are being deleted.
    type: string
    default: NEW
    enum:
      - NEW
      - FAILEDVALIDATION
      - INPROGRESS
      - COMPLETED
      - FAILED
      - DELETING
  ExecHookHookErrorMode:
    description: >-
      The predefined behavior when backend backup solution encounters an error
      executing this hook.

       - CONTINUE: An error from a hook is acceptable, and the backup can proceed.
       - FAIL: An error from a hook is problematic, and the backup should be in error.
    type: string
    default: CONTINUE
    enum:
      - CONTINUE
      - FAIL
  WatchBackupsResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  backupBackup:
    description: >-
      The Kubernetes cluster state related to backup (API objects and associated
      volume state).
    type: object
    properties:
      full_name:
        description: Full name for the Backup Config.
        $ref: '#/definitions/backupFullName'
      object_meta:
        description: Metadata for the backup object.
        $ref: '#/definitions/commonmetaObjectMeta'
      spec:
        description: Spec for the backup.
        $ref: '#/definitions/backupBackupSpec'
      status:
        description: Status of the backup.
        $ref: '#/definitions/backupBackupStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/commonmetaTypeMeta'
  backupBackupHooks:
    description: >-
      The structure contains custom behaviors that should be executed at
      different phases of the backup.
    type: object
    properties:
      resources:
        description: >-
          Hooks that should be executed when backing up individual instances of
          a resource.
        type: array
        items:
          $ref: '#/definitions/backupBackupResourceHookSpec'
  backupBackupResourceHook:
    description: A hook defined for a resource backup.
    type: object
    properties:
      exec:
        description: An execution hook.
        $ref: '#/definitions/backupExecHook'
  backupBackupResourceHookSpec:
    description: >-
      The structure defines one or more BackupResourceHooks that should be
      executed based on

      the rules defined for namespaces, resources, and label selector.
    type: object
    properties:
      excluded_namespaces:
        description: The namespaces to be excluded in the applying this hook.
        type: array
        items:
          type: string
      excluded_resources:
        description: The name list for the resources to be excluded in appling this hook.
        type: array
        items:
          type: string
      included_namespaces:
        description: >-
          The namespace to be included for applying this hook. If empty, all
          namespaces are included.
        type: array
        items:
          type: string
      included_resources:
        description: >-
          The name list for the resources to be included for applying this hook.
          If empty, all resources are included.
        type: array
        items:
          type: string
      label_selector:
        description: >-
          The label selector to selectively adding adding individual objects to
          apply this hook. If empty, all

          objects are included. Optional.
        $ref: '#/definitions/v1LabelSelector'
      name:
        description: The name of the hook.
        type: string
      post_hooks:
        description: >-
          A list of BackupResourceHooks to execute after storing the item in the
          backup.

          These are executed after all "additional items" from item actions are
          processed.
        type: array
        items:
          $ref: '#/definitions/backupBackupResourceHook'
      pre_hooks:
        description: >-
          A list of BackupResourceHooks to execute prior to storing the item in
          the backup.

          These are executed before any "additional items" from item actions are
          processed.
        type: array
        items:
          $ref: '#/definitions/backupBackupResourceHook'
  backupBackupSpec:
    description: The backup spec.
    type: object
    properties:
      excluded_namespaces:
        description: The namespaces to be excluded in the backup.
        type: array
        items:
          type: string
      excluded_resources:
        description: The name list for the resources to be excluded in backup.
        type: array
        items:
          type: string
      hooks:
        description: Hooks to be executed at different phases of the backup.
        $ref: '#/definitions/backupBackupHooks'
      include_cluster_resources:
        description: >-
          A flag specifies whether cluster-scoped resources should be included
          for consideration in the backup.
        type: boolean
        format: boolean
      included_namespaces:
        description: >-
          The namespace to be included for backup from. If empty, all namespaces
          are included.
        type: array
        items:
          type: string
      included_resources:
        description: >-
          The name list for the resources to be included into backup. If empty,
          all resources are included.
        type: array
        items:
          type: string
      label_selector:
        description: >-
          The label selector to selectively adding individual objects to the
          backup. If empty

          or nil, all objects are included. Optional.
        $ref: '#/definitions/v1LabelSelector'
      snapshot_volumes:
        description: >-
          A flag specifies whether to take cloud snapshots of any PV's
          referenced in the set of objects

          included in the Backup.
        type: boolean
        format: boolean
      storage_location:
        description: The name of a BackupStorageLocation where the backup should be stored.
        type: string
      ttl:
        description: The backup retention period.
        type: string
      volume_snapshot_locations:
        description: >-
          A list containing names of VolumeSnapshotLocations associated with
          this backup.
        type: array
        items:
          type: string
  backupBackupStatus:
    description: Status of the backup resource.
    type: object
    properties:
      completion_timestamp:
        description: The timestamp when a backup was completed.
        type: string
        format: date-time
      expiration:
        description: The expiration setting to enable this Backup to be garbage-collected.
        type: string
      phase:
        description: The current state of the Backup.
        $ref: '#/definitions/BackupStatusBackupPhase'
      start_timestamp:
        description: The timestamp when a backup was started.
        type: string
        format: date-time
      status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
      validation_errors:
        description: A list of all validation errors (if applicable).
        type: array
        items:
          type: string
      version:
        description: The backup format version.
        type: integer
        format: int32
      volume_backups:
        description: >-
          A map of PersistentVolume names to information about the backed-up
          volume in the cloud provider API.
        type: array
        items:
          $ref: '#/definitions/backupVolumeBackupInfo'
      volume_snapshots_attempted:
        description: The total number of attempted volume snapshots for this backup.
        type: integer
        format: int32
      volume_snapshots_completed:
        description: >-
          The total number of successfully completed volume snapshots for this
          backup.
        type: integer
        format: int32
  backupCreateBackupRequest:
    description: Request to create a Backup.
    type: object
    properties:
      backup:
        description: Backup to create.
        $ref: '#/definitions/backupBackup'
  backupCreateBackupResponse:
    description: Response from creating a Backup.
    type: object
    properties:
      backup:
        description: Backup created.
        $ref: '#/definitions/backupBackup'
  backupDeleteBackupResponse:
    description: Response from deleting Backup.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  backupExecHook:
    description: >-
      A hook that uses the pod exec API to execute a command in a container in a
      pod.
    type: object
    properties:
      command:
        description: The command and arguments to execute.
        type: array
        items:
          type: string
      container:
        description: >-
          The container in the pod where the command should be executed. If not
          specified,

          the pod's first container is used.
        type: string
      on_error:
        description: >-
          The predefined behavior when backend backup solution encounters an
          error executing this hook.
        $ref: '#/definitions/ExecHookHookErrorMode'
      timeout:
        description: >-
          The maximum amount of time backend backup solution should wait for the
          hook to complete.
        type: string
  backupFullName:
    description: |-
      Full name of the namespace. This includes the object name along
      with any parents or further identifiers.
    type: object
    properties:
      brm_name:
        description: Name of backup restore and migration tool.
        type: string
      cluster_name:
        description: Name of parent Cluster.
        type: string
      location:
        description: Location of parent Cluster.
        type: string
      name:
        description: Name of this Backup.
        type: string
      org_id:
        description: ID of Organization.
        type: string
  backupGetBackupResponse:
    description: Response from getting a Backup.
    type: object
    properties:
      backup:
        description: Backup returned.
        $ref: '#/definitions/backupBackup'
  backupListBackupsResponse:
    description: Response from listing Backups.
    type: object
    properties:
      backups:
        description: List of backups.
        type: array
        items:
          $ref: '#/definitions/backupBackup'
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
  backupPatchBackupRequest:
    description: Request to patch a Backup.
    type: object
    properties:
      backup:
        description: Patch Backup.
        $ref: '#/definitions/backupBackup'
  backupPatchBackupResponse:
    description: Response from patching a Backup.
    type: object
    properties:
      backup:
        description: Backup to patch.
        $ref: '#/definitions/backupBackup'
  backupSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      brm_name:
        description: Scope search to `brm_name`; supports globbing; default (*).
        type: string
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  backupUpdateBackupRequest:
    description: Request to update (overwrite) a Backup.
    type: object
    properties:
      backup:
        description: Update Backup.
        $ref: '#/definitions/backupBackup'
  backupUpdateBackupResponse:
    description: Response from updating a Backup.
    type: object
    properties:
      backup:
        description: Backup updated.
        $ref: '#/definitions/backupBackup'
  backupVolumeBackupInfo:
    description: >-
      The information about a PersistentVolume at backup time to be able to
      restore it later.
    type: object
    properties:
      availability_zone:
        description: >-
          The availability zone value in the cloud provider where the volume is
          provisioned.
        type: string
      iops:
        description: The provisioned IOPS for the disk/volume in the cloud provider API.
        type: string
        format: int64
      snapshot_id:
        description: The ID of the snapshot taken in the cloud provider API of this volume.
        type: string
      type:
        description: The type of the disk/volume in the cloud provider API.
        type: string
  backupWatchBackupsResponse:
    description: Streamed response from watching Backups.
    type: object
    properties:
      backup:
        description: Backup event.
        $ref: '#/definitions/backupBackup'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchBackupsResponseEventType'
  commonmetaObjectMeta:
    type: object
    properties:
      group:
        type: string
        description: >-
          Group this resource belongs to, if none is given the group is
          `default`.
      labels:
        type: object
        additionalProperties:
          type: string
        description: Arbitrary labels attached to the object.
      uid:
        type: string
        description: UID for the object.
      resource_version:
        type: string
        description: 'Version of the resource, increments on changes.'
      creation_time:
        type: string
        format: date-time
        description: Creation time of the object.
      update_time:
        type: string
        format: date-time
        description: Update time of the object.
      description:
        type: string
        description: Description of the resource.
      annotations:
        type: object
        additionalProperties:
          type: string
        description: >-
          Annotations for the object. Annotations hold system level imformation
          provisioned by controllers.
    description: Holds general shared object metadatas.
  commonmetaTypeMeta:
    type: object
    properties:
      kind:
        type: string
        description: Kind of the type.
      version:
        type: string
        description: Version of the type.
      package:
        type: string
        description: Package of the type.
    description: Holds general type metadatas.
  v1LabelSelector:
    type: object
    properties:
      matchLabels:
        type: object
        additionalProperties:
          type: string
        title: >-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the
          matchLabels

          map is equivalent to an element of matchExpressions, whose key field
          is "key", the

          operator is "In", and the values array contains only "value". The
          requirements are ANDed.

          +optional
      matchExpressions:
        type: array
        items:
          $ref: '#/definitions/v1LabelSelectorRequirement'
        title: >-
          matchExpressions is a list of label selector requirements. The
          requirements are ANDed.

          +optional
    description: >-
      A label selector is a label query over a set of resources. The result of
      matchLabels and

      matchExpressions are ANDed. An empty label selector matches all objects. A
      null

      label selector matches no objects.
  v1LabelSelectorRequirement:
    type: object
    properties:
      key:
        type: string
        title: |-
          key is the label key that the selector applies to.
          +patchMergeKey=key
          +patchStrategy=merge
      operator:
        type: string
        description: |-
          operator represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.
      values:
        type: array
        items:
          type: string
        title: >-
          values is an array of string values. If the operator is In or NotIn,

          the values array must be non-empty. If the operator is Exists or
          DoesNotExist,

          the values array must be empty. This array is replaced during a
          strategic

          merge patch.

          +optional
    description: >-
      A label selector requirement is a selector that contains values, a key,
      and an operator that

      relates the key and values.
  BackupLocationStatusBackupStorageLocationAccessMode:
    description: |-
      The permissions for a BackupStorageLocation.

       - READONLY: The read only access.
       - READWRITE: Read and write access.
    type: string
    default: READONLY
    enum:
      - READONLY
      - READWRITE
  BackupLocationStatusBackupStorageLocationPhase:
    description: |-
      The lifecycle phases of backup storage location.

       - AVAILABLE: The location is available to read and write from.
       - UNAVAILABLE: The location is unavailable for read and write from.
    type: string
    default: AVAILABLE
    enum:
      - AVAILABLE
      - UNAVAILABLE
  clusterbrmbackuplocationBackupLocation:
    description: A backup location assigned to a cluster.
    type: object
    properties:
      full_name:
        description: Full name for the BackupLocation.
        $ref: '#/definitions/clusterbrmbackuplocationFullName'
      object_meta:
        description: Metadata for the backup location object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the backup location.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocationSpec'
      status:
        description: Status of the backup location.
        $ref: '#/definitions/clusterbrmbackuplocationBackupLocationStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  clusterbrmbackuplocationBackupLocationSpec:
    description: The backup location spec.
    type: object
    properties:
      bucket:
        description: The bucket to use for object storage.
        type: string
      config:
        description: Provider-specific configuration fields.
        $ref: '#/definitions/backuplocationProviderSpecificStorageConfig'
      provider:
        description: >-
          The provider of the backup storage in the format as: aws:accountID,
          azure:accountID, etc.
        type: string
      region:
        description: The region of the bucket origin. Optional.
        type: string
      secret_name:
        description: The name of secret to be used to access the bucket.
        type: string
  clusterbrmbackuplocationBackupLocationStatus:
    description: Status of the backup location resource.
    type: object
    properties:
      access_mode:
        description: Permission for the backup location.
        $ref: '#/definitions/BackupLocationStatusBackupStorageLocationAccessMode'
      last_sync_revision:
        description: >-
          The SHA value inside the file `<bucket>/metadata/revision`. Updating
          the SHA in that file will force

          a sync to happen sooner.
        type: string
      last_sync_timestamp:
        description: The timestamp when last sync happened.
        type: string
        format: date-time
      phase:
        description: The current state of the backup location.
        $ref: '#/definitions/BackupLocationStatusBackupStorageLocationPhase'
      status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
  clusterbrmbackuplocationFullName:
    description: |-
      Full name of the namespace. This includes the object name along
      with any parents or further identifiers.
    type: object
    properties:
      brm_name:
        description: Name of backup restore and migration tool.
        type: string
      cluster_name:
        description: Name of parent Cluster.
        type: string
      location:
        description: Location of parent Cluster.
        type: string
      name:
        description: Name of this Backup Location.
        type: string
      org_id:
        description: ID of Organization.
        type: string
  RestoreStatusRestorePhase:
    description: |-
      The lifecycle phases of restore.

       - NEW: The restore has been created but not yet processed.
       - FAILEDVALIDATION: The restore has failed the controller's validations and therefore will not run.
       - INPROGRESS: The restore is currently executing.
       - COMPLETED: The restore has finished executing. Any relevant warnings or errors will be captured in the Status.
       - FAILED: The restore was unable to execute. The failing error is recorded in status.FailureReason.
    type: string
    default: NEW
    enum:
      - NEW
      - FAILEDVALIDATION
      - INPROGRESS
      - COMPLETED
      - FAILED
  WatchRestoresResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  restoreCreateRestoreRequest:
    description: Request to create a Restore.
    type: object
    properties:
      restore:
        description: Restore to create.
        $ref: '#/definitions/restoreRestore'
  restoreCreateRestoreResponse:
    description: Response from creating a Restore.
    type: object
    properties:
      restore:
        description: Restore created.
        $ref: '#/definitions/restoreRestore'
  restoreDeleteRestoreResponse:
    description: Response from deleting Restore.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  restoreFullName:
    description: |-
      Full name of the namespace. This includes the object name along
      with any parents or further identifiers.
    type: object
    properties:
      brm_name:
        description: Name of backup restore and migration tool.
        type: string
      cluster_name:
        description: Name of parent Cluster.
        type: string
      location:
        description: Location of parent Cluster.
        type: string
      name:
        description: Name of this Restore.
        type: string
      org_id:
        description: ID of Organization.
        type: string
  restoreGetRestoreResponse:
    description: Response from getting a Restore.
    type: object
    properties:
      restore:
        description: Restore returned.
        $ref: '#/definitions/restoreRestore'
  restoreListRestoresResponse:
    description: Response from listing Restores.
    type: object
    properties:
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
      restores:
        description: List of restores.
        type: array
        items:
          $ref: '#/definitions/restoreRestore'
  restorePatchRestoreRequest:
    description: Request to patch a Restore.
    type: object
    properties:
      restore:
        description: Patch Restore.
        $ref: '#/definitions/restoreRestore'
  restorePatchRestoreResponse:
    description: Response from patching a Restore.
    type: object
    properties:
      restore:
        description: Restore to patch.
        $ref: '#/definitions/restoreRestore'
  restoreRestore:
    description: The application of resources from a backup to a target Kubernetes cluster.
    type: object
    properties:
      full_name:
        description: Full name for the Config.
        $ref: '#/definitions/restoreFullName'
      object_meta:
        description: Metadata for the restore object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the restore.
        $ref: '#/definitions/restoreRestoreSpec'
      status:
        description: Status of the restore.
        $ref: '#/definitions/restoreRestoreStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  restoreRestoreSpec:
    description: The restore spec.
    type: object
    properties:
      backup_name:
        description: The name of the backup to restore from.
        type: string
      excluded_namespaces:
        description: The list of namespace names to be excluded from restore.
        type: array
        items:
          type: string
      excluded_resources:
        description: The list of resource names to be excluded from restore.
        type: array
        items:
          type: string
      include_cluster_resources:
        description: >-
          A flag specifies whether cluster-scoped resources should be included
          for consideration in the restore.

          Default to true.
        type: boolean
        format: boolean
      included_namespaces:
        description: >-
          The list of namespace names to be included for restore. If empty, all
          namespaces are included.
        type: array
        items:
          type: string
      included_resources:
        description: >-
          The list of resource names to be included in the restore. If empty,
          all resources in the backup are included.
        type: array
        items:
          type: string
      label_selector:
        description: >-
          A label selector used to selectively restore individual objects from
          the backup. If empty

          or nil, all objects are included. Optional.
        type: string
      namespace_mapping:
        description: >-
          A map of source namespace names to target namespace names to restore
          into. Any source namespaces not

          included in the map will be restored into namespaces of the same name.
        type: object
        additionalProperties:
          type: string
      restore_pvs:
        description: >-
          A flag specifies whether to restore all included PVs from snapshot
          (via the cloudprovider).
        type: boolean
        format: boolean
      schedule_name:
        description: >-
          The name of the schedule to restore from. If specified, and BackupName
          is empty, the most recent successful

          backup created from this schedule will be restored.
        type: string
  restoreRestoreStatus:
    description: Status of the restore resource.
    type: object
    properties:
      errors:
        description: >-
          The count of all error messages that were generated during execution
          of the restore.

          The actual errors are stored in object storage.
        type: integer
        format: int32
      failure_reason:
        description: An error that caused the entire restore to fail.
        type: string
      phase:
        description: The current state of the Restore.
        $ref: '#/definitions/RestoreStatusRestorePhase'
      status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
      validation_errors:
        description: The list all validation errors (if applicable).
        type: array
        items:
          type: string
      warnings:
        description: >-
          The count of all warning messages that were generated during execution
          of the restore.

          The actual warnings are stored in object storage.
        type: integer
        format: int32
  restoreSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      brm_name:
        description: Scope search to `brm_name`; supports globbing; default (*).
        type: string
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  restoreUpdateRestoreRequest:
    description: Request to update (overwrite) a Restore.
    type: object
    properties:
      restore:
        description: Update Restore.
        $ref: '#/definitions/restoreRestore'
  restoreUpdateRestoreResponse:
    description: Response from updating a Restore.
    type: object
    properties:
      restore:
        description: Restore updated.
        $ref: '#/definitions/restoreRestore'
  restoreWatchRestoresResponse:
    description: Streamed response from watching Restores.
    type: object
    properties:
      restore:
        description: Restore event.
        $ref: '#/definitions/restoreRestore'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchRestoresResponseEventType'
  ScheduleStatusSchedulePhase:
    description: |-
      The lifecycle phase of a schedule backup.

       - NEW: The schedule has been created but not yet processed.
       - ENABLED: The schedule has been validated and will now be triggering backups according to the schedule spec.
       - FAILEDVALIDATION: The schedule has failed the controller's validations and therefore will not trigger backups.
    type: string
    default: NEW
    enum:
      - NEW
      - ENABLED
      - FAILEDVALIDATION
  WatchSchedulesResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  brmscheduleFullName:
    description: |-
      Full name of the namespace. This includes the object name along
      with any parents or further identifiers.
    type: object
    properties:
      brm_name:
        description: Name of backup restore and migration tool.
        type: string
      cluster_name:
        description: Name of parent Cluster.
        type: string
      location:
        description: Location of parent Cluster.
        type: string
      name:
        description: Name of this Schedule.
        type: string
      org_id:
        description: ID of Organization.
        type: string
  scheduleCreateScheduleRequest:
    description: Request to create a Schedule.
    type: object
    properties:
      schedule:
        description: Schedule to create.
        $ref: '#/definitions/scheduleSchedule'
  scheduleCreateScheduleResponse:
    description: Response from creating a Schedule.
    type: object
    properties:
      schedule:
        description: Schedule created.
        $ref: '#/definitions/scheduleSchedule'
  scheduleDeleteScheduleResponse:
    description: Response from deleting Schedule.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  scheduleGetScheduleResponse:
    description: Response from getting a Schedule.
    type: object
    properties:
      schedule:
        description: Schedule returned.
        $ref: '#/definitions/scheduleSchedule'
  scheduleListSchedulesResponse:
    description: Response from listing Schedules.
    type: object
    properties:
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
      schedules:
        description: List of schedules.
        type: array
        items:
          $ref: '#/definitions/scheduleSchedule'
  schedulePatchScheduleRequest:
    description: Request to patch a Schedule.
    type: object
    properties:
      schedule:
        description: Patch Schedule.
        $ref: '#/definitions/scheduleSchedule'
  schedulePatchScheduleResponse:
    description: Response from patching a Schedule.
    type: object
    properties:
      schedule:
        description: Schedule to patch.
        $ref: '#/definitions/scheduleSchedule'
  scheduleSchedule:
    description: A pre-scheduled or periodic Backup that should be run.
    type: object
    properties:
      full_name:
        description: Full name for the Schedule.
        $ref: '#/definitions/brmscheduleFullName'
      object_meta:
        description: Metadata for the restore object.
        $ref: '#/definitions/commonmetaObjectMeta'
      spec:
        description: Spec for the restore.
        $ref: '#/definitions/scheduleScheduleSpec'
      status:
        description: Status of the schedule.
        $ref: '#/definitions/scheduleScheduleStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/commonmetaTypeMeta'
  scheduleScheduleSpec:
    description: The schedule spec.
    type: object
    properties:
      schedule:
        description: A Cron expression defining when to run the Backup.
        type: string
      template:
        description: The definition of the Backup to be run on the provided schedule.
        $ref: '#/definitions/backupBackupSpec'
  scheduleScheduleStatus:
    description: Status of the schedule resource.
    type: object
    properties:
      last_backup:
        description: The last time a Backup was run for this schedule.
        type: string
        format: date-time
      phase:
        description: The current phase of the Schedule.
        $ref: '#/definitions/ScheduleStatusSchedulePhase'
      status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
      validation_errors:
        description: The list of all validation errors (if applicable).
        type: array
        items:
          type: string
  scheduleSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      brm_name:
        description: Scope search to `brm_name`; supports globbing; default (*).
        type: string
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  scheduleUpdateScheduleRequest:
    description: Request to update (overwrite) a Schedule.
    type: object
    properties:
      schedule:
        description: Update Schedule.
        $ref: '#/definitions/scheduleSchedule'
  scheduleUpdateScheduleResponse:
    description: Response from updating a Schedule.
    type: object
    properties:
      schedule:
        description: Schedule updated.
        $ref: '#/definitions/scheduleSchedule'
  scheduleWatchSchedulesResponse:
    description: Streamed response from watching Schedules.
    type: object
    properties:
      schedule:
        description: Schedule event.
        $ref: '#/definitions/scheduleSchedule'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchSchedulesResponseEventType'
  SnapshotLocationStatusVolumeSnapshotLocationPhase:
    description: |-
      The lifecycle phases of snapshot location.

       - AVAILABLE: The location is available to read and write from.
       - UNAVAILABLE: The location is unavailable for read and write from.
    type: string
    default: AVAILABLE
    enum:
      - AVAILABLE
      - UNAVAILABLE
  clusterbrmsnapshotlocationFullName:
    description: |-
      Full name of the namespace. This includes the object name along
      with any parents or further identifiers.
    type: object
    properties:
      brm_name:
        description: Name of backup restore and migration tool.
        type: string
      cluster_name:
        description: Name of parent Cluster.
        type: string
      location:
        description: Location of parent Cluster.
        type: string
      name:
        description: Name of this Snapshot location.
        type: string
      org_id:
        description: ID of Organization.
        type: string
  clusterbrmsnapshotlocationSnapshotLocation:
    description: The snapshot location assigned to a cluster.
    type: object
    properties:
      full_name:
        description: Full name for the SnapshotLocation.
        $ref: '#/definitions/clusterbrmsnapshotlocationFullName'
      object_meta:
        description: Metadata for the snapshot location object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the snapshot location.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocationSpec'
      status:
        description: Status of the snapshot location.
        $ref: '#/definitions/clusterbrmsnapshotlocationSnapshotLocationStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  clusterbrmsnapshotlocationSnapshotLocationSpec:
    description: The snapshot location spec.
    type: object
    properties:
      config:
        description: Provider-specific configuration fields.
        $ref: '#/definitions/snapshotlocationProviderSpecificSnapshotConfig'
      provider:
        description: The provider of the snapshot location.
        type: string
      secret_name:
        description: The name of secret to be used to access the bucket.
        type: string
  clusterbrmsnapshotlocationSnapshotLocationStatus:
    description: Status of the snapshot location resource.
    type: object
    properties:
      phase:
        description: The current state of the snapshot location.
        $ref: '#/definitions/SnapshotLocationStatusVolumeSnapshotLocationPhase'
      status:
        description: Common statuses.
        $ref: '#/definitions/statusResourceStatus'
  clusterhealthHealth:
    type: object
    properties:
      type_meta:
        $ref: '#/definitions/metaTypeMeta'
        description: Metadata describing the type of the resource.
      full_name:
        $ref: '#/definitions/healthFullName'
        description: Full name of the cluster health.
      object_meta:
        $ref: '#/definitions/metaObjectMeta'
        description: Metadata for the cluster object.
      spec:
        $ref: '#/definitions/healthHealthSpec'
        description: Status for the cluster health.
      status:
        $ref: '#/definitions/healthHealthStatus'
        description: Status for the cluster health.
    description: A cluster's health data.
  healthComponentGroupHealth:
    type: object
    properties:
      status:
        $ref: '#/definitions/statusResourceStatus'
        description: Overall Health status of the component.
      message:
        type: string
        description: Message providing details.
      components_health:
        type: array
        items:
          $ref: '#/definitions/healthComponentHealth'
        description: Health status of the components.
    title: |-
      Number of ComponentHealth objects and
      provides a summary health status for this category of data.
      e.g. multiple etcd instances
  healthComponentHealth:
    type: object
    properties:
      instance:
        type: string
        description: Instance name of a component.
      timestamp:
        type: string
        format: date-time
        description: Timestamp of the record.
      health_status:
        $ref: '#/definitions/statusResourceStatus'
        description: Health status of a component.
      message:
        type: string
        description: Message providing details.
    description: Health data for a component.
  healthFullName:
    type: object
    properties:
      org_id:
        type: string
        description: Org ID of the cluster organization.
      location:
        type: string
        description: Location of the cluster.
      cluster_name:
        type: string
        description: Name of the cluster.
      name:
        type: string
        description: Name of the cluster health.
    description: Scope for the Health.
  healthGetHealthResponse:
    type: object
    properties:
      health:
        $ref: '#/definitions/clusterhealthHealth'
        description: Health returned.
    description: Response from getting a Health.
  healthHealthSpec:
    type: object
    description: Health Spec.
  healthHealthStatus:
    type: object
    properties:
      timestamp:
        type: string
        format: date-time
        description: Timestamp of the record.
      status:
        $ref: '#/definitions/statusResourceStatus'
        description: Health status of the cluster.
      message:
        type: string
        description: Message providing details.
      allocated_memory:
        $ref: '#/definitions/healthResourceAllocation'
        description: Memopry allocation of a cluster.
      allocated_cpu:
        $ref: '#/definitions/healthResourceAllocation'
        description: CPU allocation of a cluster.
      number_of_nodes:
        type: integer
        format: int32
        description: Number of nodes in cluster.
      nodes_health:
        type: array
        items:
          $ref: '#/definitions/healthNodeHealth'
        description: List of nodes and their health status in the cluster.
      etcd_health:
        $ref: '#/definitions/healthComponentGroupHealth'
        description: List of ETCD components' health status.
      scheduler_health:
        $ref: '#/definitions/healthComponentHealth'
        description: Scheduler's health status.
      controller_manager_health:
        $ref: '#/definitions/healthComponentHealth'
        description: Controller manager's health status.
    description: >-
      Health Provides information about cluster metadata, overall cluster health
      status,

      individial component healths, resource allocations and number of pods per
      component.
  healthListHealthsResponse:
    type: object
    properties:
      healths:
        type: array
        items:
          $ref: '#/definitions/clusterhealthHealth'
        description: List of healths.
      next_page_token:
        type: string
        description: Token to retrieve next page of records.
    description: Response from listing Healths.
  healthNodeHealth:
    type: object
    properties:
      node_state:
        $ref: '#/definitions/healthComponentHealth'
        description: Status of Node.
      role:
        $ref: '#/definitions/healthNodeRole'
        description: Role of Node.
      utilization:
        $ref: '#/definitions/healthResourceMetrics'
        description: Resource utilization of a component.
      message:
        type: string
        description: Message contains the raw data of the node.
    description: Detailed health data for a node of cluster.
  healthNodeRole:
    type: string
    enum:
      - ROLE_UNDEFINED
      - ROLE_MASTER
      - ROLE_WORKER
    default: ROLE_UNDEFINED
    description: |-
      Roles of cluster nodes.

       - ROLE_UNDEFINED: Role undefined.
       - ROLE_MASTER: Role master.
       - ROLE_WORKER: Role worker.
  healthResourceAllocation:
    type: object
    properties:
      allocatable:
        type: number
        format: float
        description: Allocatable is quantity of resource that can be allocated.
      requested:
        type: number
        format: float
        description: Requested is requested quantity of the resource.
      units:
        type: string
        description: >-
          Units is the unit on which resource can be measured e.g. mb,
          millicores etc.
    description: ResourceAllocation is used for CPU and Memory metrics of a cluster.
  healthResourceMetrics:
    type: object
    properties:
      cpu_capacity:
        type: integer
        format: int32
        description: CPU capacity of a component.
      cpu_allocatable:
        type: integer
        format: int32
        description: CPU allocatable for a component.
      cpu_usage:
        type: integer
        format: int32
        description: CPU usage of a component.
      cpu_limits:
        type: integer
        format: int32
        description: CPU limit of a component.
      mem_capacity:
        type: number
        format: float
        description: Memory capacity of a component.
      mem_allocatable:
        type: number
        format: float
        description: Memory allocatable for a component.
      mem_usage:
        type: number
        format: float
        description: Memory usage of a component.
      mem_limits:
        type: number
        format: float
        description: Memory limits of a component.
      number_of_pods:
        type: integer
        format: int32
        description: Number of pods in a component.
    description: CPU and Memory metrics of a component.
  healthSearchScope:
    type: object
    properties:
      group:
        type: string
        description: Scope search to `group`; supports globbing; default (*).
      org_id:
        type: string
        description: Scope search to `org_id`; supports globbing; default (*).
      location:
        type: string
        description: Scope search to `location`; supports globbing; default (*).
      cluster_name:
        type: string
        description: Scope search to `cluster_name`; supports globbing; default (*).
      name:
        type: string
        description: Scope search to `name`; supports globbing; default (*).
    description: 'Scope to search by, any fields left empty will be considered all (*).'
  InspectionSpecInspectionType:
    description: |-
      Types of scan.

       - CONFORMANCE: Conformance inspection.
       - E2E: E2E inspection.
       - LITE: Lite inspection.
    type: string
    default: CONFORMANCE
    enum:
      - CONFORMANCE
      - E2E
      - LITE
  InspectionStageStatus:
    description: |-
      Status describes the status of the inspection.

       - UNKNOWN: Unknown - to be used if status of the current inspection is unknown.
       - RUNNING: Running - to indicate the inspection is currently running.
       - PENDING: Pending - to indicate that the inspection is waiting to be started.
       - COMPLETE: Complete - to indicate that the sonobuoy open source has completed the inspection.
       - UPLOAD: Upload - to indicate that the inspection results are being uploaded to S3.
       - FINISH: Finish - to indicate that the inspection has completed inspection + uploaded results to S3 successfully.
       - STOP: Stop - to stop the sonobuoy inspection.
       - ERROR: Error - to indicate that an error had occurred during the inspection.
    type: string
    default: UNKNOWN
    enum:
      - UNKNOWN
      - RUNNING
      - PENDING
      - COMPLETE
      - UPLOAD
      - FINISH
      - STOP
      - ERROR
  WatchInspectionsResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  inspectionCreateInspectionRequest:
    description: Request to create a Inspection.
    type: object
    properties:
      inspection:
        description: Inspection to create.
        $ref: '#/definitions/inspectionInspection'
  inspectionCreateInspectionResponse:
    description: Response from creating a Inspection.
    type: object
    properties:
      inspection:
        description: Inspection created.
        $ref: '#/definitions/inspectionInspection'
  inspectionDeleteInspectionResponse:
    description: Response from deleting Inspection.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  inspectionFullName:
    description: FullName of the inspection.
    type: object
    properties:
      cluster_name:
        description: Name of the cluster.
        type: string
      location:
        description: Location of the cluster.
        type: string
      name:
        description: Name of the inspection object.
        type: string
      org_id:
        description: Org ID of the cluster organization.
        type: string
  inspectionGetInspectionResponse:
    description: Response from getting a Inspection.
    type: object
    properties:
      inspection:
        description: Inspection returned.
        $ref: '#/definitions/inspectionInspection'
  inspectionInspection:
    description: |-
      Inspect a cluster. 

      Inspect a cluster for conformance or security compliance.
    type: object
    properties:
      full_name:
        description: Full name for the inspection.
        $ref: '#/definitions/inspectionFullName'
      object_meta:
        description: Metadata for the cluster object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the Inspection.
        $ref: '#/definitions/inspectionInspectionSpec'
      status:
        description: Status of the Inspection object.
        $ref: '#/definitions/inspectionInspectionStatus'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  inspectionInspectionSpec:
    description: The cluster Inspection Spec.
    type: object
    properties:
      scan_type:
        description: Scan type requested.
        $ref: '#/definitions/InspectionSpecInspectionType'
  inspectionInspectionStage:
    description: Different stages of a sonobuoy inspection.
    type: object
    properties:
      status:
        description: State of a resource.
        $ref: '#/definitions/InspectionStageStatus'
  inspectionInspectionStatus:
    description: Status of the inspection.
    type: object
    properties:
      inspectionstatus:
        description: Common status for an resource.
        $ref: '#/definitions/inspectionInspectionStage'
      report:
        description: Report details.
        $ref: '#/definitions/inspectionReport'
  inspectionListInspectionsResponse:
    description: Response from listing Inspections.
    type: object
    properties:
      inspections:
        description: List of inspections.
        type: array
        items:
          $ref: '#/definitions/inspectionInspection'
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
  inspectionPatchInspectionRequest:
    description: Request to patch a Inspection.
    type: object
    properties:
      inspection:
        description: Patch Inspection.
        $ref: '#/definitions/inspectionInspection'
  inspectionPatchInspectionResponse:
    description: Response from patching a Inspection.
    type: object
    properties:
      inspection:
        description: Inspection to patch.
        $ref: '#/definitions/inspectionInspection'
  inspectionReport:
    description: Encapsulates the data for a Inspection run.
    type: object
    properties:
      diagnostic:
        description: Map of all the diagnostic files in the report tarball.
        type: object
        additionalProperties:
          type: string
      hosts:
        description: 'Map of files containing host information (config, healthz).'
        type: object
        additionalProperties:
          type: string
      info:
        description: Meta-info of this report.
        $ref: '#/definitions/inspectionReportInfo'
      meta:
        description: >-
          Map of files with metadata information about the scan (Config, query
          time, run).
        type: object
        additionalProperties:
          type: string
      results:
        description: Map of all the files ending in .xml.
        type: object
        additionalProperties:
          type: string
      tarball_download_url:
        description: Download URL for the .tar.gz file with this full report.
        type: string
  inspectionReportInfo:
    description: |-
      Contains the metadata for a single report
      (e.g. report id, etc).
    type: object
    properties:
      num_failed:
        description: Number of inspections failed.
        type: string
        format: int64
      num_inspections:
        description: Total number of inspections as part of the scan.
        type: string
        format: int64
      report_id:
        description: Internal ID of the run.
        type: string
      run_datetime:
        description: Date and time of the run.
        type: string
        format: date-time
      scan_type:
        description: The scan type.
        type: string
  inspectionSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  inspectionUpdateInspectionRequest:
    description: Request to update (overwrite) a Inspection.
    type: object
    properties:
      inspection:
        description: Update Inspection.
        $ref: '#/definitions/inspectionInspection'
  inspectionUpdateInspectionResponse:
    description: Response from updating a Inspection.
    type: object
    properties:
      inspection:
        description: Inspection updated.
        $ref: '#/definitions/inspectionInspection'
  inspectionWatchInspectionsResponse:
    description: Streamed response from watching Inspections.
    type: object
    properties:
      inspection:
        description: Inspection event.
        $ref: '#/definitions/inspectionInspection'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchInspectionsResponseEventType'
  WatchNamespacesResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  namespaceCreateNamespaceRequest:
    description: Request to create a Namespace.
    type: object
    properties:
      namespace:
        description: Namespace to create.
        $ref: '#/definitions/namespaceNamespace'
  namespaceCreateNamespaceResponse:
    description: Response from creating a Namespace.
    type: object
    properties:
      namespace:
        description: Namespace created.
        $ref: '#/definitions/namespaceNamespace'
  namespaceDeleteNamespaceResponse:
    description: Response from deleting Namespace.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  namespaceFullName:
    type: object
    properties:
      org_id:
        type: string
        description: ID of Organization.
      location:
        type: string
        description: Location of parent Cluster.
      cluster_name:
        type: string
        description: Name of parent Cluster.
      name:
        type: string
        description: Name of this Namespace.
    description: |-
      Full name of the namespace. This includes the object name along
      with any parents or further identifiers.
  namespaceGetNamespaceResponse:
    description: Response from getting a Namespace.
    type: object
    properties:
      namespace:
        description: Namespace returned.
        $ref: '#/definitions/namespaceNamespace'
  namespaceListNamespacesResponse:
    description: Response from listing Namespaces.
    type: object
    properties:
      namespaces:
        description: List of namespaces.
        type: array
        items:
          $ref: '#/definitions/namespaceNamespace'
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
  namespaceNamespace:
    description: A managed Kubernetes namespace.
    type: object
    properties:
      full_name:
        description: Full name for the Namespace.
        $ref: '#/definitions/namespaceFullName'
      object_meta:
        description: Metadata for the Namespace object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the Namespace.
        $ref: '#/definitions/namespaceNamespaceSpec'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  namespaceNamespaceSpec:
    description: The Namespace spec.
    type: object
    properties:
      workspace_name:
        description: Name of Workspace which this Namespace belongs to.
        type: string
  namespacePatchNamespaceRequest:
    description: Request to patch a Namespace.
    type: object
    properties:
      namespace:
        description: Patch Namespace.
        $ref: '#/definitions/namespaceNamespace'
  namespacePatchNamespaceResponse:
    description: Response from patching a Namespace.
    type: object
    properties:
      namespace:
        description: Namespace to patch.
        $ref: '#/definitions/namespaceNamespace'
  namespaceSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      cluster_name:
        description: Scope search to `cluster_name`; supports globbing; default (*).
        type: string
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      location:
        description: Scope search to `location`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  namespaceUpdateNamespaceRequest:
    description: Request to update (overwrite) a Namespace.
    type: object
    properties:
      namespace:
        description: Update Namespace.
        $ref: '#/definitions/namespaceNamespace'
  namespaceUpdateNamespaceResponse:
    description: Response from updating a Namespace.
    type: object
    properties:
      namespace:
        description: Namespace updated.
        $ref: '#/definitions/namespaceNamespace'
  namespaceWatchNamespacesResponse:
    description: Streamed response from watching Namespaces.
    type: object
    properties:
      namespace:
        description: Namespace event.
        $ref: '#/definitions/namespaceNamespace'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchNamespacesResponseEventType'
  SubjectKind:
    type: string
    enum:
      - UNKNOWN
      - GROUP
      - SERVICEACCOUNT
      - USER
    default: UNKNOWN
    description: |-
      Kind of subject.

       - UNKNOWN: Subject is a unknown.
       - GROUP: Subject is a group.
       - SERVICEACCOUNT: Subject is a service.
       - USER: Subject is a user.
  namespaceGetNamespaceIAMPolicyResponse:
    type: object
    properties:
      policy_list:
        type: array
        items:
          $ref: '#/definitions/policyIAMPolicy'
        description: Namespace policy.
    description: GetNamespaceIAMPolicy response message.
  namespaceTestNamespaceIAMPermissionsRequest:
    type: object
    properties:
      full_name:
        $ref: '#/definitions/namespaceFullName'
        description: Namespace full_name.
      permissions:
        type: array
        items:
          type: string
        description: List of permissions to test.
    description: TestNamespaceIAMPermissions request message.
  namespaceTestNamespaceIAMPermissionsResponse:
    type: object
    properties:
      permissions:
        type: array
        items:
          type: string
        description: List of allowed permissions.
    description: TestNamespaceIAMPermissions response message.
  policyIAMPolicy:
    type: object
    properties:
      rid:
        type: string
        description: Resource ID to uniquely identify each resource.
      version:
        type: integer
        format: int32
        description: Policy version number.
      role_bindings:
        type: array
        items:
          $ref: '#/definitions/policyRoleBinding'
        description: List of role bindings associated with the policy.
    description: Representation of an iam policy.
  policyRoleBinding:
    type: object
    properties:
      role:
        type: string
        description: Role for this rolebinding -max length for role is 126.
      subjects:
        type: array
        items:
          $ref: '#/definitions/policySubject'
        description: Subject of rolebinding.
    description: Representation of an iam role-binding in resource manager.
  policySubject:
    type: object
    properties:
      name:
        type: string
        description: Subject name - allow max characters for email - 320.
      kind:
        $ref: '#/definitions/SubjectKind'
        description: Subject type.
    description: Representation of a subject in resource manager.
  ObjectStatusKind:
    type: string
    enum:
      - UNKNOWN
      - Node
      - Pod
      - Deployment
      - Service
      - ReplicaSet
      - ReplicationController
      - DaemonSet
      - StatefulSet
      - CronJob
      - Job
      - Namespace
    default: UNKNOWN
    description: |-
      Enum for resource kind.

       - UNKNOWN: UNKNOWN kind as during parsing this value is not set and is empty on return.
       - Node: Node Kind.
       - Pod: Pod Kind.
       - Deployment: Deployment Kind.
       - Service: Service kind.
       - ReplicaSet: ReplicaSet kind.
       - ReplicationController: ReplicationController kind.
       - DaemonSet: DaemonSet kind.
       - StatefulSet: StatefulSet kind.
       - CronJob: CronJob kind.
       - Job: Job kind.
       - Namespace: Namespace kind.
  intstrIntOrString:
    type: object
    properties:
      type:
        type: string
        format: int64
      intVal:
        type: integer
        format: int32
      strVal:
        type: string
    description: |-
      +protobuf=true
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +k8s:openapi-gen=true
    title: |-
      IntOrString is a type that can hold an int32 or a string.  When used in
      JSON or YAML marshalling and unmarshalling, it produces or consumes the
      inner type.  This allows you to have, for example, a JSON field that can
      accept a name or number.
      TODO: Rename to Int32OrString
  metav1ObjectMeta:
    type: object
    properties:
      name:
        type: string
        title: >-
          Name must be unique within a namespace. Is required when creating
          resources, although

          some resources may allow a client to request the generation of an
          appropriate name

          automatically. Name is primarily intended for creation idempotence and
          configuration

          definition.

          Cannot be updated.

          More info: http://kubernetes.io/docs/user-guide/identifiers#names

          +optional
      generateName:
        type: string
        description: >-
          GenerateName is an optional prefix, used by the server, to generate a
          unique

          name ONLY IF the Name field has not been provided.

          If this field is used, the name returned to the client will be
          different

          than the name passed. This value will also be combined with a unique
          suffix.

          The provided value has the same validation rules as the Name field,

          and may be truncated by the length of the suffix required to make the
          value

          unique on the server.


          If this field is specified and the generated name exists, the server
          will

          NOT return a 409 - instead, it will either return 201 Created or 500
          with Reason

          ServerTimeout indicating a unique name could not be found in the time
          allotted, and the client

          should retry (optionally after the time indicated in the Retry-After
          header).


          Applied only if Name is not specified.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency

          +optional
      namespace:
        type: string
        description: >-
          Namespace defines the space within each name must be unique. An empty
          namespace is

          equivalent to the "default" namespace, but "default" is the canonical
          representation.

          Not all objects are required to be scoped to a namespace - the value
          of this field for

          those objects will be empty.


          Must be a DNS_LABEL.

          Cannot be updated.

          More info: http://kubernetes.io/docs/user-guide/namespaces

          +optional
      selfLink:
        type: string
        title: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.
          +optional
      uid:
        type: string
        description: >-
          UID is the unique in time and space value for this object. It is
          typically generated by

          the server on successful creation of a resource and is not allowed to
          change on PUT

          operations.


          Populated by the system.

          Read-only.

          More info: http://kubernetes.io/docs/user-guide/identifiers#uids

          +optional
      resourceVersion:
        type: string
        description: >-
          An opaque value that represents the internal version of this object
          that can

          be used by clients to determine when objects have changed. May be used
          for optimistic

          concurrency, change detection, and the watch operation on a resource
          or set of resources.

          Clients must treat these values as opaque and passed unmodified back
          to the server.

          They may only be valid for a particular resource or set of resources.


          Populated by the system.

          Read-only.

          Value must be treated as opaque by clients and .

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency

          +optional
      generation:
        type: string
        format: int64
        title: >-
          A sequence number representing a specific generation of the desired
          state.

          Populated by the system. Read-only.

          +optional
      creationTimestamp:
        $ref: '#/definitions/v1Time'
        description: >-
          CreationTimestamp is a timestamp representing the server time when
          this object was

          created. It is not guaranteed to be set in happens-before order across
          separate operations.

          Clients may not set this value. It is represented in RFC3339 form and
          is in UTC.


          Populated by the system.

          Read-only.

          Null for lists.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      deletionTimestamp:
        $ref: '#/definitions/v1Time'
        description: >-
          DeletionTimestamp is RFC 3339 date and time at which this resource
          will be deleted. This

          field is set by the server when a graceful deletion is requested by
          the user, and is not

          directly settable by a client. The resource is expected to be deleted
          (no longer visible

          from resource lists, and not reachable by name) after the time in this
          field, once the

          finalizers list is empty. As long as the finalizers list contains
          items, deletion is blocked.

          Once the deletionTimestamp is set, this value may not be unset or be
          set further into the

          future, although it may be shortened or the resource may be deleted
          prior to this time.

          For example, a user may request that a pod is deleted in 30 seconds.
          The Kubelet will react

          by sending a graceful termination signal to the containers in the pod.
          After that 30 seconds,

          the Kubelet will send a hard termination signal (SIGKILL) to the
          container and after cleanup,

          remove the pod from the API. In the presence of network partitions,
          this object may still

          exist after this timestamp, until an administrator or automated
          process can determine the

          resource is fully terminated.

          If not set, graceful deletion of the object has not been requested.


          Populated by the system when a graceful deletion is requested.

          Read-only.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      deletionGracePeriodSeconds:
        type: string
        format: int64
        title: >-
          Number of seconds allowed for this object to gracefully terminate
          before

          it will be removed from the system. Only set when deletionTimestamp is
          also set.

          May only be shortened.

          Read-only.

          +optional
      labels:
        type: object
        additionalProperties:
          type: string
        title: >-
          Map of string keys and values that can be used to organize and
          categorize

          (scope and select) objects. May match selectors of replication
          controllers

          and services.

          More info: http://kubernetes.io/docs/user-guide/labels

          +optional
      annotations:
        type: object
        additionalProperties:
          type: string
        title: >-
          Annotations is an unstructured key value map stored with a resource
          that may be

          set by external tools to store and retrieve arbitrary metadata. They
          are not

          queryable and should be preserved when modifying objects.

          More info: http://kubernetes.io/docs/user-guide/annotations

          +optional
      ownerReferences:
        type: array
        items:
          $ref: '#/definitions/v1OwnerReference'
        title: >-
          List of objects depended by this object. If ALL objects in the list
          have

          been deleted, this object will be garbage collected. If this object is
          managed by a controller,

          then an entry in this list will point to this controller, with the
          controller field set to true.

          There cannot be more than one managing controller.

          +optional

          +patchMergeKey=uid

          +patchStrategy=merge
      initializers:
        $ref: '#/definitions/v1Initializers'
        description: >-
          An initializer is a controller which enforces some system invariant at
          object creation time.

          This field is a list of initializers that have not yet acted on this
          object. If nil or empty,

          this object has been completely initialized. Otherwise, the object is
          considered uninitialized

          and is hidden (in list/watch and get calls) from clients that haven't
          explicitly asked to

          observe uninitialized objects.


          When an object is created, the system will populate this list with the
          current set of initializers.

          Only privileged users may set or modify this list. Once it is empty,
          it may not be modified further

          by any user.


          DEPRECATED - initializers are an alpha field and will be removed in
          v1.15.
      finalizers:
        type: array
        items:
          type: string
        title: >-
          Must be empty before the object is deleted from the registry. Each
          entry

          is an identifier for the responsible component that will remove the
          entry

          from the list. If the deletionTimestamp of the object is non-nil,
          entries

          in this list can only be removed.

          +optional

          +patchStrategy=merge
      clusterName:
        type: string
        title: >-
          The name of the cluster which the object belongs to.

          This is used to distinguish resources with same name and namespace in
          different clusters.

          This field is not set anywhere right now and apiserver is going to
          ignore it if set in create or update request.

          +optional
      managedFields:
        type: array
        items:
          $ref: '#/definitions/v1ManagedFieldsEntry'
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          This field is alpha and can be changed or removed without notice.

          +optional
    description: >-
      ObjectMeta is metadata that all persisted resources must have, which
      includes all objects

      users must create.
  objectAggregatedResources:
    type: object
    properties:
      total_cpu:
        type: integer
        format: int32
        description: This is the total aggregated CPU of the object in millicores.
      total_memory:
        type: integer
        format: int32
        description: This is the total aggregated memory of the object in GB.
      total_pods:
        type: integer
        format: int32
        description: This is the total aggregated pods of the object.
    description: Aggregated pod information.
  objectFullName:
    type: object
    properties:
      org_id:
        type: string
        description: Org ID of the cluster organization.
      location:
        type: string
        description: Location of the cluster.
      cluster_name:
        type: string
        description: Name of the cluster.
      name:
        type: string
        description: Name of the cluster object.
    description: Scope of the object.
  objectGetObjectResponse:
    type: object
    properties:
      object:
        $ref: '#/definitions/objectObject'
        description: Object returned.
    description: Response from getting a Object.
  objectListObjectsResponse:
    type: object
    properties:
      objects:
        type: array
        items:
          $ref: '#/definitions/objectObject'
        description: List of objects.
      next_page_token:
        type: string
        description: Token to retrieve next page of records.
    description: Response from listing Objects.
  objectObject:
    type: object
    properties:
      type_meta:
        $ref: '#/definitions/commonmetaTypeMeta'
        description: Metadata describing the type of the resource.
      full_name:
        $ref: '#/definitions/objectFullName'
        description: Full name for object.
      object_meta:
        $ref: '#/definitions/commonmetaObjectMeta'
        description: Metadata for object.
      spec:
        $ref: '#/definitions/objectObjectSpec'
        description: Spec for object.
      status:
        $ref: '#/definitions/objectObjectStatus'
        description: Status of the object.
    description: Kubernetes objects that exists on a cluster.
  objectObjectCronJob:
    type: object
    properties:
      resource_cron_job:
        $ref: '#/definitions/v1beta1CronJob'
        description: CronJob object.
    description: CronJob Object.
  objectObjectDaemonSet:
    type: object
    properties:
      resource_daemon_set:
        $ref: '#/definitions/v1DaemonSet'
        description: DaemonSet object.
    description: DaemonSet Object.
  objectObjectDeployment:
    type: object
    properties:
      resource_deployment:
        $ref: '#/definitions/v1Deployment'
        description: Deployment object.
    description: Deployment Object.
  objectObjectJob:
    type: object
    properties:
      resource_job:
        $ref: '#/definitions/v1Job'
        description: Job object.
    description: Job Object.
  objectObjectNamespace:
    type: object
    properties:
      resource_namespace:
        $ref: '#/definitions/v1Namespace'
        description: Namespace object.
      aggregated_resources:
        $ref: '#/definitions/objectAggregatedResources'
        description: Aggregated resources for namespace.
      workspace:
        type: string
        description: Workspace this namespace belongs to.
    description: Namespace Object containing aggregated resources.
  objectObjectNode:
    type: object
    properties:
      resource_node:
        $ref: '#/definitions/v1Node'
        description: Node object.
      aggregated_resources:
        $ref: '#/definitions/objectAggregatedResources'
        description: Aggregated resources for node.
    description: Node Object containing aggregated resources.
  objectObjectPod:
    type: object
    properties:
      resource_pod:
        $ref: '#/definitions/v1Pod'
        description: Pod object.
    description: Pod Object.
  objectObjectReplicaSet:
    type: object
    properties:
      resource_replica_set:
        $ref: '#/definitions/v1ReplicaSet'
        description: ReplicaSet object.
    description: ReplicaSet Object.
  objectObjectReplicationController:
    type: object
    properties:
      resource_replication_controller:
        $ref: '#/definitions/v1ReplicationController'
        description: ReplicationController object.
    description: ReplicationController Object.
  objectObjectService:
    type: object
    properties:
      resource_service:
        $ref: '#/definitions/v1Service'
        description: Service object.
    description: Service Object.
  objectObjectSpec:
    type: object
    description: The object spec.
  objectObjectStatefulSet:
    type: object
    properties:
      resource_stateful_set:
        $ref: '#/definitions/v1StatefulSet'
        description: StatefulSet object.
    description: StatefulSet Object.
  objectObjectStatus:
    type: object
    properties:
      status:
        $ref: '#/definitions/statusResourceStatus'
        description: Status of the object.
      kind:
        $ref: '#/definitions/ObjectStatusKind'
        description: Kind of the resource.
      object_namespace:
        $ref: '#/definitions/objectObjectNamespace'
        description: Namespace object.
      object_node:
        $ref: '#/definitions/objectObjectNode'
        description: Node object.
      object_pod:
        $ref: '#/definitions/objectObjectPod'
        description: Pod object.
      object_deployment:
        $ref: '#/definitions/objectObjectDeployment'
        description: Deployment object.
      object_service:
        $ref: '#/definitions/objectObjectService'
        description: Service object.
      object_replica_set:
        $ref: '#/definitions/objectObjectReplicaSet'
        description: ReplicaSet object.
      object_replication_controller:
        $ref: '#/definitions/objectObjectReplicationController'
        description: ReplicationController object.
      object_daemon_set:
        $ref: '#/definitions/objectObjectDaemonSet'
        description: DaemonSet object.
      object_stateful_set:
        $ref: '#/definitions/objectObjectStatefulSet'
        description: StatefulSet object.
      object_cron_job:
        $ref: '#/definitions/objectObjectCronJob'
        description: CronJob object.
      object_job:
        $ref: '#/definitions/objectObjectJob'
        description: Job object.
    description: The object status.
  objectSearchScope:
    type: object
    properties:
      group:
        type: string
        description: Scope search to `group`; supports globbing; default (*).
      org_id:
        type: string
        description: Scope search to `org_id`; supports globbing; default (*).
      location:
        type: string
        description: Scope search to `location`; supports globbing; default (*).
      cluster_name:
        type: string
        description: Scope search to `cluster_name`; supports globbing; default (*).
      name:
        type: string
        description: Scope search to `name`; supports globbing; default (*).
    description: 'Scope to search by, any fields left empty will be considered all (*).'
  resourceQuantity:
    type: object
    properties:
      string:
        type: string
    description: >-
      Quantity is a fixed-point representation of a number.

      It provides convenient marshaling/unmarshaling in JSON and YAML,

      in addition to String() and Int64() accessors.


      The serialization format is:


      <quantity>        ::= <signedNumber><suffix>
        (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
      <digit>           ::= 0 | 1 | ... | 9

      <digits>          ::= <digit> | <digit><digits>

      <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>

      <sign>            ::= "+" | "-"

      <signedNumber>    ::= <number> | <sign><number>

      <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>

      <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
        (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI>       ::= m | "" | k | M | G | T | P | E
        (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>


      No matter which of the three exponent forms is used, no quantity may
      represent

      a number greater than 2^63-1 in magnitude, nor may it have more than 3
      decimal

      places. Numbers larger or more precise will be capped or rounded up.

      (E.g.: 0.1m will rounded up to 1m.)

      This may be extended in the future if we require larger or smaller
      quantities.


      When a Quantity is parsed from a string, it will remember the type of
      suffix

      it had, and will use the same type again when it is serialized.


      Before serializing, Quantity will be put in "canonical form".

      This means that Exponent/suffix will be adjusted up or down (with a

      corresponding increase or decrease in Mantissa) such that:
        a. No precision is lost
        b. No fractional digits will be emitted
        c. The exponent (or suffix) is as large as possible.
      The sign will be omitted unless the number is negative.


      Examples:
        1.5 will be serialized as "1500m"
        1.5Gi will be serialized as "1536Mi"

      Note that the quantity will NEVER be internally represented by a

      floating point number. That is the whole point of this exercise.


      Non-canonical values will still parse as long as they are well formed,

      but will be re-emitted in their canonical form. (So always use canonical

      form, or don't diff.)


      This format is intended to make it difficult to use these numbers without

      writing some sort of special handling code in the hopes that that will

      cause implementors to also use a fixed point implementation.


      +protobuf=true

      +protobuf.embed=string

      +protobuf.options.marshal=false

      +protobuf.options.(gogoproto.goproto_stringer)=false

      +k8s:deepcopy-gen=true

      +k8s:openapi-gen=true
  v1AWSElasticBlockStoreVolumeSource:
    type: object
    properties:
      volumeID:
        type: string
        title: >-
          Unique ID of the persistent disk resource in AWS (Amazon EBS volume).

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
      fsType:
        type: string
        title: >-
          Filesystem type of the volume that you want to mount.

          Tip: Ensure that the filesystem type is supported by the host
          operating system.

          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

          TODO: how do we prevent errors in the filesystem from compromising the
          machine

          +optional
      partition:
        type: integer
        format: int32
        title: >-
          The partition in the volume that you want to mount.

          If omitted, the default is to mount by volume name.

          Examples: For volume /dev/sda1, you specify the partition as "1".

          Similarly, the volume partition for /dev/sda is "0" (or you can leave
          the property empty).

          +optional
      readOnly:
        type: boolean
        format: boolean
        title: >-
          Specify "true" to force and set the ReadOnly property in VolumeMounts
          to "true".

          If omitted, the default is "false".

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

          +optional
    description: |-
      Represents a Persistent Disk resource in AWS.

      An AWS EBS disk must exist before mounting to a container. The disk
      must also be in the same AWS zone as the kubelet. An AWS EBS disk
      can only be mounted as read/write once. AWS EBS volumes support
      ownership management and SELinux relabeling.
  v1Affinity:
    type: object
    properties:
      nodeAffinity:
        $ref: '#/definitions/v1NodeAffinity'
        title: |-
          Describes node affinity scheduling rules for the pod.
          +optional
      podAffinity:
        $ref: '#/definitions/v1PodAffinity'
        title: >-
          Describes pod affinity scheduling rules (e.g. co-locate this pod in
          the same node, zone, etc. as some other pod(s)).

          +optional
      podAntiAffinity:
        $ref: '#/definitions/v1PodAntiAffinity'
        title: >-
          Describes pod anti-affinity scheduling rules (e.g. avoid putting this
          pod in the same node, zone, etc. as some other pod(s)).

          +optional
    description: Affinity is a group of affinity scheduling rules.
  v1AttachedVolume:
    type: object
    properties:
      name:
        type: string
        title: Name of the attached volume
      devicePath:
        type: string
        title: >-
          DevicePath represents the device path where the volume should be
          available
    title: AttachedVolume describes a volume attached to a node
  v1AzureDiskVolumeSource:
    type: object
    properties:
      diskName:
        type: string
        title: The Name of the data disk in the blob storage
      diskURI:
        type: string
        title: The URI the data disk in the blob storage
      cachingMode:
        type: string
        title: |-
          Host Caching mode: None, Read Only, Read Write.
          +optional
      fsType:
        type: string
        title: >-
          Filesystem type to mount.

          Must be a filesystem type supported by the host operating system.

          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.

          +optional
      readOnly:
        type: boolean
        format: boolean
        title: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
      kind:
        type: string
        title: >-
          Expected values Shared: multiple blob disks per storage account 
          Dedicated: single blob disk per storage account  Managed: azure
          managed data disk (only in managed availability set). defaults to
          shared
    description: >-
      AzureDisk represents an Azure Data Disk mount on the host and bind mount
      to the pod.
  v1AzureFileVolumeSource:
    type: object
    properties:
      secretName:
        type: string
        title: the name of secret that contains Azure Storage Account Name and Key
      shareName:
        type: string
        title: Share Name
      readOnly:
        type: boolean
        format: boolean
        title: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
    description: >-
      AzureFile represents an Azure File Service mount on the host and bind
      mount to the pod.
  v1CSIVolumeSource:
    type: object
    properties:
      driver:
        type: string
        description: >-
          Driver is the name of the CSI driver that handles this volume.

          Consult with your admin for the correct name as registered in the
          cluster.
      readOnly:
        type: boolean
        format: boolean
        title: |-
          Specifies a read-only configuration for the volume.
          Defaults to false (read/write).
          +optional
      fsType:
        type: string
        title: >-
          Filesystem type to mount. Ex. "ext4", "xfs", "ntfs".

          If not provided, the empty value is passed to the associated CSI
          driver

          which will determine the default filesystem to apply.

          +optional
      volumeAttributes:
        type: object
        additionalProperties:
          type: string
        title: >-
          VolumeAttributes stores driver-specific properties that are passed to
          the CSI

          driver. Consult your driver's documentation for supported values.

          +optional
      nodePublishSecretRef:
        $ref: '#/definitions/v1LocalObjectReference'
        title: >-
          NodePublishSecretRef is a reference to the secret object containing

          sensitive information to pass to the CSI driver to complete the CSI

          NodePublishVolume and NodeUnpublishVolume calls.

          This field is optional, and  may be empty if no secret is required. If
          the

          secret object contains more than one secret, all secret references are
          passed.

          +optional
    title: >-
      Represents a source location of a volume to mount, managed by an external
      CSI driver
  v1Capabilities:
    type: object
    properties:
      add:
        type: array
        items:
          type: string
        title: |-
          Added capabilities
          +optional
      drop:
        type: array
        items:
          type: string
        title: |-
          Removed capabilities
          +optional
    description: Adds and removes POSIX capabilities from running containers.
  v1CephFSVolumeSource:
    type: object
    properties:
      monitors:
        type: array
        items:
          type: string
        title: >-
          Required: Monitors is a collection of Ceph monitors

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
      path:
        type: string
        title: >-
          Optional: Used as the mounted root, rather than the full Ceph tree,
          default is /

          +optional
      user:
        type: string
        title: >-
          Optional: User is the rados user name, default is admin

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

          +optional
      secretFile:
        type: string
        title: >-
          Optional: SecretFile is the path to key ring for User, default is
          /etc/ceph/user.secret

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

          +optional
      secretRef:
        $ref: '#/definitions/v1LocalObjectReference'
        title: >-
          Optional: SecretRef is reference to the authentication secret for
          User, default is empty.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

          +optional
      readOnly:
        type: boolean
        format: boolean
        title: >-
          Optional: Defaults to false (read/write). ReadOnly here will force

          the ReadOnly setting in VolumeMounts.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

          +optional
    description: |-
      Represents a Ceph Filesystem mount that lasts the lifetime of a pod
      Cephfs volumes do not support ownership management or SELinux relabeling.
  v1CinderVolumeSource:
    type: object
    properties:
      volumeID:
        type: string
        title: >-
          volume id used to identify the volume in cinder

          More info:
          https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
      fsType:
        type: string
        title: >-
          Filesystem type to mount.

          Must be a filesystem type supported by the host operating system.

          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.

          More info:
          https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md

          +optional
      readOnly:
        type: boolean
        format: boolean
        title: >-
          Optional: Defaults to false (read/write). ReadOnly here will force

          the ReadOnly setting in VolumeMounts.

          More info:
          https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md

          +optional
      secretRef:
        $ref: '#/definitions/v1LocalObjectReference'
        title: >-
          Optional: points to a secret object containing parameters used to
          connect

          to OpenStack.

          +optional
    description: |-
      Represents a cinder volume resource in Openstack.
      A Cinder volume must exist before mounting to a container.
      The volume must also be in the same region as the kubelet.
      Cinder volumes support ownership management and SELinux relabeling.
  v1ClientIPConfig:
    type: object
    properties:
      timeoutSeconds:
        type: integer
        format: int32
        title: >-
          timeoutSeconds specifies the seconds of ClientIP type session sticky
          time.

          The value must be >0 && <=86400(for 1 day) if ServiceAffinity ==
          "ClientIP".

          Default value is 10800(for 3 hours).

          +optional
    description: >-
      ClientIPConfig represents the configurations of Client IP based session
      affinity.
  v1ConfigMapEnvSource:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/v1LocalObjectReference'
        description: The ConfigMap to select from.
      optional:
        type: boolean
        format: boolean
        title: |-
          Specify whether the ConfigMap must be defined
          +optional
    description: |-
      ConfigMapEnvSource selects a ConfigMap to populate the environment
      variables with.

      The contents of the target ConfigMap's Data field will represent the
      key-value pairs as environment variables.
  v1ConfigMapKeySelector:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/v1LocalObjectReference'
        description: The ConfigMap to select from.
      key:
        type: string
        description: The key to select.
      optional:
        type: boolean
        format: boolean
        title: |-
          Specify whether the ConfigMap or it's key must be defined
          +optional
    description: Selects a key from a ConfigMap.
  v1ConfigMapNodeConfigSource:
    type: object
    properties:
      namespace:
        type: string
        description: |-
          Namespace is the metadata.namespace of the referenced ConfigMap.
          This field is required in all cases.
      name:
        type: string
        description: |-
          Name is the metadata.name of the referenced ConfigMap.
          This field is required in all cases.
      uid:
        type: string
        title: |-
          UID is the metadata.UID of the referenced ConfigMap.
          This field is forbidden in Node.Spec, and required in Node.Status.
          +optional
      resourceVersion:
        type: string
        title: >-
          ResourceVersion is the metadata.ResourceVersion of the referenced
          ConfigMap.

          This field is forbidden in Node.Spec, and required in Node.Status.

          +optional
      kubeletConfigKey:
        type: string
        description: >-
          KubeletConfigKey declares which key of the referenced ConfigMap
          corresponds to the KubeletConfiguration structure

          This field is required in all cases.
    description: >-
      ConfigMapNodeConfigSource contains the information to reference a
      ConfigMap as a config source for the Node.
  v1ConfigMapProjection:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/v1LocalObjectReference'
      items:
        type: array
        items:
          $ref: '#/definitions/v1KeyToPath'
        title: >-
          If unspecified, each key-value pair in the Data field of the
          referenced

          ConfigMap will be projected into the volume as a file whose name is
          the

          key and content is the value. If specified, the listed keys will be

          projected into the specified paths, and unlisted keys will not be

          present. If a key is specified which is not present in the ConfigMap,

          the volume setup will error unless it is marked optional. Paths must
          be

          relative and may not contain the '..' path or start with '..'.

          +optional
      optional:
        type: boolean
        format: boolean
        title: |-
          Specify whether the ConfigMap or it's keys must be defined
          +optional
    description: >-
      Adapts a ConfigMap into a projected volume.


      The contents of the target ConfigMap's Data field will be presented in a

      projected volume as files using the keys in the Data field as the file
      names,

      unless the items element is populated with specific mappings of keys to
      paths.

      Note that this is identical to a configmap volume source without the
      default

      mode.
  v1ConfigMapVolumeSource:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/v1LocalObjectReference'
      items:
        type: array
        items:
          $ref: '#/definitions/v1KeyToPath'
        title: >-
          If unspecified, each key-value pair in the Data field of the
          referenced

          ConfigMap will be projected into the volume as a file whose name is
          the

          key and content is the value. If specified, the listed keys will be

          projected into the specified paths, and unlisted keys will not be

          present. If a key is specified which is not present in the ConfigMap,

          the volume setup will error unless it is marked optional. Paths must
          be

          relative and may not contain the '..' path or start with '..'.

          +optional
      defaultMode:
        type: integer
        format: int32
        title: |-
          Optional: mode bits to use on created files by default. Must be a
          value between 0 and 0777. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
      optional:
        type: boolean
        format: boolean
        title: |-
          Specify whether the ConfigMap or it's keys must be defined
          +optional
    description: |-
      Adapts a ConfigMap into a volume.

      The contents of the target ConfigMap's Data field will be presented in a
      volume as files using the keys in the Data field as the file names, unless
      the items element is populated with specific mappings of keys to paths.
      ConfigMap volumes support ownership management and SELinux relabeling.
  v1Container:
    type: object
    properties:
      name:
        type: string
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
      image:
        type: string
        title: >-
          Docker image name.

          More info: https://kubernetes.io/docs/concepts/containers/images

          This field is optional to allow higher level config management to
          default or override

          container images in workload controllers like Deployments and
          StatefulSets.

          +optional
      command:
        type: array
        items:
          type: string
        title: >-
          Entrypoint array. Not executed within a shell.

          The docker image's ENTRYPOINT is used if this is not provided.

          Variable references $(VAR_NAME) are expanded using the container's
          environment. If a variable

          cannot be resolved, the reference in the input string will be
          unchanged. The $(VAR_NAME) syntax

          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references
          will never be expanded,

          regardless of whether the variable exists or not.

          Cannot be updated.

          More info:
          https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

          +optional
      args:
        type: array
        items:
          type: string
        title: >-
          Arguments to the entrypoint.

          The docker image's CMD is used if this is not provided.

          Variable references $(VAR_NAME) are expanded using the container's
          environment. If a variable

          cannot be resolved, the reference in the input string will be
          unchanged. The $(VAR_NAME) syntax

          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references
          will never be expanded,

          regardless of whether the variable exists or not.

          Cannot be updated.

          More info:
          https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

          +optional
      workingDir:
        type: string
        title: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
      ports:
        type: array
        items:
          $ref: '#/definitions/v1ContainerPort'
        title: >-
          List of ports to expose from the container. Exposing a port here gives

          the system additional information about the network connections a

          container uses, but is primarily informational. Not specifying a port
          here

          DOES NOT prevent that port from being exposed. Any port which is

          listening on the default "0.0.0.0" address inside a container will be

          accessible from the network.

          Cannot be updated.

          +optional

          +patchMergeKey=containerPort

          +patchStrategy=merge

          +listType=map

          +listMapKey=containerPort

          +listMapKey=protocol
      envFrom:
        type: array
        items:
          $ref: '#/definitions/v1EnvFromSource'
        title: >-
          List of sources to populate environment variables in the container.

          The keys defined within a source must be a C_IDENTIFIER. All invalid
          keys

          will be reported as an event when the container is starting. When a
          key exists in multiple

          sources, the value associated with the last source will take
          precedence.

          Values defined by an Env with a duplicate key will take precedence.

          Cannot be updated.

          +optional
      env:
        type: array
        items:
          $ref: '#/definitions/v1EnvVar'
        title: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
      resources:
        $ref: '#/definitions/v1ResourceRequirements'
        title: >-
          Compute Resources required by this container.

          Cannot be updated.

          More info:
          https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/

          +optional
      volumeMounts:
        type: array
        items:
          $ref: '#/definitions/v1VolumeMount'
        title: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
      volumeDevices:
        type: array
        items:
          $ref: '#/definitions/v1VolumeDevice'
        title: >-
          volumeDevices is the list of block devices to be used by the
          container.

          This is a beta feature.

          +patchMergeKey=devicePath

          +patchStrategy=merge

          +optional
      livenessProbe:
        $ref: '#/definitions/v1Probe'
        title: >-
          Periodic probe of container liveness.

          Container will be restarted if the probe fails.

          Cannot be updated.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

          +optional
      readinessProbe:
        $ref: '#/definitions/v1Probe'
        title: >-
          Periodic probe of container service readiness.

          Container will be removed from service endpoints if the probe fails.

          Cannot be updated.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

          +optional
      lifecycle:
        $ref: '#/definitions/v1Lifecycle'
        title: >-
          Actions that the management system should take in response to
          container lifecycle events.

          Cannot be updated.

          +optional
      terminationMessagePath:
        type: string
        title: >-
          Optional: Path at which the file to which the container's termination
          message

          will be written is mounted into the container's filesystem.

          Message written is intended to be brief final status, such as an
          assertion failure message.

          Will be truncated by the node if greater than 4096 bytes. The total
          message length across

          all containers will be limited to 12kb.

          Defaults to /dev/termination-log.

          Cannot be updated.

          +optional
      terminationMessagePolicy:
        type: string
        title: >-
          Indicate how the termination message should be populated. File will
          use the contents of

          terminationMessagePath to populate the container status message on
          both success and failure.

          FallbackToLogsOnError will use the last chunk of container log output
          if the termination

          message file is empty and the container exited with an error.

          The log output is limited to 2048 bytes or 80 lines, whichever is
          smaller.

          Defaults to File.

          Cannot be updated.

          +optional
      imagePullPolicy:
        type: string
        title: >-
          Image pull policy.

          One of Always, Never, IfNotPresent.

          Defaults to Always if :latest tag is specified, or IfNotPresent
          otherwise.

          Cannot be updated.

          More info:
          https://kubernetes.io/docs/concepts/containers/images#updating-images

          +optional
      securityContext:
        $ref: '#/definitions/v1SecurityContext'
        title: >-
          Security options the pod should run with.

          More info:
          https://kubernetes.io/docs/concepts/policy/security-context/

          More info:
          https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

          +optional
      stdin:
        type: boolean
        format: boolean
        title: >-
          Whether this container should allocate a buffer for stdin in the
          container runtime. If this

          is not set, reads from stdin in the container will always result in
          EOF.

          Default is false.

          +optional
      stdinOnce:
        type: boolean
        format: boolean
        title: >-
          Whether the container runtime should close the stdin channel after it
          has been opened by

          a single attach. When stdin is true the stdin stream will remain open
          across multiple attach

          sessions. If stdinOnce is set to true, stdin is opened on container
          start, is empty until the

          first client attaches to stdin, and then remains open and accepts data
          until the client disconnects,

          at which time stdin is closed and remains closed until the container
          is restarted. If this

          flag is false, a container processes that reads from stdin will never
          receive an EOF.

          Default is false

          +optional
      tty:
        type: boolean
        format: boolean
        title: >-
          Whether this container should allocate a TTY for itself, also requires
          'stdin' to be true.

          Default is false.

          +optional
    description: A single application container that you want to run within a pod.
  v1ContainerImage:
    type: object
    properties:
      names:
        type: array
        items:
          type: string
        title: >-
          Names by which this image is known.

          e.g. ["k8s.gcr.io/hyperkube:v1.0.7",
          "dockerhub.io/google_containers/hyperkube:v1.0.7"]
      sizeBytes:
        type: string
        format: int64
        title: |-
          The size of the image in bytes.
          +optional
    title: Describe a container image
  v1ContainerPort:
    type: object
    properties:
      name:
        type: string
        title: >-
          If specified, this must be an IANA_SVC_NAME and unique within the pod.
          Each

          named port in a pod must have a unique name. Name for the port that
          can be

          referred to by services.

          +optional
      hostPort:
        type: integer
        format: int32
        title: |-
          Number of port to expose on the host.
          If specified, this must be a valid port number, 0 < x < 65536.
          If HostNetwork is specified, this must match ContainerPort.
          Most containers do not need this.
          +optional
      containerPort:
        type: integer
        format: int32
        description: |-
          Number of port to expose on the pod's IP address.
          This must be a valid port number, 0 < x < 65536.
      protocol:
        type: string
        title: |-
          Protocol for port. Must be UDP, TCP, or SCTP.
          Defaults to "TCP".
          +optional
      hostIP:
        type: string
        title: |-
          What host IP to bind the external port to.
          +optional
    description: ContainerPort represents a network port in a single container.
  v1ContainerState:
    type: object
    properties:
      waiting:
        $ref: '#/definitions/v1ContainerStateWaiting'
        title: |-
          Details about a waiting container
          +optional
      running:
        $ref: '#/definitions/v1ContainerStateRunning'
        title: |-
          Details about a running container
          +optional
      terminated:
        $ref: '#/definitions/v1ContainerStateTerminated'
        title: |-
          Details about a terminated container
          +optional
    description: |-
      ContainerState holds a possible state of container.
      Only one of its members may be specified.
      If none of them is specified, the default one is ContainerStateWaiting.
  v1ContainerStateRunning:
    type: object
    properties:
      startedAt:
        $ref: '#/definitions/v1Time'
        title: |-
          Time at which the container was last (re-)started
          +optional
    description: ContainerStateRunning is a running state of a container.
  v1ContainerStateTerminated:
    type: object
    properties:
      exitCode:
        type: integer
        format: int32
        title: Exit status from the last termination of the container
      signal:
        type: integer
        format: int32
        title: |-
          Signal from the last termination of the container
          +optional
      reason:
        type: string
        title: |-
          (brief) reason from the last termination of the container
          +optional
      message:
        type: string
        title: |-
          Message regarding the last termination of the container
          +optional
      startedAt:
        $ref: '#/definitions/v1Time'
        title: |-
          Time at which previous execution of the container started
          +optional
      finishedAt:
        $ref: '#/definitions/v1Time'
        title: |-
          Time at which the container last terminated
          +optional
      containerID:
        type: string
        title: |-
          Container's ID in the format 'docker://<container_id>'
          +optional
    description: ContainerStateTerminated is a terminated state of a container.
  v1ContainerStateWaiting:
    type: object
    properties:
      reason:
        type: string
        title: |-
          (brief) reason the container is not yet running.
          +optional
      message:
        type: string
        title: |-
          Message regarding why the container is not yet running.
          +optional
    description: ContainerStateWaiting is a waiting state of a container.
  v1ContainerStatus:
    type: object
    properties:
      name:
        type: string
        description: >-
          This must be a DNS_LABEL. Each container in a pod must have a unique
          name.

          Cannot be updated.
      state:
        $ref: '#/definitions/v1ContainerState'
        title: |-
          Details about the container's current condition.
          +optional
      lastState:
        $ref: '#/definitions/v1ContainerState'
        title: |-
          Details about the container's last termination condition.
          +optional
      ready:
        type: boolean
        format: boolean
        description: Specifies whether the container has passed its readiness probe.
      restartCount:
        type: integer
        format: int32
        description: >-
          The number of times the container has been restarted, currently based
          on

          the number of dead containers that have not yet been removed.

          Note that this is calculated from dead containers. But those
          containers are subject to

          garbage collection. This value will get capped at 5 by GC.
      image:
        type: string
        title: |-
          The image the container is running.
          More info: https://kubernetes.io/docs/concepts/containers/images
          TODO(dchen1107): Which image the container is running with?
      imageID:
        type: string
        description: ImageID of the container's image.
      containerID:
        type: string
        title: |-
          Container's ID in the format 'docker://<container_id>'.
          +optional
    description: ContainerStatus contains details for the current status of this container.
  v1DaemonEndpoint:
    type: object
    properties:
      Port:
        type: integer
        format: int32
        description: Port number of the given endpoint.
    description: DaemonEndpoint contains information about a single Daemon endpoint.
  v1DaemonSet:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1DaemonSetSpec'
        title: >-
          The desired behavior of this daemon set.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      status:
        $ref: '#/definitions/v1DaemonSetStatus'
        title: >-
          The current status of this daemon set. This data may be

          out of date by some window of time.

          Populated by the system.

          Read-only.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    description: DaemonSet represents the configuration of a daemon set.
  v1DaemonSetCondition:
    type: object
    properties:
      type:
        type: string
        description: Type of DaemonSet condition.
      status:
        type: string
        description: 'Status of the condition, one of True, False, Unknown.'
      lastTransitionTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time the condition transitioned from one status to another.
          +optional
      reason:
        type: string
        title: |-
          The reason for the condition's last transition.
          +optional
      message:
        type: string
        title: |-
          A human readable message indicating details about the transition.
          +optional
    description: DaemonSetCondition describes the state of a DaemonSet at a certain point.
  v1DaemonSetSpec:
    type: object
    properties:
      selector:
        $ref: '#/definitions/v1LabelSelector'
        title: >-
          A label query over pods that are managed by the daemon set.

          Must match in order to be controlled.

          It must match the pod template's labels.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
      template:
        $ref: '#/definitions/v1PodTemplateSpec'
        title: >-
          An object that describes the pod that will be created.

          The DaemonSet will create exactly one copy of this pod on every node

          that matches the template's node selector (or on every node if no node

          selector is specified).

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
      updateStrategy:
        $ref: '#/definitions/v1DaemonSetUpdateStrategy'
        title: |-
          An update strategy to replace existing DaemonSet pods with new pods.
          +optional
      minReadySeconds:
        type: integer
        format: int32
        title: >-
          The minimum number of seconds for which a newly created DaemonSet pod
          should

          be ready without any of its container crashing, for it to be
          considered

          available. Defaults to 0 (pod will be considered available as soon as
          it

          is ready).

          +optional
      revisionHistoryLimit:
        type: integer
        format: int32
        title: >-
          The number of old history to retain to allow rollback.

          This is a pointer to distinguish between explicit zero and not
          specified.

          Defaults to 10.

          +optional
    description: DaemonSetSpec is the specification of a daemon set.
  v1DaemonSetStatus:
    type: object
    properties:
      currentNumberScheduled:
        type: integer
        format: int32
        title: >-
          The number of nodes that are running at least 1

          daemon pod and are supposed to run the daemon pod.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
      numberMisscheduled:
        type: integer
        format: int32
        title: >-
          The number of nodes that are running the daemon pod, but are

          not supposed to run the daemon pod.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
      desiredNumberScheduled:
        type: integer
        format: int32
        title: >-
          The total number of nodes that should be running the daemon

          pod (including nodes correctly running the daemon pod).

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
      numberReady:
        type: integer
        format: int32
        description: |-
          The number of nodes that should be running the daemon pod and have one
          or more of the daemon pod running and ready.
      observedGeneration:
        type: string
        format: int64
        title: |-
          The most recent generation observed by the daemon set controller.
          +optional
      updatedNumberScheduled:
        type: integer
        format: int32
        title: |-
          The total number of nodes that are running updated daemon pod
          +optional
      numberAvailable:
        type: integer
        format: int32
        title: |-
          The number of nodes that should be running the
          daemon pod and have one or more of the daemon pod running and
          available (ready for at least spec.minReadySeconds)
          +optional
      numberUnavailable:
        type: integer
        format: int32
        title: |-
          The number of nodes that should be running the
          daemon pod and have none of the daemon pod running and available
          (ready for at least spec.minReadySeconds)
          +optional
      collisionCount:
        type: integer
        format: int32
        title: |-
          Count of hash collisions for the DaemonSet. The DaemonSet controller
          uses this field as a collision avoidance mechanism when it needs to
          create the name for the newest ControllerRevision.
          +optional
      conditions:
        type: array
        items:
          $ref: '#/definitions/v1DaemonSetCondition'
        title: >-
          Represents the latest available observations of a DaemonSet's current
          state.

          +optional

          +patchMergeKey=type

          +patchStrategy=merge
    description: DaemonSetStatus represents the current status of a daemon set.
  v1DaemonSetUpdateStrategy:
    type: object
    properties:
      type:
        type: string
        title: >-
          Type of daemon set update. Can be "RollingUpdate" or "OnDelete".
          Default is RollingUpdate.

          +optional
      rollingUpdate:
        $ref: '#/definitions/v1RollingUpdateDaemonSet'
        title: >-
          Rolling update config params. Present only if type = "RollingUpdate".

          ---

          TODO: Update this to follow our convention for oneOf, whatever we
          decide it

          to be. Same as Deployment `strategy.rollingUpdate`.

          See https://github.com/kubernetes/kubernetes/issues/35345

          +optional
    description: >-
      DaemonSetUpdateStrategy is a struct used to control the update strategy
      for a DaemonSet.
  v1Deployment:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: |-
          Standard object metadata.
          +optional
      spec:
        $ref: '#/definitions/v1DeploymentSpec'
        title: |-
          Specification of the desired behavior of the Deployment.
          +optional
      status:
        $ref: '#/definitions/v1DeploymentStatus'
        title: |-
          Most recently observed status of the Deployment.
          +optional
    description: Deployment enables declarative updates for Pods and ReplicaSets.
  v1DeploymentCondition:
    type: object
    properties:
      type:
        type: string
        description: Type of deployment condition.
      status:
        type: string
        description: 'Status of the condition, one of True, False, Unknown.'
      lastUpdateTime:
        $ref: '#/definitions/v1Time'
        description: The last time this condition was updated.
      lastTransitionTime:
        $ref: '#/definitions/v1Time'
        description: Last time the condition transitioned from one status to another.
      reason:
        type: string
        description: The reason for the condition's last transition.
      message:
        type: string
        description: A human readable message indicating details about the transition.
    description: >-
      DeploymentCondition describes the state of a deployment at a certain
      point.
  v1DeploymentSpec:
    type: object
    properties:
      replicas:
        type: integer
        format: int32
        title: >-
          Number of desired pods. This is a pointer to distinguish between
          explicit

          zero and not specified. Defaults to 1.

          +optional
      selector:
        $ref: '#/definitions/v1LabelSelector'
        description: |-
          Label selector for pods. Existing ReplicaSets whose pods are
          selected by this will be the ones affected by this deployment.
          It must match the pod template's labels.
      template:
        $ref: '#/definitions/v1PodTemplateSpec'
        description: Template describes the pods that will be created.
      strategy:
        $ref: '#/definitions/v1DeploymentStrategy'
        title: |-
          The deployment strategy to use to replace existing pods with new ones.
          +optional
          +patchStrategy=retainKeys
      minReadySeconds:
        type: integer
        format: int32
        title: >-
          Minimum number of seconds for which a newly created pod should be
          ready

          without any of its container crashing, for it to be considered
          available.

          Defaults to 0 (pod will be considered available as soon as it is
          ready)

          +optional
      revisionHistoryLimit:
        type: integer
        format: int32
        title: >-
          The number of old ReplicaSets to retain to allow rollback.

          This is a pointer to distinguish between explicit zero and not
          specified.

          Defaults to 10.

          +optional
      paused:
        type: boolean
        format: boolean
        title: |-
          Indicates that the deployment is paused.
          +optional
      progressDeadlineSeconds:
        type: integer
        format: int32
        description: >-
          The maximum time in seconds for a deployment to make progress before
          it

          is considered to be failed. The deployment controller will continue to

          process failed deployments and a condition with a
          ProgressDeadlineExceeded

          reason will be surfaced in the deployment status. Note that progress
          will

          not be estimated during the time a deployment is paused. Defaults to
          600s.
    description: >-
      DeploymentSpec is the specification of the desired behavior of the
      Deployment.
  v1DeploymentStatus:
    type: object
    properties:
      observedGeneration:
        type: string
        format: int64
        title: |-
          The generation observed by the deployment controller.
          +optional
      replicas:
        type: integer
        format: int32
        title: >-
          Total number of non-terminated pods targeted by this deployment (their
          labels match the selector).

          +optional
      updatedReplicas:
        type: integer
        format: int32
        title: >-
          Total number of non-terminated pods targeted by this deployment that
          have the desired template spec.

          +optional
      readyReplicas:
        type: integer
        format: int32
        title: |-
          Total number of ready pods targeted by this deployment.
          +optional
      availableReplicas:
        type: integer
        format: int32
        title: >-
          Total number of available pods (ready for at least minReadySeconds)
          targeted by this deployment.

          +optional
      unavailableReplicas:
        type: integer
        format: int32
        title: >-
          Total number of unavailable pods targeted by this deployment. This is
          the total number of

          pods that are still required for the deployment to have 100% available
          capacity. They may

          either be pods that are running but not yet available or pods that
          still have not been created.

          +optional
      conditions:
        type: array
        items:
          $ref: '#/definitions/v1DeploymentCondition'
        title: >-
          Represents the latest available observations of a deployment's current
          state.

          +patchMergeKey=type

          +patchStrategy=merge
      collisionCount:
        type: integer
        format: int32
        title: >-
          Count of hash collisions for the Deployment. The Deployment controller
          uses this

          field as a collision avoidance mechanism when it needs to create the
          name for the

          newest ReplicaSet.

          +optional
    description: DeploymentStatus is the most recently observed status of the Deployment.
  v1DeploymentStrategy:
    type: object
    properties:
      type:
        type: string
        title: >-
          Type of deployment. Can be "Recreate" or "RollingUpdate". Default is
          RollingUpdate.

          +optional
      rollingUpdate:
        $ref: '#/definitions/v1RollingUpdateDeployment'
        title: >-
          Rolling update config params. Present only if DeploymentStrategyType =

          RollingUpdate.

          ---

          TODO: Update this to follow our convention for oneOf, whatever we
          decide it

          to be.

          +optional
    description: DeploymentStrategy describes how to replace existing pods with new ones.
  v1DownwardAPIProjection:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/v1DownwardAPIVolumeFile'
        title: |-
          Items is a list of DownwardAPIVolume file
          +optional
    description: >-
      Represents downward API info for projecting into a projected volume.

      Note that this is identical to a downwardAPI volume source without the
      default

      mode.
  v1DownwardAPIVolumeFile:
    type: object
    properties:
      path:
        type: string
        title: >-
          Required: Path is  the relative path name of the file to be created.
          Must not be absolute or contain the '..' path. Must be utf-8 encoded.
          The first item of the relative path must not start with '..'
      fieldRef:
        $ref: '#/definitions/v1ObjectFieldSelector'
        title: >-
          Required: Selects a field of the pod: only annotations, labels, name
          and namespace are supported.

          +optional
      resourceFieldRef:
        $ref: '#/definitions/v1ResourceFieldSelector'
        title: >-
          Selects a resource of the container: only resources limits and
          requests

          (limits.cpu, limits.memory, requests.cpu and requests.memory) are
          currently supported.

          +optional
      mode:
        type: integer
        format: int32
        title: |-
          Optional: mode bits to use on this file, must be a value between 0
          and 0777. If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
    title: >-
      DownwardAPIVolumeFile represents information to create the file containing
      the pod field
  v1DownwardAPIVolumeSource:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/v1DownwardAPIVolumeFile'
        title: |-
          Items is a list of downward API volume file
          +optional
      defaultMode:
        type: integer
        format: int32
        title: |-
          Optional: mode bits to use on created files by default. Must be a
          value between 0 and 0777. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
    description: |-
      DownwardAPIVolumeSource represents a volume containing downward API info.
      Downward API volumes support ownership management and SELinux relabeling.
  v1EmptyDirVolumeSource:
    type: object
    properties:
      medium:
        type: string
        title: >-
          What type of storage medium should back this directory.

          The default is "" which means to use the node's default medium.

          Must be an empty string (default) or Memory.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#emptydir

          +optional
      sizeLimit:
        $ref: '#/definitions/resourceQuantity'
        title: >-
          Total amount of local storage required for this EmptyDir volume.

          The size limit is also applicable for memory medium.

          The maximum usage on memory medium EmptyDir would be the minimum value
          between

          the SizeLimit specified here and the sum of memory limits of all
          containers in a pod.

          The default is nil which means that the limit is undefined.

          More info: http://kubernetes.io/docs/user-guide/volumes#emptydir

          +optional
    description: >-
      Represents an empty directory for a pod.

      Empty directory volumes support ownership management and SELinux
      relabeling.
  v1EnvFromSource:
    type: object
    properties:
      prefix:
        type: string
        title: >-
          An optional identifier to prepend to each key in the ConfigMap. Must
          be a C_IDENTIFIER.

          +optional
      configMapRef:
        $ref: '#/definitions/v1ConfigMapEnvSource'
        title: |-
          The ConfigMap to select from
          +optional
      secretRef:
        $ref: '#/definitions/v1SecretEnvSource'
        title: |-
          The Secret to select from
          +optional
    title: EnvFromSource represents the source of a set of ConfigMaps
  v1EnvVar:
    type: object
    properties:
      name:
        type: string
        description: Name of the environment variable. Must be a C_IDENTIFIER.
      value:
        type: string
        title: |-
          Variable references $(VAR_NAME) are expanded
          using the previous defined environment variables in the container and
          any service environment variables. If a variable cannot be resolved,
          the reference in the input string will be unchanged. The $(VAR_NAME)
          syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
          references will never be expanded, regardless of whether the variable
          exists or not.
          Defaults to "".
          +optional
      valueFrom:
        $ref: '#/definitions/v1EnvVarSource'
        title: >-
          Source for the environment variable's value. Cannot be used if value
          is not empty.

          +optional
    description: EnvVar represents an environment variable present in a Container.
  v1EnvVarSource:
    type: object
    properties:
      fieldRef:
        $ref: '#/definitions/v1ObjectFieldSelector'
        title: >-
          Selects a field of the pod: supports metadata.name,
          metadata.namespace, metadata.labels, metadata.annotations,

          spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.

          +optional
      resourceFieldRef:
        $ref: '#/definitions/v1ResourceFieldSelector'
        title: >-
          Selects a resource of the container: only resources limits and
          requests

          (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu,
          requests.memory and requests.ephemeral-storage) are currently
          supported.

          +optional
      configMapKeyRef:
        $ref: '#/definitions/v1ConfigMapKeySelector'
        title: |-
          Selects a key of a ConfigMap.
          +optional
      secretKeyRef:
        $ref: '#/definitions/v1SecretKeySelector'
        title: |-
          Selects a key of a secret in the pod's namespace
          +optional
    description: EnvVarSource represents a source for the value of an EnvVar.
  v1ExecAction:
    type: object
    properties:
      command:
        type: array
        items:
          type: string
        title: >-
          Command is the command line to execute inside the container, the
          working directory for the

          command  is root ('/') in the container's filesystem. The command is
          simply exec'd, it is

          not run inside a shell, so traditional shell instructions ('|', etc)
          won't work. To use

          a shell, you need to explicitly call out to that shell.

          Exit status of 0 is treated as live/healthy and non-zero is unhealthy.

          +optional
    description: ExecAction describes a "run in container" action.
  v1FCVolumeSource:
    type: object
    properties:
      targetWWNs:
        type: array
        items:
          type: string
        title: |-
          Optional: FC target worldwide names (WWNs)
          +optional
      lun:
        type: integer
        format: int32
        title: |-
          Optional: FC target lun number
          +optional
      fsType:
        type: string
        title: >-
          Filesystem type to mount.

          Must be a filesystem type supported by the host operating system.

          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.

          TODO: how do we prevent errors in the filesystem from compromising the
          machine

          +optional
      readOnly:
        type: boolean
        format: boolean
        title: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
      wwids:
        type: array
        items:
          type: string
        title: >-
          Optional: FC volume world wide identifiers (wwids)

          Either wwids or combination of targetWWNs and lun must be set, but not
          both simultaneously.

          +optional
    description: |-
      Represents a Fibre Channel volume.
      Fibre Channel volumes can only be mounted as read/write once.
      Fibre Channel volumes support ownership management and SELinux relabeling.
  v1Fields:
    type: object
    properties:
      map:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1Fields'
        description: >-
          Map stores a set of fields in a data structure like a Trie.


          Each key is either a '.' representing the field itself, and will
          always map to an empty set,

          or a string representing a sub-field or item. The string will follow
          one of these four formats:

          'f:<name>', where <name> is the name of a field in a struct, or key in
          a map

          'v:<value>', where <value> is the exact json formatted value of a list
          item

          'i:<index>', where <index> is position of a item in a list

          'k:<keys>', where <keys> is a map of  a list item's key fields to
          their unique values

          If a key maps to an empty Fields value, the field that key represents
          is part of the set.


          The exact format is defined in
          k8s.io/apiserver/pkg/endpoints/handlers/fieldmanager/internal
    title: >-
      Fields stores a set of fields in a data structure like a Trie.

      To understand how this is used, see:
      https://github.com/kubernetes-sigs/structured-merge-diff
  v1FlexVolumeSource:
    type: object
    properties:
      driver:
        type: string
        description: Driver is the name of the driver to use for this volume.
      fsType:
        type: string
        title: >-
          Filesystem type to mount.

          Must be a filesystem type supported by the host operating system.

          Ex. "ext4", "xfs", "ntfs". The default filesystem depends on
          FlexVolume script.

          +optional
      secretRef:
        $ref: '#/definitions/v1LocalObjectReference'
        title: |-
          Optional: SecretRef is reference to the secret object containing
          sensitive information to pass to the plugin scripts. This may be
          empty if no secret object is specified. If the secret object
          contains more than one secret, all secrets are passed to the plugin
          scripts.
          +optional
      readOnly:
        type: boolean
        format: boolean
        title: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
      options:
        type: object
        additionalProperties:
          type: string
        title: |-
          Optional: Extra command options if any.
          +optional
    description: |-
      FlexVolume represents a generic volume resource that is
      provisioned/attached using an exec based plugin.
  v1FlockerVolumeSource:
    type: object
    properties:
      datasetName:
        type: string
        title: >-
          Name of the dataset stored as metadata -> name on the dataset for
          Flocker

          should be considered as deprecated

          +optional
      datasetUUID:
        type: string
        title: |-
          UUID of the dataset. This is unique identifier of a Flocker dataset
          +optional
    description: |-
      Represents a Flocker volume mounted by the Flocker agent.
      One and only one of datasetName and datasetUUID should be set.
      Flocker volumes do not support ownership management or SELinux relabeling.
  v1GCEPersistentDiskVolumeSource:
    type: object
    properties:
      pdName:
        type: string
        title: >-
          Unique name of the PD resource in GCE. Used to identify the disk in
          GCE.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
      fsType:
        type: string
        title: >-
          Filesystem type of the volume that you want to mount.

          Tip: Ensure that the filesystem type is supported by the host
          operating system.

          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

          TODO: how do we prevent errors in the filesystem from compromising the
          machine

          +optional
      partition:
        type: integer
        format: int32
        title: >-
          The partition in the volume that you want to mount.

          If omitted, the default is to mount by volume name.

          Examples: For volume /dev/sda1, you specify the partition as "1".

          Similarly, the volume partition for /dev/sda is "0" (or you can leave
          the property empty).

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

          +optional
      readOnly:
        type: boolean
        format: boolean
        title: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.

          Defaults to false.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

          +optional
    description: |-
      Represents a Persistent Disk resource in Google Compute Engine.

      A GCE PD must exist before mounting to a container. The disk must
      also be in the same GCE project and zone as the kubelet. A GCE PD
      can only be mounted as read/write once or read-only many times. GCE
      PDs support ownership management and SELinux relabeling.
  v1GitRepoVolumeSource:
    type: object
    properties:
      repository:
        type: string
        title: Repository URL
      revision:
        type: string
        title: |-
          Commit hash for the specified revision.
          +optional
      directory:
        type: string
        title: >-
          Target directory name.

          Must not contain or start with '..'.  If '.' is supplied, the volume
          directory will be the

          git repository.  Otherwise, if specified, the volume will contain the
          git repository in

          the subdirectory with the given name.

          +optional
    description: >-
      Represents a volume that is populated with the contents of a git
      repository.

      Git repo volumes do not support ownership management.

      Git repo volumes support SELinux relabeling.


      DEPRECATED: GitRepo is deprecated. To provision a container with a git
      repo, mount an

      EmptyDir into an InitContainer that clones the repo using git, then mount
      the EmptyDir

      into the Pod's container.
  v1GlusterfsVolumeSource:
    type: object
    properties:
      endpoints:
        type: string
        title: >-
          EndpointsName is the endpoint name that details Glusterfs topology.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
      path:
        type: string
        title: >-
          Path is the Glusterfs volume path.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
      readOnly:
        type: boolean
        format: boolean
        title: >-
          ReadOnly here will force the Glusterfs volume to be mounted with
          read-only permissions.

          Defaults to false.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod

          +optional
    description: >-
      Represents a Glusterfs mount that lasts the lifetime of a pod.

      Glusterfs volumes do not support ownership management or SELinux
      relabeling.
  v1HTTPGetAction:
    type: object
    properties:
      path:
        type: string
        title: |-
          Path to access on the HTTP server.
          +optional
      port:
        $ref: '#/definitions/intstrIntOrString'
        description: |-
          Name or number of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
      host:
        type: string
        title: >-
          Host name to connect to, defaults to the pod IP. You probably want to
          set

          "Host" in httpHeaders instead.

          +optional
      scheme:
        type: string
        title: |-
          Scheme to use for connecting to the host.
          Defaults to HTTP.
          +optional
      httpHeaders:
        type: array
        items:
          $ref: '#/definitions/v1HTTPHeader'
        title: |-
          Custom headers to set in the request. HTTP allows repeated headers.
          +optional
    description: HTTPGetAction describes an action based on HTTP Get requests.
  v1HTTPHeader:
    type: object
    properties:
      name:
        type: string
        title: The header field name
      value:
        type: string
        title: The header field value
    title: HTTPHeader describes a custom header to be used in HTTP probes
  v1Handler:
    type: object
    properties:
      exec:
        $ref: '#/definitions/v1ExecAction'
        title: |-
          One and only one of the following should be specified.
          Exec specifies the action to take.
          +optional
      httpGet:
        $ref: '#/definitions/v1HTTPGetAction'
        title: |-
          HTTPGet specifies the http request to perform.
          +optional
      tcpSocket:
        $ref: '#/definitions/v1TCPSocketAction'
        title: |-
          TCPSocket specifies an action involving a TCP port.
          TCP hooks not yet supported
          TODO: implement a realistic TCP lifecycle hook
          +optional
    description: |-
      Handler defines a specific action that should be taken
      TODO: pass structured data to these actions, and document that data here.
  v1HostAlias:
    type: object
    properties:
      ip:
        type: string
        description: IP address of the host file entry.
      hostnames:
        type: array
        items:
          type: string
        description: Hostnames for the above IP address.
    description: >-
      HostAlias holds the mapping between IP and hostnames that will be injected
      as an entry in the

      pod's hosts file.
  v1HostPathVolumeSource:
    type: object
    properties:
      path:
        type: string
        title: >-
          Path of the directory on the host.

          If the path is a symlink, it will follow the link to the real path.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath
      type:
        type: string
        title: >-
          Type for HostPath Volume

          Defaults to ""

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath

          +optional
    description: >-
      Represents a host path mapped into a pod.

      Host path volumes do not support ownership management or SELinux
      relabeling.
  v1ISCSIVolumeSource:
    type: object
    properties:
      targetPortal:
        type: string
        description: >-
          iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the
          port

          is other than default (typically TCP ports 860 and 3260).
      iqn:
        type: string
        description: Target iSCSI Qualified Name.
      lun:
        type: integer
        format: int32
        description: iSCSI Target Lun number.
      iscsiInterface:
        type: string
        title: |-
          iSCSI Interface Name that uses an iSCSI transport.
          Defaults to 'default' (tcp).
          +optional
      fsType:
        type: string
        title: >-
          Filesystem type of the volume that you want to mount.

          Tip: Ensure that the filesystem type is supported by the host
          operating system.

          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.

          More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi

          TODO: how do we prevent errors in the filesystem from compromising the
          machine

          +optional
      readOnly:
        type: boolean
        format: boolean
        title: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          +optional
      portals:
        type: array
        items:
          type: string
        title: >-
          iSCSI Target Portal List. The portal is either an IP or ip_addr:port
          if the port

          is other than default (typically TCP ports 860 and 3260).

          +optional
      chapAuthDiscovery:
        type: boolean
        format: boolean
        title: |-
          whether support iSCSI Discovery CHAP authentication
          +optional
      chapAuthSession:
        type: boolean
        format: boolean
        title: |-
          whether support iSCSI Session CHAP authentication
          +optional
      secretRef:
        $ref: '#/definitions/v1LocalObjectReference'
        title: |-
          CHAP Secret for iSCSI target and initiator authentication
          +optional
      initiatorName:
        type: string
        title: >-
          Custom iSCSI Initiator Name.

          If initiatorName is specified with iscsiInterface simultaneously, new
          iSCSI interface

          <target portal>:<volume name> will be created for the connection.

          +optional
    description: |-
      Represents an ISCSI disk.
      ISCSI volumes can only be mounted as read/write once.
      ISCSI volumes support ownership management and SELinux relabeling.
  v1Initializer:
    type: object
    properties:
      name:
        type: string
        description: name of the process that is responsible for initializing this object.
    description: >-
      Initializer is information about an initializer that has not yet
      completed.
  v1Initializers:
    type: object
    properties:
      pending:
        type: array
        items:
          $ref: '#/definitions/v1Initializer'
        title: >-
          Pending is a list of initializers that must execute in order before
          this object is visible.

          When the last pending initializer is removed, and no failing result is
          set, the initializers

          struct will be set to nil and the object is considered as initialized
          and visible to all

          clients.

          +patchMergeKey=name

          +patchStrategy=merge
      result:
        $ref: '#/definitions/v1Status'
        description: >-
          If result is set with the Failure field, the object will be persisted
          to storage and then deleted,

          ensuring that other clients can observe the deletion.
    description: Initializers tracks the progress of initialization.
  v1Job:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1JobSpec'
        title: >-
          Specification of the desired behavior of a job.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      status:
        $ref: '#/definitions/v1JobStatus'
        title: >-
          Current status of a job.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    description: Job represents the configuration of a single job.
  v1JobCondition:
    type: object
    properties:
      type:
        type: string
        description: 'Type of job condition, Complete or Failed.'
      status:
        type: string
        description: 'Status of the condition, one of True, False, Unknown.'
      lastProbeTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time the condition was checked.
          +optional
      lastTransitionTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time the condition transit from one status to another.
          +optional
      reason:
        type: string
        title: |-
          (brief) reason for the condition's last transition.
          +optional
      message:
        type: string
        title: |-
          Human readable message indicating details about last transition.
          +optional
    description: JobCondition describes current state of a job.
  v1JobSpec:
    type: object
    properties:
      parallelism:
        type: integer
        format: int32
        title: >-
          Specifies the maximum desired number of pods the job should

          run at any given time. The actual number of pods running in steady
          state will

          be less than this number when ((.spec.completions -
          .status.successful) < .spec.parallelism),

          i.e. when the work left to do is less than max parallelism.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/

          +optional
      completions:
        type: integer
        format: int32
        title: >-
          Specifies the desired number of successfully finished pods the

          job should be run with.  Setting to nil means that the success of any

          pod signals the success of all pods, and allows parallelism to have
          any positive

          value.  Setting to 1 means that parallelism is limited to 1 and the
          success of that

          pod signals the success of the job.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/

          +optional
      activeDeadlineSeconds:
        type: string
        format: int64
        title: >-
          Specifies the duration in seconds relative to the startTime that the
          job may be active

          before the system tries to terminate it; value must be positive
          integer

          +optional
      backoffLimit:
        type: integer
        format: int32
        title: |-
          Specifies the number of retries before marking this job failed.
          Defaults to 6
          +optional
      selector:
        $ref: '#/definitions/v1LabelSelector'
        title: >-
          A label query over pods that should match the pod count.

          Normally, the system sets this field for you.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors

          +optional
      manualSelector:
        type: boolean
        format: boolean
        title: >-
          manualSelector controls generation of pod labels and pod selectors.

          Leave `manualSelector` unset unless you are certain what you are
          doing.

          When false or unset, the system pick labels unique to this job

          and appends those labels to the pod template.  When true,

          the user is responsible for picking unique labels and specifying

          the selector.  Failure to pick a unique label may cause this

          and other jobs to not function correctly.  However, You may see

          `manualSelector=true` in jobs that were created with the old
          `extensions/v1beta1`

          API.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector

          +optional
      template:
        $ref: '#/definitions/v1PodTemplateSpec'
        title: >-
          Describes the pod that will be created when executing a job.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
      ttlSecondsAfterFinished:
        type: integer
        format: int32
        title: >-
          ttlSecondsAfterFinished limits the lifetime of a Job that has finished

          execution (either Complete or Failed). If this field is set,

          ttlSecondsAfterFinished after the Job finishes, it is eligible to be

          automatically deleted. When the Job is being deleted, its lifecycle

          guarantees (e.g. finalizers) will be honored. If this field is unset,

          the Job won't be automatically deleted. If this field is set to zero,

          the Job becomes eligible to be deleted immediately after it finishes.

          This field is alpha-level and is only honored by servers that enable
          the

          TTLAfterFinished feature.

          +optional
    description: JobSpec describes how the job execution will look like.
  v1JobStatus:
    type: object
    properties:
      conditions:
        type: array
        items:
          $ref: '#/definitions/v1JobCondition'
        title: >-
          The latest available observations of an object's current state.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/

          +optional

          +patchMergeKey=type

          +patchStrategy=merge
      startTime:
        $ref: '#/definitions/v1Time'
        title: >-
          Represents time when the job was acknowledged by the job controller.

          It is not guaranteed to be set in happens-before order across separate
          operations.

          It is represented in RFC3339 form and is in UTC.

          +optional
      completionTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Represents time when the job was completed. It is not guaranteed to
          be set in happens-before order across separate operations.
          It is represented in RFC3339 form and is in UTC.
          +optional
      active:
        type: integer
        format: int32
        title: |-
          The number of actively running pods.
          +optional
      succeeded:
        type: integer
        format: int32
        title: |-
          The number of pods which reached phase Succeeded.
          +optional
      failed:
        type: integer
        format: int32
        title: |-
          The number of pods which reached phase Failed.
          +optional
    description: JobStatus represents the current state of a Job.
  v1KeyToPath:
    type: object
    properties:
      key:
        type: string
        description: The key to project.
      path:
        type: string
        description: |-
          The relative path of the file to map the key to.
          May not be an absolute path.
          May not contain the path element '..'.
          May not start with the string '..'.
      mode:
        type: integer
        format: int32
        title: |-
          Optional: mode bits to use on this file, must be a value between 0
          and 0777. If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
    description: Maps a string key to a path within a volume.
  v1Lifecycle:
    type: object
    properties:
      postStart:
        $ref: '#/definitions/v1Handler'
        title: >-
          PostStart is called immediately after a container is created. If the
          handler fails,

          the container is terminated and restarted according to its restart
          policy.

          Other management of the container blocks until the hook completes.

          More info:
          https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

          +optional
      preStop:
        $ref: '#/definitions/v1Handler'
        title: >-
          PreStop is called immediately before a container is terminated due to
          an

          API request or management event such as liveness probe failure,

          preemption, resource contention, etc. The handler is not called if the

          container crashes or exits. The reason for termination is passed to
          the

          handler. The Pod's termination grace period countdown begins before
          the

          PreStop hooked is executed. Regardless of the outcome of the handler,
          the

          container will eventually terminate within the Pod's termination grace

          period. Other management of the container blocks until the hook
          completes

          or until the termination grace period is reached.

          More info:
          https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

          +optional
    description: >-
      Lifecycle describes actions that the management system should take in
      response to container lifecycle

      events. For the PostStart and PreStop lifecycle handlers, management of
      the container blocks

      until the action is complete, unless the container process fails, in which
      case the handler is aborted.
  v1ListMeta:
    type: object
    properties:
      selfLink:
        type: string
        title: |-
          selfLink is a URL representing this object.
          Populated by the system.
          Read-only.
          +optional
      resourceVersion:
        type: string
        title: >-
          String that identifies the server's internal version of this object
          that

          can be used by clients to determine when objects have changed.

          Value must be treated as opaque by clients and passed unmodified back
          to the server.

          Populated by the system.

          Read-only.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency

          +optional
      continue:
        type: string
        description: >-
          continue may be set if the user set a limit on the number of items
          returned, and indicates that

          the server has more data available. The value is opaque and may be
          used to issue another request

          to the endpoint that served this list to retrieve the next set of
          available objects. Continuing a

          consistent list may not be possible if the server configuration has
          changed or more than a few

          minutes have passed. The resourceVersion field returned when using
          this continue value will be

          identical to the value in the first response, unless you have received
          this token from an error

          message.
    description: >-
      ListMeta describes metadata that synthetic resources must have, including
      lists and

      various status objects. A resource may have only one of {ObjectMeta,
      ListMeta}.
  v1LoadBalancerIngress:
    type: object
    properties:
      ip:
        type: string
        title: |-
          IP is set for load-balancer ingress points that are IP based
          (typically GCE or OpenStack load-balancers)
          +optional
      hostname:
        type: string
        title: |-
          Hostname is set for load-balancer ingress points that are DNS based
          (typically AWS load-balancers)
          +optional
    description: >-
      LoadBalancerIngress represents the status of a load-balancer ingress
      point:

      traffic intended for the service should be sent to an ingress point.
  v1LoadBalancerStatus:
    type: object
    properties:
      ingress:
        type: array
        items:
          $ref: '#/definitions/v1LoadBalancerIngress'
        title: >-
          Ingress is a list containing ingress points for the load-balancer.

          Traffic intended for the service should be sent to these ingress
          points.

          +optional
    description: LoadBalancerStatus represents the status of a load-balancer.
  v1LocalObjectReference:
    type: object
    properties:
      name:
        type: string
        title: >-
          Name of the referent.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

          TODO: Add other useful fields. apiVersion, kind, uid?

          +optional
    description: |-
      LocalObjectReference contains enough information to let you locate the
      referenced object inside the same namespace.
  v1ManagedFieldsEntry:
    type: object
    properties:
      manager:
        type: string
        description: Manager is an identifier of the workflow managing these fields.
      operation:
        type: string
        description: >-
          Operation is the type of operation which lead to this
          ManagedFieldsEntry being created.

          The only valid values for this field are 'Apply' and 'Update'.
      apiVersion:
        type: string
        description: |-
          APIVersion defines the version of this resource that this field set
          applies to. The format is "group/version" just like the top-level
          APIVersion field. It is necessary to track the version of a field
          set because it cannot be automatically converted.
      time:
        $ref: '#/definitions/v1Time'
        title: >-
          Time is timestamp of when these fields were set. It should always be
          empty if Operation is 'Apply'

          +optional
      fields:
        $ref: '#/definitions/v1Fields'
        title: |-
          Fields identifies a set of fields.
          +optional
    description: >-
      ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of
      the resource

      that the fieldset applies to.
  v1NFSVolumeSource:
    type: object
    properties:
      server:
        type: string
        title: |-
          Server is the hostname or IP address of the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
      path:
        type: string
        title: |-
          Path that is exported by the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
      readOnly:
        type: boolean
        format: boolean
        title: |-
          ReadOnly here will force
          the NFS export to be mounted with read-only permissions.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
    description: |-
      Represents an NFS mount that lasts the lifetime of a pod.
      NFS volumes do not support ownership management or SELinux relabeling.
  v1Namespace:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1NamespaceSpec'
        title: >-
          Spec defines the behavior of the Namespace.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      status:
        $ref: '#/definitions/v1NamespaceStatus'
        title: >-
          Status describes the current status of a Namespace.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    description: |-
      Namespace provides a scope for Names.
      Use of multiple namespaces is optional.
  v1NamespaceSpec:
    type: object
    properties:
      finalizers:
        type: array
        items:
          type: string
        title: >-
          Finalizers is an opaque list of values that must be empty to
          permanently remove object from storage.

          More info:
          https://kubernetes.io/docs/tasks/administer-cluster/namespaces/

          +optional
    description: NamespaceSpec describes the attributes on a Namespace.
  v1NamespaceStatus:
    type: object
    properties:
      phase:
        type: string
        title: >-
          Phase is the current lifecycle phase of the namespace.

          More info:
          https://kubernetes.io/docs/tasks/administer-cluster/namespaces/

          +optional
    description: NamespaceStatus is information about the current status of a Namespace.
  v1Node:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1NodeSpec'
        title: >-
          Spec defines the behavior of a node.

          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      status:
        $ref: '#/definitions/v1NodeStatus'
        title: >-
          Most recently observed status of the node.

          Populated by the system.

          Read-only.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    description: |-
      Node is a worker node in Kubernetes.
      Each node will have a unique identifier in the cache (i.e. in etcd).
  v1NodeAddress:
    type: object
    properties:
      type:
        type: string
        description: 'Node address type, one of Hostname, ExternalIP or InternalIP.'
      address:
        type: string
        description: The node address.
    description: NodeAddress contains information for the node's address.
  v1NodeAffinity:
    type: object
    properties:
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/v1NodeSelector'
        title: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to an update), the system
          may or may not try to eventually evict the pod from its node.
          +optional
      preferredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/v1PreferredSchedulingTerm'
        title: >-
          The scheduler will prefer to schedule pods to nodes that satisfy

          the affinity expressions specified by this field, but it may choose

          a node that violates one or more of the expressions. The node that is

          most preferred is the one with the greatest sum of weights, i.e.

          for each node that meets all of the scheduling requirements (resource

          request, requiredDuringScheduling affinity expressions, etc.),

          compute a sum by iterating through the elements of this field and
          adding

          "weight" to the sum if the node matches the corresponding
          matchExpressions; the

          node(s) with the highest sum are the most preferred.

          +optional
    description: Node affinity is a group of node affinity scheduling rules.
  v1NodeCondition:
    type: object
    properties:
      type:
        type: string
        description: Type of node condition.
      status:
        type: string
        description: 'Status of the condition, one of True, False, Unknown.'
      lastHeartbeatTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time we got an update on a given condition.
          +optional
      lastTransitionTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time the condition transit from one status to another.
          +optional
      reason:
        type: string
        title: |-
          (brief) reason for the condition's last transition.
          +optional
      message:
        type: string
        title: |-
          Human readable message indicating details about last transition.
          +optional
    description: NodeCondition contains condition information for a node.
  v1NodeConfigSource:
    type: object
    properties:
      configMap:
        $ref: '#/definitions/v1ConfigMapNodeConfigSource'
        title: ConfigMap is a reference to a Node's ConfigMap
    description: >-
      NodeConfigSource specifies a source of node configuration. Exactly one
      subfield (excluding metadata) must be non-nil.
  v1NodeConfigStatus:
    type: object
    properties:
      assigned:
        $ref: '#/definitions/v1NodeConfigSource'
        title: >-
          Assigned reports the checkpointed config the node will try to use.

          When Node.Spec.ConfigSource is updated, the node checkpoints the
          associated

          config payload to local disk, along with a record indicating intended

          config. The node refers to this record to choose its config
          checkpoint, and

          reports this record in Assigned. Assigned only updates in the status
          after

          the record has been checkpointed to disk. When the Kubelet is
          restarted,

          it tries to make the Assigned config the Active config by loading and

          validating the checkpointed payload identified by Assigned.

          +optional
      active:
        $ref: '#/definitions/v1NodeConfigSource'
        title: >-
          Active reports the checkpointed config the node is actively using.

          Active will represent either the current version of the Assigned
          config,

          or the current LastKnownGood config, depending on whether attempting
          to use the

          Assigned config results in an error.

          +optional
      lastKnownGood:
        $ref: '#/definitions/v1NodeConfigSource'
        title: >-
          LastKnownGood reports the checkpointed config the node will fall back
          to

          when it encounters an error attempting to use the Assigned config.

          The Assigned config becomes the LastKnownGood config when the node
          determines

          that the Assigned config is stable and correct.

          This is currently implemented as a 10-minute soak period starting when
          the local

          record of Assigned config is updated. If the Assigned config is Active
          at the end

          of this period, it becomes the LastKnownGood. Note that if
          Spec.ConfigSource is

          reset to nil (use local defaults), the LastKnownGood is also
          immediately reset to nil,

          because the local default config is always assumed good.

          You should not make assumptions about the node's method of determining
          config stability

          and correctness, as this may change or become configurable in the
          future.

          +optional
      error:
        type: string
        title: >-
          Error describes any problems reconciling the Spec.ConfigSource to the
          Active config.

          Errors may occur, for example, attempting to checkpoint
          Spec.ConfigSource to the local Assigned

          record, attempting to checkpoint the payload associated with
          Spec.ConfigSource, attempting

          to load or validate the Assigned config, etc.

          Errors may occur at different points while syncing config. Earlier
          errors (e.g. download or

          checkpointing errors) will not result in a rollback to LastKnownGood,
          and may resolve across

          Kubelet retries. Later errors (e.g. loading or validating a
          checkpointed config) will result in

          a rollback to LastKnownGood. In the latter case, it is usually
          possible to resolve the error

          by fixing the config assigned in Spec.ConfigSource.

          You can find additional information for debugging by searching the
          error message in the Kubelet log.

          Error is a human-readable description of the error state; machines can
          check whether or not Error

          is empty, but should not rely on the stability of the Error text
          across Kubelet versions.

          +optional
    description: >-
      NodeConfigStatus describes the status of the config assigned by
      Node.Spec.ConfigSource.
  v1NodeDaemonEndpoints:
    type: object
    properties:
      kubeletEndpoint:
        $ref: '#/definitions/v1DaemonEndpoint'
        title: |-
          Endpoint on which Kubelet is listening.
          +optional
    description: NodeDaemonEndpoints lists ports opened by daemons running on the Node.
  v1NodeSelector:
    type: object
    properties:
      nodeSelectorTerms:
        type: array
        items:
          $ref: '#/definitions/v1NodeSelectorTerm'
        description: Required. A list of node selector terms. The terms are ORed.
    description: >-
      A node selector represents the union of the results of one or more label
      queries

      over a set of nodes; that is, it represents the OR of the selectors
      represented

      by the node selector terms.
  v1NodeSelectorRequirement:
    type: object
    properties:
      key:
        type: string
        description: The label key that the selector applies to.
      operator:
        type: string
        description: |-
          Represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
      values:
        type: array
        items:
          type: string
        title: >-
          An array of string values. If the operator is In or NotIn,

          the values array must be non-empty. If the operator is Exists or
          DoesNotExist,

          the values array must be empty. If the operator is Gt or Lt, the
          values

          array must have a single element, which will be interpreted as an
          integer.

          This array is replaced during a strategic merge patch.

          +optional
    description: >-
      A node selector requirement is a selector that contains values, a key, and
      an operator

      that relates the key and values.
  v1NodeSelectorTerm:
    type: object
    properties:
      matchExpressions:
        type: array
        items:
          $ref: '#/definitions/v1NodeSelectorRequirement'
        title: |-
          A list of node selector requirements by node's labels.
          +optional
      matchFields:
        type: array
        items:
          $ref: '#/definitions/v1NodeSelectorRequirement'
        title: |-
          A list of node selector requirements by node's fields.
          +optional
    description: |-
      A null or empty node selector term matches no objects. The requirements of
      them are ANDed.
      The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
  v1NodeSpec:
    type: object
    properties:
      podCIDR:
        type: string
        title: |-
          PodCIDR represents the pod IP range assigned to the node.
          +optional
      providerID:
        type: string
        title: >-
          ID of the node assigned by the cloud provider in the format:
          <ProviderName>://<ProviderSpecificNodeID>

          +optional
      unschedulable:
        type: boolean
        format: boolean
        title: >-
          Unschedulable controls node schedulability of new pods. By default,
          node is schedulable.

          More info:
          https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration

          +optional
      taints:
        type: array
        items:
          $ref: '#/definitions/v1Taint'
        title: |-
          If specified, the node's taints.
          +optional
      configSource:
        $ref: '#/definitions/v1NodeConfigSource'
        title: >-
          If specified, the source to get node configuration from

          The DynamicKubeletConfig feature gate must be enabled for the Kubelet
          to use this field

          +optional
      externalID:
        type: string
        title: >-
          Deprecated. Not all kubelets will set this field. Remove field after
          1.13.

          see: https://issues.k8s.io/61966

          +optional
    description: NodeSpec describes the attributes that a node is created with.
  v1NodeStatus:
    type: object
    properties:
      capacity:
        type: object
        additionalProperties:
          $ref: '#/definitions/resourceQuantity'
        title: >-
          Capacity represents the total resources of a node.

          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity

          +optional
      allocatable:
        type: object
        additionalProperties:
          $ref: '#/definitions/resourceQuantity'
        title: >-
          Allocatable represents the resources of a node that are available for
          scheduling.

          Defaults to Capacity.

          +optional
      phase:
        type: string
        title: |-
          NodePhase is the recently observed lifecycle phase of the node.
          More info: https://kubernetes.io/docs/concepts/nodes/node/#phase
          The field is never populated, and now is deprecated.
          +optional
      conditions:
        type: array
        items:
          $ref: '#/definitions/v1NodeCondition'
        title: |-
          Conditions is an array of current observed node conditions.
          More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
      addresses:
        type: array
        items:
          $ref: '#/definitions/v1NodeAddress'
        title: |-
          List of addresses reachable to the node.
          Queried from cloud provider, if available.
          More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
      daemonEndpoints:
        $ref: '#/definitions/v1NodeDaemonEndpoints'
        title: |-
          Endpoints of daemons running on the Node.
          +optional
      nodeInfo:
        $ref: '#/definitions/v1NodeSystemInfo'
        title: |-
          Set of ids/uuids to uniquely identify the node.
          More info: https://kubernetes.io/docs/concepts/nodes/node/#info
          +optional
      images:
        type: array
        items:
          $ref: '#/definitions/v1ContainerImage'
        title: |-
          List of container images on this node
          +optional
      volumesInUse:
        type: array
        items:
          type: string
        title: |-
          List of attachable volumes in use (mounted) by the node.
          +optional
      volumesAttached:
        type: array
        items:
          $ref: '#/definitions/v1AttachedVolume'
        title: |-
          List of volumes that are attached to the node.
          +optional
      config:
        $ref: '#/definitions/v1NodeConfigStatus'
        title: >-
          Status of the config assigned to the node via the dynamic Kubelet
          config feature.

          +optional
    description: NodeStatus is information about the current status of a node.
  v1NodeSystemInfo:
    type: object
    properties:
      machineID:
        type: string
        title: |-
          MachineID reported by the node. For unique machine identification
          in the cluster this field is preferred. Learn more from man(5)
          machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
      systemUUID:
        type: string
        title: >-
          SystemUUID reported by the node. For unique machine identification

          MachineID is preferred. This field is specific to Red Hat hosts

          https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
      bootID:
        type: string
        description: Boot ID reported by the node.
      kernelVersion:
        type: string
        description: >-
          Kernel Version reported by the node from 'uname -r' (e.g.
          3.16.0-0.bpo.4-amd64).
      osImage:
        type: string
        description: >-
          OS Image reported by the node from /etc/os-release (e.g. Debian
          GNU/Linux 7 (wheezy)).
      containerRuntimeVersion:
        type: string
        description: >-
          ContainerRuntime Version reported by the node through runtime remote
          API (e.g. docker://1.5.0).
      kubeletVersion:
        type: string
        description: Kubelet Version reported by the node.
      kubeProxyVersion:
        type: string
        description: KubeProxy Version reported by the node.
      operatingSystem:
        type: string
        title: The Operating System reported by the node
      architecture:
        type: string
        title: The Architecture reported by the node
    description: NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
  v1ObjectFieldSelector:
    type: object
    properties:
      apiVersion:
        type: string
        title: >-
          Version of the schema the FieldPath is written in terms of, defaults
          to "v1".

          +optional
      fieldPath:
        type: string
        description: Path of the field to select in the specified API version.
    description: ObjectFieldSelector selects an APIVersioned field of an object.
  v1ObjectReference:
    type: object
    properties:
      kind:
        type: string
        title: >-
          Kind of the referent.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds

          +optional
      namespace:
        type: string
        title: >-
          Namespace of the referent.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/

          +optional
      name:
        type: string
        title: >-
          Name of the referent.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

          +optional
      uid:
        type: string
        title: >-
          UID of the referent.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids

          +optional
      apiVersion:
        type: string
        title: |-
          API version of the referent.
          +optional
      resourceVersion:
        type: string
        title: >-
          Specific resourceVersion to which this reference is made, if any.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency

          +optional
      fieldPath:
        type: string
        title: >-
          If referring to a piece of an object instead of an entire object, this
          string

          should contain a valid JSON/Go field access statement, such as
          desiredState.manifest.containers[2].

          For example, if the object reference is to a container within a pod,
          this would take on a value like:

          "spec.containers{name}" (where "name" refers to the name of the
          container that triggered

          the event) or if no container name is specified "spec.containers[2]"
          (container with

          index 2 in this pod). This syntax is chosen only to have some
          well-defined way of

          referencing a part of an object.

          TODO: this design is not final and this field is subject to change in
          the future.

          +optional
    title: >-
      ObjectReference contains enough information to let you inspect or modify
      the referred object.

      +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
  v1OwnerReference:
    type: object
    properties:
      apiVersion:
        type: string
        description: API version of the referent.
      kind:
        type: string
        title: >-
          Kind of the referent.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
      name:
        type: string
        title: |-
          Name of the referent.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
      uid:
        type: string
        title: |-
          UID of the referent.
          More info: http://kubernetes.io/docs/user-guide/identifiers#uids
      controller:
        type: boolean
        format: boolean
        title: |-
          If true, this reference points to the managing controller.
          +optional
      blockOwnerDeletion:
        type: boolean
        format: boolean
        title: |-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed.
          Defaults to false.
          To set this field, a user needs "delete" permission of the owner,
          otherwise 422 (Unprocessable Entity) will be returned.
          +optional
    description: >-
      OwnerReference contains enough information to let you identify an owning

      object. An owning object must be in the same namespace as the dependent,
      or

      be cluster-scoped, so there is no namespace field.
  v1PersistentVolumeClaim:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1PersistentVolumeClaimSpec'
        title: >-
          Spec defines the desired characteristics of a volume requested by a
          pod author.

          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

          +optional
      status:
        $ref: '#/definitions/v1PersistentVolumeClaimStatus'
        title: >-
          Status represents the current information/status of a persistent
          volume claim.

          Read-only.

          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

          +optional
    title: >-
      PersistentVolumeClaim is a user's request for and claim to a persistent
      volume
  v1PersistentVolumeClaimCondition:
    type: object
    properties:
      type:
        type: string
      status:
        type: string
      lastProbeTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time we probed the condition.
          +optional
      lastTransitionTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time the condition transitioned from one status to another.
          +optional
      reason:
        type: string
        title: >-
          Unique, this should be a short, machine understandable string that
          gives the reason

          for condition's last transition. If it reports "ResizeStarted" that
          means the underlying

          persistent volume is being resized.

          +optional
      message:
        type: string
        title: |-
          Human-readable message indicating details about last transition.
          +optional
    title: PersistentVolumeClaimCondition contails details about state of pvc
  v1PersistentVolumeClaimSpec:
    type: object
    properties:
      accessModes:
        type: array
        items:
          type: string
        title: >-
          AccessModes contains the desired access modes the volume should have.

          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1

          +optional
      selector:
        $ref: '#/definitions/v1LabelSelector'
        title: |-
          A label query over volumes to consider for binding.
          +optional
      resources:
        $ref: '#/definitions/v1ResourceRequirements'
        title: >-
          Resources represents the minimum resources the volume should have.

          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

          +optional
      volumeName:
        type: string
        title: >-
          VolumeName is the binding reference to the PersistentVolume backing
          this claim.

          +optional
      storageClassName:
        type: string
        title: >-
          Name of the StorageClass required by the claim.

          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1

          +optional
      volumeMode:
        type: string
        title: |-
          volumeMode defines what type of volume is required by the claim.
          Value of Filesystem is implied when not included in claim spec.
          This is a beta feature.
          +optional
      dataSource:
        $ref: '#/definitions/v1TypedLocalObjectReference'
        title: >-
          This field requires the VolumeSnapshotDataSource alpha feature gate to
          be

          enabled and currently VolumeSnapshot is the only supported data
          source.

          If the provisioner can support VolumeSnapshot data source, it will
          create

          a new volume and data will be restored to the volume at the same time.

          If the provisioner does not support VolumeSnapshot data source, volume
          will

          not be created and the failure will be reported as an event.

          In the future, we plan to support more data source types and the
          behavior

          of the provisioner may change.

          +optional
    title: >-
      PersistentVolumeClaimSpec describes the common attributes of storage
      devices

      and allows a Source for provider-specific attributes
  v1PersistentVolumeClaimStatus:
    type: object
    properties:
      phase:
        type: string
        title: |-
          Phase represents the current phase of PersistentVolumeClaim.
          +optional
      accessModes:
        type: array
        items:
          type: string
        title: >-
          AccessModes contains the actual access modes the volume backing the
          PVC has.

          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1

          +optional
      capacity:
        type: object
        additionalProperties:
          $ref: '#/definitions/resourceQuantity'
        title: |-
          Represents the actual resources of the underlying volume.
          +optional
      conditions:
        type: array
        items:
          $ref: '#/definitions/v1PersistentVolumeClaimCondition'
        title: >-
          Current Condition of persistent volume claim. If underlying persistent
          volume is being

          resized then the Condition will be set to 'ResizeStarted'.

          +optional

          +patchMergeKey=type

          +patchStrategy=merge
    description: >-
      PersistentVolumeClaimStatus is the current status of a persistent volume
      claim.
  v1PersistentVolumeClaimVolumeSource:
    type: object
    properties:
      claimName:
        type: string
        title: >-
          ClaimName is the name of a PersistentVolumeClaim in the same namespace
          as the pod using this volume.

          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
      readOnly:
        type: boolean
        format: boolean
        title: |-
          Will force the ReadOnly setting in VolumeMounts.
          Default false.
          +optional
    description: >-
      PersistentVolumeClaimVolumeSource references the user's PVC in the same
      namespace.

      This volume finds the bound PV and mounts that volume for the pod. A

      PersistentVolumeClaimVolumeSource is, essentially, a wrapper around
      another

      type of volume that is owned by someone else (the system).
  v1PhotonPersistentDiskVolumeSource:
    type: object
    properties:
      pdID:
        type: string
        title: ID that identifies Photon Controller persistent disk
      fsType:
        type: string
        description: >-
          Filesystem type to mount.

          Must be a filesystem type supported by the host operating system.

          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.
    description: Represents a Photon Controller persistent disk resource.
  v1Pod:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1PodSpec'
        title: >-
          Specification of the desired behavior of the pod.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      status:
        $ref: '#/definitions/v1PodStatus'
        title: >-
          Most recently observed status of the pod.

          This data may not be up to date.

          Populated by the system.

          Read-only.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    description: >-
      Pod is a collection of containers that can run on a host. This resource is
      created

      by clients and scheduled onto hosts.
  v1PodAffinity:
    type: object
    properties:
      requiredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/v1PodAffinityTerm'
        title: >-
          If the affinity requirements specified by this field are not met at

          scheduling time, the pod will not be scheduled onto the node.

          If the affinity requirements specified by this field cease to be met

          at some point during pod execution (e.g. due to a pod label update),
          the

          system may or may not try to eventually evict the pod from its node.

          When there are multiple elements, the lists of nodes corresponding to
          each

          podAffinityTerm are intersected, i.e. all terms must be satisfied.

          +optional
      preferredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/v1WeightedPodAffinityTerm'
        title: >-
          The scheduler will prefer to schedule pods to nodes that satisfy

          the affinity expressions specified by this field, but it may choose

          a node that violates one or more of the expressions. The node that is

          most preferred is the one with the greatest sum of weights, i.e.

          for each node that meets all of the scheduling requirements (resource

          request, requiredDuringScheduling affinity expressions, etc.),

          compute a sum by iterating through the elements of this field and
          adding

          "weight" to the sum if the node has pods which matches the
          corresponding podAffinityTerm; the

          node(s) with the highest sum are the most preferred.

          +optional
    description: Pod affinity is a group of inter pod affinity scheduling rules.
  v1PodAffinityTerm:
    type: object
    properties:
      labelSelector:
        $ref: '#/definitions/v1LabelSelector'
        title: |-
          A label query over a set of resources, in this case pods.
          +optional
      namespaces:
        type: array
        items:
          type: string
        title: >-
          namespaces specifies which namespaces the labelSelector applies to
          (matches against);

          null or empty list means "this pod's namespace"

          +optional
      topologyKey:
        type: string
        description: >-
          This pod should be co-located (affinity) or not co-located
          (anti-affinity) with the pods matching

          the labelSelector in the specified namespaces, where co-located is
          defined as running on a node

          whose value of the label with key topologyKey matches that of any node
          on which any of the

          selected pods is running.

          Empty topologyKey is not allowed.
    title: |-
      Defines a set of pods (namely those matching the labelSelector
      relative to the given namespace(s)) that this pod should be
      co-located (affinity) or not co-located (anti-affinity) with,
      where co-located is defined as running on a node whose value of
      the label with key <topologyKey> matches that of any node on which
      a pod of the set of pods is running
  v1PodAntiAffinity:
    type: object
    properties:
      requiredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/v1PodAffinityTerm'
        title: >-
          If the anti-affinity requirements specified by this field are not met
          at

          scheduling time, the pod will not be scheduled onto the node.

          If the anti-affinity requirements specified by this field cease to be
          met

          at some point during pod execution (e.g. due to a pod label update),
          the

          system may or may not try to eventually evict the pod from its node.

          When there are multiple elements, the lists of nodes corresponding to
          each

          podAffinityTerm are intersected, i.e. all terms must be satisfied.

          +optional
      preferredDuringSchedulingIgnoredDuringExecution:
        type: array
        items:
          $ref: '#/definitions/v1WeightedPodAffinityTerm'
        title: >-
          The scheduler will prefer to schedule pods to nodes that satisfy

          the anti-affinity expressions specified by this field, but it may
          choose

          a node that violates one or more of the expressions. The node that is

          most preferred is the one with the greatest sum of weights, i.e.

          for each node that meets all of the scheduling requirements (resource

          request, requiredDuringScheduling anti-affinity expressions, etc.),

          compute a sum by iterating through the elements of this field and
          adding

          "weight" to the sum if the node has pods which matches the
          corresponding podAffinityTerm; the

          node(s) with the highest sum are the most preferred.

          +optional
    description: Pod anti affinity is a group of inter pod anti affinity scheduling rules.
  v1PodCondition:
    type: object
    properties:
      type:
        type: string
        title: >-
          Type is the type of the condition.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
      status:
        type: string
        title: >-
          Status is the status of the condition.

          Can be True, False, Unknown.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
      lastProbeTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time we probed the condition.
          +optional
      lastTransitionTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time the condition transitioned from one status to another.
          +optional
      reason:
        type: string
        title: >-
          Unique, one-word, CamelCase reason for the condition's last
          transition.

          +optional
      message:
        type: string
        title: |-
          Human-readable message indicating details about last transition.
          +optional
    description: PodCondition contains details for the current condition of this pod.
  v1PodDNSConfig:
    type: object
    properties:
      nameservers:
        type: array
        items:
          type: string
        title: >-
          A list of DNS name server IP addresses.

          This will be appended to the base nameservers generated from
          DNSPolicy.

          Duplicated nameservers will be removed.

          +optional
      searches:
        type: array
        items:
          type: string
        title: >-
          A list of DNS search domains for host-name lookup.

          This will be appended to the base search paths generated from
          DNSPolicy.

          Duplicated search paths will be removed.

          +optional
      options:
        type: array
        items:
          $ref: '#/definitions/v1PodDNSConfigOption'
        title: >-
          A list of DNS resolver options.

          This will be merged with the base options generated from DNSPolicy.

          Duplicated entries will be removed. Resolution options given in
          Options

          will override those that appear in the base DNSPolicy.

          +optional
    description: |-
      PodDNSConfig defines the DNS parameters of a pod in addition to
      those generated from DNSPolicy.
  v1PodDNSConfigOption:
    type: object
    properties:
      name:
        type: string
        description: Required.
      value:
        type: string
        title: +optional
    description: PodDNSConfigOption defines DNS resolver options of a pod.
  v1PodReadinessGate:
    type: object
    properties:
      conditionType:
        type: string
        description: >-
          ConditionType refers to a condition in the pod's condition list with
          matching type.
    title: PodReadinessGate contains the reference to a pod condition
  v1PodSecurityContext:
    type: object
    properties:
      seLinuxOptions:
        $ref: '#/definitions/v1SELinuxOptions'
        title: >-
          The SELinux context to be applied to all containers.

          If unspecified, the container runtime will allocate a random SELinux
          context for each

          container.  May also be set in SecurityContext.  If set in

          both SecurityContext and PodSecurityContext, the value specified in
          SecurityContext

          takes precedence for that container.

          +optional
      runAsUser:
        type: string
        format: int64
        title: >-
          The UID to run the entrypoint of the container process.

          Defaults to user specified in image metadata if unspecified.

          May also be set in SecurityContext.  If set in both SecurityContext
          and

          PodSecurityContext, the value specified in SecurityContext takes
          precedence

          for that container.

          +optional
      runAsGroup:
        type: string
        format: int64
        title: >-
          The GID to run the entrypoint of the container process.

          Uses runtime default if unset.

          May also be set in SecurityContext.  If set in both SecurityContext
          and

          PodSecurityContext, the value specified in SecurityContext takes
          precedence

          for that container.

          +optional
      runAsNonRoot:
        type: boolean
        format: boolean
        title: >-
          Indicates that the container must run as a non-root user.

          If true, the Kubelet will validate the image at runtime to ensure that
          it

          does not run as UID 0 (root) and fail to start the container if it
          does.

          If unset or false, no such validation will be performed.

          May also be set in SecurityContext.  If set in both SecurityContext
          and

          PodSecurityContext, the value specified in SecurityContext takes
          precedence.

          +optional
      supplementalGroups:
        type: array
        items:
          type: string
          format: int64
        title: >-
          A list of groups applied to the first process run in each container,
          in addition

          to the container's primary GID.  If unspecified, no groups will be
          added to

          any container.

          +optional
      fsGroup:
        type: string
        format: int64
        description: >-
          1. The owning GID will be the FSGroup

          2. The setgid bit is set (new files created in the volume will be
          owned by FSGroup)

          3. The permission bits are OR'd with rw-rw----


          If unset, the Kubelet will not modify the ownership and permissions of
          any volume.

          +optional
        title: >-
          A special supplemental group that applies to all containers in a pod.

          Some volume types allow the Kubelet to change the ownership of that
          volume

          to be owned by the pod:
      sysctls:
        type: array
        items:
          $ref: '#/definitions/v1Sysctl'
        title: >-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with
          unsupported

          sysctls (by the container runtime) might fail to launch.

          +optional
    description: >-
      PodSecurityContext holds pod-level security attributes and common
      container settings.

      Some fields are also present in container.securityContext.  Field values
      of

      container.securityContext take precedence over field values of
      PodSecurityContext.
  v1PodSpec:
    type: object
    properties:
      volumes:
        type: array
        items:
          $ref: '#/definitions/v1Volume'
        title: >-
          List of volumes that can be mounted by containers belonging to the
          pod.

          More info: https://kubernetes.io/docs/concepts/storage/volumes

          +optional

          +patchMergeKey=name

          +patchStrategy=merge,retainKeys
      initContainers:
        type: array
        items:
          $ref: '#/definitions/v1Container'
        title: >-
          List of initialization containers belonging to the pod.

          Init containers are executed in order prior to containers being
          started. If any

          init container fails, the pod is considered to have failed and is
          handled according

          to its restartPolicy. The name for an init container or normal
          container must be

          unique among all containers.

          Init containers may not have Lifecycle actions, Readiness probes, or
          Liveness probes.

          The resourceRequirements of an init container are taken into account
          during scheduling

          by finding the highest request/limit for each resource type, and then
          using the max of

          of that value or the sum of the normal containers. Limits are applied
          to init containers

          in a similar fashion.

          Init containers cannot currently be added or removed.

          Cannot be updated.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/init-containers/

          +patchMergeKey=name

          +patchStrategy=merge
      containers:
        type: array
        items:
          $ref: '#/definitions/v1Container'
        title: |-
          List of containers belonging to the pod.
          Containers cannot currently be added or removed.
          There must be at least one container in a Pod.
          Cannot be updated.
          +patchMergeKey=name
          +patchStrategy=merge
      restartPolicy:
        type: string
        title: >-
          Restart policy for all containers within the pod.

          One of Always, OnFailure, Never.

          Default to Always.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy

          +optional
      terminationGracePeriodSeconds:
        type: string
        format: int64
        title: >-
          Optional duration in seconds the pod needs to terminate gracefully.
          May be decreased in delete request.

          Value must be non-negative integer. The value zero indicates delete
          immediately.

          If this value is nil, the default grace period will be used instead.

          The grace period is the duration in seconds after the processes
          running in the pod are sent

          a termination signal and the time when the processes are forcibly
          halted with a kill signal.

          Set this value longer than the expected cleanup time for your process.

          Defaults to 30 seconds.

          +optional
      activeDeadlineSeconds:
        type: string
        format: int64
        title: >-
          Optional duration in seconds the pod may be active on the node
          relative to

          StartTime before the system will actively try to mark it failed and
          kill associated containers.

          Value must be a positive integer.

          +optional
      dnsPolicy:
        type: string
        title: >-
          Set DNS policy for the pod.

          Defaults to "ClusterFirst".

          Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default'
          or 'None'.

          DNS parameters given in DNSConfig will be merged with the policy
          selected with DNSPolicy.

          To have DNS options set along with hostNetwork, you have to specify
          DNS policy

          explicitly to 'ClusterFirstWithHostNet'.

          +optional
      nodeSelector:
        type: object
        additionalProperties:
          type: string
        title: >-
          NodeSelector is a selector which must be true for the pod to fit on a
          node.

          Selector which must match a node's labels for the pod to be scheduled
          on that node.

          More info:
          https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

          +optional
      serviceAccountName:
        type: string
        title: >-
          ServiceAccountName is the name of the ServiceAccount to use to run
          this pod.

          More info:
          https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/

          +optional
      serviceAccount:
        type: string
        title: >-
          DeprecatedServiceAccount is a depreciated alias for
          ServiceAccountName.

          Deprecated: Use serviceAccountName instead.

          +k8s:conversion-gen=false

          +optional
      automountServiceAccountToken:
        type: boolean
        format: boolean
        title: >-
          AutomountServiceAccountToken indicates whether a service account token
          should be automatically mounted.

          +optional
      nodeName:
        type: string
        title: >-
          NodeName is a request to schedule this pod onto a specific node. If it
          is non-empty,

          the scheduler simply schedules this pod onto that node, assuming that
          it fits resource

          requirements.

          +optional
      hostNetwork:
        type: boolean
        format: boolean
        title: >-
          Host networking requested for this pod. Use the host's network
          namespace.

          If this option is set, the ports that will be used must be specified.

          Default to false.

          +k8s:conversion-gen=false

          +optional
      hostPID:
        type: boolean
        format: boolean
        title: |-
          Use the host's pid namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
      hostIPC:
        type: boolean
        format: boolean
        title: |-
          Use the host's ipc namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
      shareProcessNamespace:
        type: boolean
        format: boolean
        title: >-
          Share a single process namespace between all of the containers in a
          pod.

          When this is set containers will be able to view and signal processes
          from other containers

          in the same pod, and the first process in each container will not be
          assigned PID 1.

          HostPID and ShareProcessNamespace cannot both be set.

          Optional: Default to false.

          This field is beta-level and may be disabled with the
          PodShareProcessNamespace feature.

          +k8s:conversion-gen=false

          +optional
      securityContext:
        $ref: '#/definitions/v1PodSecurityContext'
        title: >-
          SecurityContext holds pod-level security attributes and common
          container settings.

          Optional: Defaults to empty.  See type description for default values
          of each field.

          +optional
      imagePullSecrets:
        type: array
        items:
          $ref: '#/definitions/v1LocalObjectReference'
        title: >-
          ImagePullSecrets is an optional list of references to secrets in the
          same namespace to use for pulling any of the images used by this
          PodSpec.

          If specified, these secrets will be passed to individual puller
          implementations for them to use. For example,

          in the case of docker, only DockerConfig type secrets are honored.

          More info:
          https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod

          +optional

          +patchMergeKey=name

          +patchStrategy=merge
      hostname:
        type: string
        title: >-
          Specifies the hostname of the Pod

          If not specified, the pod's hostname will be set to a system-defined
          value.

          +optional
      subdomain:
        type: string
        title: >-
          If specified, the fully qualified Pod hostname will be
          "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".

          If not specified, the pod will not have a domainname at all.

          +optional
      affinity:
        $ref: '#/definitions/v1Affinity'
        title: |-
          If specified, the pod's scheduling constraints
          +optional
      schedulerName:
        type: string
        title: |-
          If specified, the pod will be dispatched by specified scheduler.
          If not specified, the pod will be dispatched by default scheduler.
          +optional
      tolerations:
        type: array
        items:
          $ref: '#/definitions/v1Toleration'
        title: |-
          If specified, the pod's tolerations.
          +optional
      hostAliases:
        type: array
        items:
          $ref: '#/definitions/v1HostAlias'
        title: >-
          HostAliases is an optional list of hosts and IPs that will be injected
          into the pod's hosts

          file if specified. This is only valid for non-hostNetwork pods.

          +optional

          +patchMergeKey=ip

          +patchStrategy=merge
      priorityClassName:
        type: string
        title: >-
          If specified, indicates the pod's priority. "system-node-critical" and

          "system-cluster-critical" are two special keywords which indicate the

          highest priorities with the former being the highest priority. Any
          other

          name must be defined by creating a PriorityClass object with that
          name.

          If not specified, the pod priority will be default or zero if there is
          no

          default.

          +optional
      priority:
        type: integer
        format: int32
        title: >-
          The priority value. Various system components use this field to find
          the

          priority of the pod. When Priority Admission Controller is enabled, it

          prevents users from setting this field. The admission controller
          populates

          this field from PriorityClassName.

          The higher the value, the higher the priority.

          +optional
      dnsConfig:
        $ref: '#/definitions/v1PodDNSConfig'
        title: |-
          Specifies the DNS parameters of a pod.
          Parameters specified here will be merged to the generated DNS
          configuration based on DNSPolicy.
          +optional
      readinessGates:
        type: array
        items:
          $ref: '#/definitions/v1PodReadinessGate'
        title: >-
          If specified, all readiness gates will be evaluated for pod readiness.

          A pod is ready when all its containers are ready AND

          all conditions specified in the readiness gates have status equal to
          "True"

          More info:
          https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md

          +optional
      runtimeClassName:
        type: string
        title: >-
          RuntimeClassName refers to a RuntimeClass object in the node.k8s.io
          group, which should be used

          to run this pod.  If no RuntimeClass resource matches the named class,
          the pod will not be run.

          If unset or empty, the "legacy" RuntimeClass will be used, which is an
          implicit class with an

          empty definition that uses the default runtime handler.

          More info:
          https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md

          This is an alpha feature and may change in the future.

          +optional
      enableServiceLinks:
        type: boolean
        format: boolean
        title: >-
          EnableServiceLinks indicates whether information about services should
          be injected into pod's

          environment variables, matching the syntax of Docker links.

          Optional: Defaults to true.

          +optional
    description: PodSpec is a description of a pod.
  v1PodStatus:
    type: object
    properties:
      phase:
        type: string
        description: >-
          Pending: The pod has been accepted by the Kubernetes system, but one
          or more of the

          container images has not been created. This includes time before being
          scheduled as

          well as time spent downloading images over the network, which could
          take a while.

          Running: The pod has been bound to a node, and all of the containers
          have been created.

          At least one container is still running, or is in the process of
          starting or restarting.

          Succeeded: All containers in the pod have terminated in success, and
          will not be restarted.

          Failed: All containers in the pod have terminated, and at least one
          container has

          terminated in failure. The container either exited with non-zero
          status or was terminated

          by the system.

          Unknown: For some reason the state of the pod could not be obtained,
          typically due to an

          error in communicating with the host of the pod.


          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase

          +optional
        title: >-
          The phase of a Pod is a simple, high-level summary of where the Pod is
          in its lifecycle.

          The conditions array, the reason and message fields, and the
          individual container status

          arrays contain more detail about the pod's status.

          There are five possible phase values:
      conditions:
        type: array
        items:
          $ref: '#/definitions/v1PodCondition'
        title: >-
          Current service state of pod.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions

          +optional

          +patchMergeKey=type

          +patchStrategy=merge
      message:
        type: string
        title: >-
          A human readable message indicating details about why the pod is in
          this condition.

          +optional
      reason:
        type: string
        title: >-
          A brief CamelCase message indicating details about why the pod is in
          this state.

          e.g. 'Evicted'

          +optional
      nominatedNodeName:
        type: string
        title: >-
          nominatedNodeName is set only when this pod preempts other pods on the
          node, but it cannot be

          scheduled right away as preemption victims receive their graceful
          termination periods.

          This field does not guarantee that the pod will be scheduled on this
          node. Scheduler may decide

          to place the pod elsewhere if other nodes become available sooner.
          Scheduler may also decide to

          give the resources on this node to a higher priority pod that is
          created after preemption.

          As a result, this field may be different than PodSpec.nodeName when
          the pod is

          scheduled.

          +optional
      hostIP:
        type: string
        title: >-
          IP address of the host to which the pod is assigned. Empty if not yet
          scheduled.

          +optional
      podIP:
        type: string
        title: |-
          IP address allocated to the pod. Routable at least within the cluster.
          Empty if not yet allocated.
          +optional
      startTime:
        $ref: '#/definitions/v1Time'
        title: >-
          RFC 3339 date and time at which the object was acknowledged by the
          Kubelet.

          This is before the Kubelet pulled the container image(s) for the pod.

          +optional
      initContainerStatuses:
        type: array
        items:
          $ref: '#/definitions/v1ContainerStatus'
        title: >-
          The list has one entry per init container in the manifest. The most
          recent successful

          init container will have ready = true, the most recently started
          container will have

          startTime set.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
      containerStatuses:
        type: array
        items:
          $ref: '#/definitions/v1ContainerStatus'
        title: >-
          The list has one entry per container in the manifest. Each entry is
          currently the output

          of `docker inspect`.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status

          +optional
      qosClass:
        type: string
        title: >-
          The Quality of Service (QOS) classification assigned to the pod based
          on resource requirements

          See PodQOSClass type for available QOS classes

          More info:
          https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md

          +optional
    description: >-
      PodStatus represents information about the status of a pod. Status may
      trail the actual

      state of a system, especially if the node that hosts the pod cannot
      contact the control

      plane.
  v1PodTemplateSpec:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1PodSpec'
        title: >-
          Specification of the desired behavior of the pod.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    title: >-
      PodTemplateSpec describes the data a pod should have when created from a
      template
  v1PortworxVolumeSource:
    type: object
    properties:
      volumeID:
        type: string
        title: VolumeID uniquely identifies a Portworx volume
      fsType:
        type: string
        description: |-
          FSType represents the filesystem type to mount
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
      readOnly:
        type: boolean
        format: boolean
        title: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
    description: PortworxVolumeSource represents a Portworx volume resource.
  v1PreferredSchedulingTerm:
    type: object
    properties:
      weight:
        type: integer
        format: int32
        description: >-
          Weight associated with matching the corresponding nodeSelectorTerm, in
          the range 1-100.
      preference:
        $ref: '#/definitions/v1NodeSelectorTerm'
        description: 'A node selector term, associated with the corresponding weight.'
    description: >-
      An empty preferred scheduling term matches all objects with implicit
      weight 0

      (i.e. it's a no-op). A null preferred scheduling term matches no objects
      (i.e. is also a no-op).
  v1Probe:
    type: object
    properties:
      handler:
        $ref: '#/definitions/v1Handler'
        title: The action taken to determine the health of a container
      initialDelaySeconds:
        type: integer
        format: int32
        title: >-
          Number of seconds after the container has started before liveness
          probes are initiated.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

          +optional
      timeoutSeconds:
        type: integer
        format: int32
        title: >-
          Number of seconds after which the probe times out.

          Defaults to 1 second. Minimum value is 1.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

          +optional
      periodSeconds:
        type: integer
        format: int32
        title: |-
          How often (in seconds) to perform the probe.
          Default to 10 seconds. Minimum value is 1.
          +optional
      successThreshold:
        type: integer
        format: int32
        title: >-
          Minimum consecutive successes for the probe to be considered
          successful after having failed.

          Defaults to 1. Must be 1 for liveness. Minimum value is 1.

          +optional
      failureThreshold:
        type: integer
        format: int32
        title: >-
          Minimum consecutive failures for the probe to be considered failed
          after having succeeded.

          Defaults to 3. Minimum value is 1.

          +optional
    description: >-
      Probe describes a health check to be performed against a container to
      determine whether it is

      alive or ready to receive traffic.
  v1ProjectedVolumeSource:
    type: object
    properties:
      sources:
        type: array
        items:
          $ref: '#/definitions/v1VolumeProjection'
        title: list of volume projections
      defaultMode:
        type: integer
        format: int32
        title: |-
          Mode bits to use on created files by default. Must be a value between
          0 and 0777.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
    title: Represents a projected volume source
  v1QuobyteVolumeSource:
    type: object
    properties:
      registry:
        type: string
        title: >-
          Registry represents a single or multiple Quobyte Registry services

          specified as a string as host:port pair (multiple entries are
          separated with commas)

          which acts as the central registry for volumes
      volume:
        type: string
        description: >-
          Volume is a string that references an already created Quobyte volume
          by name.
      readOnly:
        type: boolean
        format: boolean
        title: >-
          ReadOnly here will force the Quobyte volume to be mounted with
          read-only permissions.

          Defaults to false.

          +optional
      user:
        type: string
        title: |-
          User to map volume access to
          Defaults to serivceaccount user
          +optional
      group:
        type: string
        title: |-
          Group to map volume access to
          Default is no group
          +optional
      tenant:
        type: string
        title: >-
          Tenant owning the given Quobyte volume in the Backend

          Used with dynamically provisioned Quobyte volumes, value is set by the
          plugin

          +optional
    description: |-
      Represents a Quobyte mount that lasts the lifetime of a pod.
      Quobyte volumes do not support ownership management or SELinux relabeling.
  v1RBDVolumeSource:
    type: object
    properties:
      monitors:
        type: array
        items:
          type: string
        title: >-
          A collection of Ceph monitors.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
      image:
        type: string
        title: >-
          The rados image name.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
      fsType:
        type: string
        title: >-
          Filesystem type of the volume that you want to mount.

          Tip: Ensure that the filesystem type is supported by the host
          operating system.

          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.

          More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd

          TODO: how do we prevent errors in the filesystem from compromising the
          machine

          +optional
      pool:
        type: string
        title: >-
          The rados pool name.

          Default is rbd.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

          +optional
      user:
        type: string
        title: >-
          The rados user name.

          Default is admin.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

          +optional
      keyring:
        type: string
        title: >-
          Keyring is the path to key ring for RBDUser.

          Default is /etc/ceph/keyring.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

          +optional
      secretRef:
        $ref: '#/definitions/v1LocalObjectReference'
        title: >-
          SecretRef is name of the authentication secret for RBDUser. If
          provided

          overrides keyring.

          Default is nil.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

          +optional
      readOnly:
        type: boolean
        format: boolean
        title: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.

          Defaults to false.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

          +optional
    description: |-
      Represents a Rados Block Device mount that lasts the lifetime of a pod.
      RBD volumes support ownership management and SELinux relabeling.
  v1ReplicaSet:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          If the Labels of a ReplicaSet are empty, they are defaulted to

          be the same as the Pod(s) that the ReplicaSet manages.

          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1ReplicaSetSpec'
        title: >-
          Spec defines the specification of the desired behavior of the
          ReplicaSet.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      status:
        $ref: '#/definitions/v1ReplicaSetStatus'
        title: >-
          Status is the most recently observed status of the ReplicaSet.

          This data may be out of date by some window of time.

          Populated by the system.

          Read-only.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    description: >-
      ReplicaSet ensures that a specified number of pod replicas are running at
      any given time.
  v1ReplicaSetCondition:
    type: object
    properties:
      type:
        type: string
        description: Type of replica set condition.
      status:
        type: string
        description: 'Status of the condition, one of True, False, Unknown.'
      lastTransitionTime:
        $ref: '#/definitions/v1Time'
        title: |-
          The last time the condition transitioned from one status to another.
          +optional
      reason:
        type: string
        title: |-
          The reason for the condition's last transition.
          +optional
      message:
        type: string
        title: |-
          A human readable message indicating details about the transition.
          +optional
    description: >-
      ReplicaSetCondition describes the state of a replica set at a certain
      point.
  v1ReplicaSetSpec:
    type: object
    properties:
      replicas:
        type: integer
        format: int32
        title: >-
          Replicas is the number of desired replicas.

          This is a pointer to distinguish between explicit zero and
          unspecified.

          Defaults to 1.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller

          +optional
      minReadySeconds:
        type: integer
        format: int32
        title: >-
          Minimum number of seconds for which a newly created pod should be
          ready

          without any of its container crashing, for it to be considered
          available.

          Defaults to 0 (pod will be considered available as soon as it is
          ready)

          +optional
      selector:
        $ref: '#/definitions/v1LabelSelector'
        title: >-
          Selector is a label query over pods that should match the replica
          count.

          Label keys and values that must match in order to be controlled by
          this replica set.

          It must match the pod template's labels.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
      template:
        $ref: '#/definitions/v1PodTemplateSpec'
        title: >-
          Template is the object that describes the pod that will be created if

          insufficient replicas are detected.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template

          +optional
    description: ReplicaSetSpec is the specification of a ReplicaSet.
  v1ReplicaSetStatus:
    type: object
    properties:
      replicas:
        type: integer
        format: int32
        title: >-
          Replicas is the most recently oberved number of replicas.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
      fullyLabeledReplicas:
        type: integer
        format: int32
        title: >-
          The number of pods that have labels matching the labels of the pod
          template of the replicaset.

          +optional
      readyReplicas:
        type: integer
        format: int32
        title: |-
          The number of ready replicas for this replica set.
          +optional
      availableReplicas:
        type: integer
        format: int32
        title: >-
          The number of available replicas (ready for at least minReadySeconds)
          for this replica set.

          +optional
      observedGeneration:
        type: string
        format: int64
        title: >-
          ObservedGeneration reflects the generation of the most recently
          observed ReplicaSet.

          +optional
      conditions:
        type: array
        items:
          $ref: '#/definitions/v1ReplicaSetCondition'
        title: >-
          Represents the latest available observations of a replica set's
          current state.

          +optional

          +patchMergeKey=type

          +patchStrategy=merge
    description: ReplicaSetStatus represents the current status of a ReplicaSet.
  v1ReplicationController:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          If the Labels of a ReplicationController are empty, they are defaulted
          to

          be the same as the Pod(s) that the replication controller manages.

          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1ReplicationControllerSpec'
        title: >-
          Spec defines the specification of the desired behavior of the
          replication controller.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      status:
        $ref: '#/definitions/v1ReplicationControllerStatus'
        title: >-
          Status is the most recently observed status of the replication
          controller.

          This data may be out of date by some window of time.

          Populated by the system.

          Read-only.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    description: >-
      ReplicationController represents the configuration of a replication
      controller.
  v1ReplicationControllerCondition:
    type: object
    properties:
      type:
        type: string
        description: Type of replication controller condition.
      status:
        type: string
        description: 'Status of the condition, one of True, False, Unknown.'
      lastTransitionTime:
        $ref: '#/definitions/v1Time'
        title: |-
          The last time the condition transitioned from one status to another.
          +optional
      reason:
        type: string
        title: |-
          The reason for the condition's last transition.
          +optional
      message:
        type: string
        title: |-
          A human readable message indicating details about the transition.
          +optional
    description: >-
      ReplicationControllerCondition describes the state of a replication
      controller at a certain point.
  v1ReplicationControllerSpec:
    type: object
    properties:
      replicas:
        type: integer
        format: int32
        title: >-
          Replicas is the number of desired replicas.

          This is a pointer to distinguish between explicit zero and
          unspecified.

          Defaults to 1.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller

          +optional
      minReadySeconds:
        type: integer
        format: int32
        title: >-
          Minimum number of seconds for which a newly created pod should be
          ready

          without any of its container crashing, for it to be considered
          available.

          Defaults to 0 (pod will be considered available as soon as it is
          ready)

          +optional
      selector:
        type: object
        additionalProperties:
          type: string
        title: >-
          Selector is a label query over pods that should match the Replicas
          count.

          If Selector is empty, it is defaulted to the labels present on the Pod
          template.

          Label keys and values that must match in order to be controlled by
          this replication

          controller, if empty defaulted to labels on Pod template.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors

          +optional
      template:
        $ref: '#/definitions/v1PodTemplateSpec'
        title: >-
          Template is the object that describes the pod that will be created if

          insufficient replicas are detected. This takes precedence over a
          TemplateRef.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template

          +optional
    description: >-
      ReplicationControllerSpec is the specification of a replication
      controller.
  v1ReplicationControllerStatus:
    type: object
    properties:
      replicas:
        type: integer
        format: int32
        title: >-
          Replicas is the most recently oberved number of replicas.

          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
      fullyLabeledReplicas:
        type: integer
        format: int32
        title: >-
          The number of pods that have labels matching the labels of the pod
          template of the replication controller.

          +optional
      readyReplicas:
        type: integer
        format: int32
        title: |-
          The number of ready replicas for this replication controller.
          +optional
      availableReplicas:
        type: integer
        format: int32
        title: >-
          The number of available replicas (ready for at least minReadySeconds)
          for this replication controller.

          +optional
      observedGeneration:
        type: string
        format: int64
        title: >-
          ObservedGeneration reflects the generation of the most recently
          observed replication controller.

          +optional
      conditions:
        type: array
        items:
          $ref: '#/definitions/v1ReplicationControllerCondition'
        title: >-
          Represents the latest available observations of a replication
          controller's current state.

          +optional

          +patchMergeKey=type

          +patchStrategy=merge
    description: |-
      ReplicationControllerStatus represents the current status of a replication
      controller.
  v1ResourceFieldSelector:
    type: object
    properties:
      containerName:
        type: string
        title: |-
          Container name: required for volumes, optional for env vars
          +optional
      resource:
        type: string
        title: 'Required: resource to select'
      divisor:
        $ref: '#/definitions/resourceQuantity'
        title: |-
          Specifies the output format of the exposed resources, defaults to "1"
          +optional
    title: >-
      ResourceFieldSelector represents container resources (cpu, memory) and
      their output format
  v1ResourceRequirements:
    type: object
    properties:
      limits:
        type: object
        additionalProperties:
          $ref: '#/definitions/resourceQuantity'
        title: >-
          Limits describes the maximum amount of compute resources allowed.

          More info:
          https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/

          +optional
      requests:
        type: object
        additionalProperties:
          $ref: '#/definitions/resourceQuantity'
        title: >-
          Requests describes the minimum amount of compute resources required.

          If Requests is omitted for a container, it defaults to Limits if that
          is explicitly specified,

          otherwise to an implementation-defined value.

          More info:
          https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/

          +optional
    description: ResourceRequirements describes the compute resource requirements.
  v1RollingUpdateDaemonSet:
    type: object
    properties:
      maxUnavailable:
        $ref: '#/definitions/intstrIntOrString'
        title: >-
          The maximum number of DaemonSet pods that can be unavailable during
          the

          update. Value can be an absolute number (ex: 5) or a percentage of
          total

          number of DaemonSet pods at the start of the update (ex: 10%).
          Absolute

          number is calculated from percentage by rounding up.

          This cannot be 0.

          Default value is 1.

          Example: when this is set to 30%, at most 30% of the total number of
          nodes

          that should be running the daemon pod (i.e.
          status.desiredNumberScheduled)

          can have their pods stopped for an update at any given

          time. The update starts by stopping at most 30% of those DaemonSet
          pods

          and then brings up new DaemonSet pods in their place. Once the new
          pods

          are available, it then proceeds onto other DaemonSet pods, thus
          ensuring

          that at least 70% of original number of DaemonSet pods are available
          at

          all times during the update.

          +optional
    description: Spec to control the desired behavior of daemon set rolling update.
  v1RollingUpdateDeployment:
    type: object
    properties:
      maxUnavailable:
        $ref: '#/definitions/intstrIntOrString'
        title: >-
          The maximum number of pods that can be unavailable during the update.

          Value can be an absolute number (ex: 5) or a percentage of desired
          pods (ex: 10%).

          Absolute number is calculated from percentage by rounding down.

          This can not be 0 if MaxSurge is 0.

          Defaults to 25%.

          Example: when this is set to 30%, the old ReplicaSet can be scaled
          down to 70% of desired pods

          immediately when the rolling update starts. Once new pods are ready,
          old ReplicaSet

          can be scaled down further, followed by scaling up the new ReplicaSet,
          ensuring

          that the total number of pods available at all times during the update
          is at

          least 70% of desired pods.

          +optional
      maxSurge:
        $ref: '#/definitions/intstrIntOrString'
        title: >-
          The maximum number of pods that can be scheduled above the desired
          number of

          pods.

          Value can be an absolute number (ex: 5) or a percentage of desired
          pods (ex: 10%).

          This can not be 0 if MaxUnavailable is 0.

          Absolute number is calculated from percentage by rounding up.

          Defaults to 25%.

          Example: when this is set to 30%, the new ReplicaSet can be scaled up
          immediately when

          the rolling update starts, such that the total number of old and new
          pods do not exceed

          130% of desired pods. Once old pods have been killed,

          new ReplicaSet can be scaled up further, ensuring that total number of
          pods running

          at any time during the update is at most 130% of desired pods.

          +optional
    description: Spec to control the desired behavior of rolling update.
  v1RollingUpdateStatefulSetStrategy:
    type: object
    properties:
      partition:
        type: integer
        format: int32
        title: |-
          Partition indicates the ordinal at which the StatefulSet should be
          partitioned.
          Default value is 0.
          +optional
    description: >-
      RollingUpdateStatefulSetStrategy is used to communicate parameter for
      RollingUpdateStatefulSetStrategyType.
  v1SELinuxOptions:
    type: object
    properties:
      user:
        type: string
        title: |-
          User is a SELinux user label that applies to the container.
          +optional
      role:
        type: string
        title: |-
          Role is a SELinux role label that applies to the container.
          +optional
      type:
        type: string
        title: |-
          Type is a SELinux type label that applies to the container.
          +optional
      level:
        type: string
        title: |-
          Level is SELinux level label that applies to the container.
          +optional
    title: SELinuxOptions are the labels to be applied to the container
  v1ScaleIOVolumeSource:
    type: object
    properties:
      gateway:
        type: string
        description: The host address of the ScaleIO API Gateway.
      system:
        type: string
        description: The name of the storage system as configured in ScaleIO.
      secretRef:
        $ref: '#/definitions/v1LocalObjectReference'
        description: >-
          SecretRef references to the secret for ScaleIO user and other

          sensitive information. If this is not provided, Login operation will
          fail.
      sslEnabled:
        type: boolean
        format: boolean
        title: |-
          Flag to enable/disable SSL communication with Gateway, default false
          +optional
      protectionDomain:
        type: string
        title: |-
          The name of the ScaleIO Protection Domain for the configured storage.
          +optional
      storagePool:
        type: string
        title: |-
          The ScaleIO Storage Pool associated with the protection domain.
          +optional
      storageMode:
        type: string
        title: >-
          Indicates whether the storage for a volume should be ThickProvisioned
          or ThinProvisioned.

          Default is ThinProvisioned.

          +optional
      volumeName:
        type: string
        description: |-
          The name of a volume already created in the ScaleIO system
          that is associated with this volume source.
      fsType:
        type: string
        title: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs".
          Default is "xfs".
          +optional
      readOnly:
        type: boolean
        format: boolean
        title: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
    title: ScaleIOVolumeSource represents a persistent ScaleIO volume
  v1SecretEnvSource:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/v1LocalObjectReference'
        description: The Secret to select from.
      optional:
        type: boolean
        format: boolean
        title: |-
          Specify whether the Secret must be defined
          +optional
    description: |-
      SecretEnvSource selects a Secret to populate the environment
      variables with.

      The contents of the target Secret's Data field will represent the
      key-value pairs as environment variables.
  v1SecretKeySelector:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/v1LocalObjectReference'
        description: The name of the secret in the pod's namespace to select from.
      key:
        type: string
        description: The key of the secret to select from.  Must be a valid secret key.
      optional:
        type: boolean
        format: boolean
        title: |-
          Specify whether the Secret or it's key must be defined
          +optional
    description: SecretKeySelector selects a key of a Secret.
  v1SecretProjection:
    type: object
    properties:
      localObjectReference:
        $ref: '#/definitions/v1LocalObjectReference'
      items:
        type: array
        items:
          $ref: '#/definitions/v1KeyToPath'
        title: >-
          If unspecified, each key-value pair in the Data field of the
          referenced

          Secret will be projected into the volume as a file whose name is the

          key and content is the value. If specified, the listed keys will be

          projected into the specified paths, and unlisted keys will not be

          present. If a key is specified which is not present in the Secret,

          the volume setup will error unless it is marked optional. Paths must
          be

          relative and may not contain the '..' path or start with '..'.

          +optional
      optional:
        type: boolean
        format: boolean
        title: |-
          Specify whether the Secret or its key must be defined
          +optional
    description: >-
      Adapts a secret into a projected volume.


      The contents of the target Secret's Data field will be presented in a

      projected volume as files using the keys in the Data field as the file
      names.

      Note that this is identical to a secret volume source without the default

      mode.
  v1SecretVolumeSource:
    type: object
    properties:
      secretName:
        type: string
        title: |-
          Name of the secret in the pod's namespace to use.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
      items:
        type: array
        items:
          $ref: '#/definitions/v1KeyToPath'
        title: >-
          If unspecified, each key-value pair in the Data field of the
          referenced

          Secret will be projected into the volume as a file whose name is the

          key and content is the value. If specified, the listed keys will be

          projected into the specified paths, and unlisted keys will not be

          present. If a key is specified which is not present in the Secret,

          the volume setup will error unless it is marked optional. Paths must
          be

          relative and may not contain the '..' path or start with '..'.

          +optional
      defaultMode:
        type: integer
        format: int32
        title: |-
          Optional: mode bits to use on created files by default. Must be a
          value between 0 and 0777. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
      optional:
        type: boolean
        format: boolean
        title: |-
          Specify whether the Secret or it's keys must be defined
          +optional
    description: >-
      Adapts a Secret into a volume.


      The contents of the target Secret's Data field will be presented in a
      volume

      as files using the keys in the Data field as the file names.

      Secret volumes support ownership management and SELinux relabeling.
  v1SecurityContext:
    type: object
    properties:
      capabilities:
        $ref: '#/definitions/v1Capabilities'
        title: >-
          The capabilities to add/drop when running containers.

          Defaults to the default set of capabilities granted by the container
          runtime.

          +optional
      privileged:
        type: boolean
        format: boolean
        title: >-
          Run container in privileged mode.

          Processes in privileged containers are essentially equivalent to root
          on the host.

          Defaults to false.

          +optional
      seLinuxOptions:
        $ref: '#/definitions/v1SELinuxOptions'
        title: >-
          The SELinux context to be applied to the container.

          If unspecified, the container runtime will allocate a random SELinux
          context for each

          container.  May also be set in PodSecurityContext.  If set in both
          SecurityContext and

          PodSecurityContext, the value specified in SecurityContext takes
          precedence.

          +optional
      runAsUser:
        type: string
        format: int64
        title: >-
          The UID to run the entrypoint of the container process.

          Defaults to user specified in image metadata if unspecified.

          May also be set in PodSecurityContext.  If set in both SecurityContext
          and

          PodSecurityContext, the value specified in SecurityContext takes
          precedence.

          +optional
      runAsGroup:
        type: string
        format: int64
        title: >-
          The GID to run the entrypoint of the container process.

          Uses runtime default if unset.

          May also be set in PodSecurityContext.  If set in both SecurityContext
          and

          PodSecurityContext, the value specified in SecurityContext takes
          precedence.

          +optional
      runAsNonRoot:
        type: boolean
        format: boolean
        title: >-
          Indicates that the container must run as a non-root user.

          If true, the Kubelet will validate the image at runtime to ensure that
          it

          does not run as UID 0 (root) and fail to start the container if it
          does.

          If unset or false, no such validation will be performed.

          May also be set in PodSecurityContext.  If set in both SecurityContext
          and

          PodSecurityContext, the value specified in SecurityContext takes
          precedence.

          +optional
      readOnlyRootFilesystem:
        type: boolean
        format: boolean
        title: |-
          Whether this container has a read-only root filesystem.
          Default is false.
          +optional
      allowPrivilegeEscalation:
        type: boolean
        format: boolean
        title: |-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if
          the no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is:
          1) run as Privileged
          2) has CAP_SYS_ADMIN
          +optional
      procMount:
        type: string
        title: >-
          procMount denotes the type of proc mount to use for the containers.

          The default is DefaultProcMount which uses the container runtime
          defaults for

          readonly paths and masked paths.

          This requires the ProcMountType feature flag to be enabled.

          +optional
    description: >-
      SecurityContext holds security configuration that will be applied to a
      container.

      Some fields are present in both SecurityContext and PodSecurityContext. 
      When both

      are set, the values in SecurityContext take precedence.
  v1Service:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1ServiceSpec'
        title: >-
          Spec defines the behavior of a service.

          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      status:
        $ref: '#/definitions/v1ServiceStatus'
        title: >-
          Most recently observed status of the service.

          Populated by the system.

          Read-only.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    description: >-
      Service is a named abstraction of software service (for example, mysql)
      consisting of local port

      (for example 3306) that the proxy listens on, and the selector that
      determines which pods

      will answer requests sent through the proxy.
  v1ServiceAccountTokenProjection:
    type: object
    properties:
      audience:
        type: string
        title: >-
          Audience is the intended audience of the token. A recipient of a token

          must identify itself with an identifier specified in the audience of
          the

          token, and otherwise should reject the token. The audience defaults to
          the

          identifier of the apiserver.

          +optional
      expirationSeconds:
        type: string
        format: int64
        title: >-
          ExpirationSeconds is the requested duration of validity of the service

          account token. As the token approaches expiration, the kubelet volume

          plugin will proactively rotate the service account token. The kubelet
          will

          start trying to rotate the token if the token is older than 80 percent
          of

          its time to live or if the token is older than 24 hours.Defaults to 1
          hour

          and must be at least 10 minutes.

          +optional
      path:
        type: string
        description: >-
          Path is the path relative to the mount point of the file to project
          the

          token into.
    description: |-
      ServiceAccountTokenProjection represents a projected service account token
      volume. This projection can be used to insert a service account token into
      the pods runtime filesystem for use against APIs (Kubernetes API Server or
      otherwise).
  v1ServicePort:
    type: object
    properties:
      name:
        type: string
        title: |-
          The name of this port within the service. This must be a DNS_LABEL.
          All ports within a ServiceSpec must have unique names. This maps to
          the 'Name' field in EndpointPort objects.
          Optional if only one ServicePort is defined on this service.
          +optional
      protocol:
        type: string
        title: |-
          The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
          Default is TCP.
          +optional
      port:
        type: integer
        format: int32
        description: The port that will be exposed by this service.
      targetPort:
        $ref: '#/definitions/intstrIntOrString'
        title: >-
          Number or name of the port to access on the pods targeted by the
          service.

          Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.

          If this is a string, it will be looked up as a named port in the

          target Pod's container ports. If this is not specified, the value

          of the 'port' field is used (an identity map).

          This field is ignored for services with clusterIP=None, and should be

          omitted or set equal to the 'port' field.

          More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service

          +optional
      nodePort:
        type: integer
        format: int32
        title: >-
          The port on each node on which this service is exposed when
          type=NodePort or LoadBalancer.

          Usually assigned by the system. If specified, it will be allocated to
          the service

          if unused or else creation of the service will fail.

          Default is to auto-allocate a port if the ServiceType of this Service
          requires one.

          More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport

          +optional
    description: ServicePort contains information on service's port.
  v1ServiceSpec:
    type: object
    properties:
      ports:
        type: array
        items:
          $ref: '#/definitions/v1ServicePort'
        title: >-
          The list of ports that are exposed by this service.

          More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies

          +patchMergeKey=port

          +patchStrategy=merge

          +listType=map

          +listMapKey=port

          +listMapKey=protocol
      selector:
        type: object
        additionalProperties:
          type: string
        title: >-
          Route service traffic to pods with label keys and values matching this

          selector. If empty or not present, the service is assumed to have an

          external process managing its endpoints, which Kubernetes will not

          modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.

          Ignored if type is ExternalName.

          More info:
          https://kubernetes.io/docs/concepts/services-networking/service/

          +optional
      clusterIP:
        type: string
        title: >-
          clusterIP is the IP address of the service and is usually assigned

          randomly by the master. If an address is specified manually and is not
          in

          use by others, it will be allocated to the service; otherwise,
          creation

          of the service will fail. This field can not be changed through
          updates.

          Valid values are "None", empty string (""), or a valid IP address.
          "None"

          can be specified for headless services when proxying is not required.

          Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored
          if

          type is ExternalName.

          More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies

          +optional
      type:
        type: string
        title: >-
          type determines how the Service is exposed. Defaults to ClusterIP.
          Valid

          options are ExternalName, ClusterIP, NodePort, and LoadBalancer.

          "ExternalName" maps to the specified externalName.

          "ClusterIP" allocates a cluster-internal IP address for load-balancing
          to

          endpoints. Endpoints are determined by the selector or if that is not

          specified, by manual construction of an Endpoints object. If clusterIP
          is

          "None", no virtual IP is allocated and the endpoints are published as
          a

          set of endpoints rather than a stable IP.

          "NodePort" builds on ClusterIP and allocates a port on every node
          which

          routes to the clusterIP.

          "LoadBalancer" builds on NodePort and creates an

          external load-balancer (if supported in the current cloud) which
          routes

          to the clusterIP.

          More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types

          +optional
      externalIPs:
        type: array
        items:
          type: string
        title: >-
          externalIPs is a list of IP addresses for which nodes in the cluster

          will also accept traffic for this service.  These IPs are not managed
          by

          Kubernetes.  The user is responsible for ensuring that traffic arrives

          at a node with this IP.  A common example is external load-balancers

          that are not part of the Kubernetes system.

          +optional
      sessionAffinity:
        type: string
        title: >-
          Supports "ClientIP" and "None". Used to maintain session affinity.

          Enable client IP based session affinity.

          Must be ClientIP or None.

          Defaults to None.

          More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies

          +optional
      loadBalancerIP:
        type: string
        title: >-
          Only applies to Service Type: LoadBalancer

          LoadBalancer will get created with the IP specified in this field.

          This feature depends on whether the underlying cloud-provider supports
          specifying

          the loadBalancerIP when a load balancer is created.

          This field will be ignored if the cloud-provider does not support the
          feature.

          +optional
      loadBalancerSourceRanges:
        type: array
        items:
          type: string
        title: >-
          If specified and supported by the platform, this will restrict traffic
          through the cloud-provider

          load-balancer will be restricted to the specified client IPs. This
          field will be ignored if the

          cloud-provider does not support the feature."

          More info:
          https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/

          +optional
      externalName:
        type: string
        title: >-
          externalName is the external reference that kubedns or equivalent will

          return as a CNAME record for this service. No proxying will be
          involved.

          Must be a valid RFC-1123 hostname
          (https://tools.ietf.org/html/rfc1123)

          and requires Type to be ExternalName.

          +optional
      externalTrafficPolicy:
        type: string
        title: >-
          externalTrafficPolicy denotes if this Service desires to route
          external

          traffic to node-local or cluster-wide endpoints. "Local" preserves the

          client source IP and avoids a second hop for LoadBalancer and Nodeport

          type services, but risks potentially imbalanced traffic spreading.

          "Cluster" obscures the client source IP and may cause a second hop to

          another node, but should have good overall load-spreading.

          +optional
      healthCheckNodePort:
        type: integer
        format: int32
        title: >-
          healthCheckNodePort specifies the healthcheck nodePort for the
          service.

          If not specified, HealthCheckNodePort is created by the service api

          backend with the allocated nodePort. Will use user-specified nodePort
          value

          if specified by the client. Only effects when Type is set to
          LoadBalancer

          and ExternalTrafficPolicy is set to Local.

          +optional
      publishNotReadyAddresses:
        type: boolean
        format: boolean
        title: >-
          publishNotReadyAddresses, when set to true, indicates that DNS
          implementations

          must publish the notReadyAddresses of subsets for the Endpoints
          associated with

          the Service. The default value is false.

          The primary use case for setting this field is to use a StatefulSet's
          Headless Service

          to propagate SRV records for its Pods without respect to their
          readiness for purpose

          of peer discovery.

          +optional
      sessionAffinityConfig:
        $ref: '#/definitions/v1SessionAffinityConfig'
        title: |-
          sessionAffinityConfig contains the configurations of session affinity.
          +optional
    description: ServiceSpec describes the attributes that a user creates on a service.
  v1ServiceStatus:
    type: object
    properties:
      loadBalancer:
        $ref: '#/definitions/v1LoadBalancerStatus'
        title: |-
          LoadBalancer contains the current status of the load-balancer,
          if one is present.
          +optional
    description: ServiceStatus represents the current status of a service.
  v1SessionAffinityConfig:
    type: object
    properties:
      clientIP:
        $ref: '#/definitions/v1ClientIPConfig'
        title: >-
          clientIP contains the configurations of Client IP based session
          affinity.

          +optional
    description: SessionAffinityConfig represents the configurations of session affinity.
  v1StatefulSet:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: +optional
      spec:
        $ref: '#/definitions/v1StatefulSetSpec'
        title: |-
          Spec defines the desired identities of pods in this set.
          +optional
      status:
        $ref: '#/definitions/v1StatefulSetStatus'
        title: |-
          Status is the current status of Pods in this StatefulSet. This data
          may be out of date by some window of time.
          +optional
    description: |-
      StatefulSet represents a set of pods with consistent identities.
      Identities are defined as:
       - Network: A single stable DNS and hostname.
       - Storage: As many VolumeClaims as requested.
      The StatefulSet guarantees that a given network identity will always
      map to the same storage identity.
  v1StatefulSetCondition:
    type: object
    properties:
      type:
        type: string
        description: Type of statefulset condition.
      status:
        type: string
        description: 'Status of the condition, one of True, False, Unknown.'
      lastTransitionTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Last time the condition transitioned from one status to another.
          +optional
      reason:
        type: string
        title: |-
          The reason for the condition's last transition.
          +optional
      message:
        type: string
        title: |-
          A human readable message indicating details about the transition.
          +optional
    description: >-
      StatefulSetCondition describes the state of a statefulset at a certain
      point.
  v1StatefulSetSpec:
    type: object
    properties:
      replicas:
        type: integer
        format: int32
        title: >-
          replicas is the desired number of replicas of the given Template.

          These are replicas in the sense that they are instantiations of the

          same Template, but individual replicas also have a consistent
          identity.

          If unspecified, defaults to 1.

          TODO: Consider a rename of this field.

          +optional
      selector:
        $ref: '#/definitions/v1LabelSelector'
        title: >-
          selector is a label query over pods that should match the replica
          count.

          It must match the pod template's labels.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
      template:
        $ref: '#/definitions/v1PodTemplateSpec'
        description: >-
          template is the object that describes the pod that will be created if

          insufficient replicas are detected. Each pod stamped out by the
          StatefulSet

          will fulfill this Template, but have a unique identity from the rest

          of the StatefulSet.
      volumeClaimTemplates:
        type: array
        items:
          $ref: '#/definitions/v1PersistentVolumeClaim'
        title: >-
          volumeClaimTemplates is a list of claims that pods are allowed to
          reference.

          The StatefulSet controller is responsible for mapping network
          identities to

          claims in a way that maintains the identity of a pod. Every claim in

          this list must have at least one matching (by name) volumeMount in one

          container in the template. A claim in this list takes precedence over

          any volumes in the template, with the same name.

          TODO: Define the behavior if a claim already exists with the same
          name.

          +optional
      serviceName:
        type: string
        description: >-
          serviceName is the name of the service that governs this StatefulSet.

          This service must exist before the StatefulSet, and is responsible for

          the network identity of the set. Pods get DNS/hostnames that follow
          the

          pattern: pod-specific-string.serviceName.default.svc.cluster.local

          where "pod-specific-string" is managed by the StatefulSet controller.
      podManagementPolicy:
        type: string
        title: >-
          podManagementPolicy controls how pods are created during initial scale
          up,

          when replacing pods on nodes, or when scaling down. The default policy
          is

          `OrderedReady`, where pods are created in increasing order (pod-0,
          then

          pod-1, etc) and the controller will wait until each pod is ready
          before

          continuing. When scaling down, the pods are removed in the opposite
          order.

          The alternative policy is `Parallel` which will create pods in
          parallel

          to match the desired scale without waiting, and on scale down will
          delete

          all pods at once.

          +optional
      updateStrategy:
        $ref: '#/definitions/v1StatefulSetUpdateStrategy'
        description: |-
          updateStrategy indicates the StatefulSetUpdateStrategy that will be
          employed to update Pods in the StatefulSet when a revision is made to
          Template.
      revisionHistoryLimit:
        type: integer
        format: int32
        description: >-
          revisionHistoryLimit is the maximum number of revisions that will

          be maintained in the StatefulSet's revision history. The revision
          history

          consists of all revisions not represented by a currently applied

          StatefulSetSpec version. The default value is 10.
    description: A StatefulSetSpec is the specification of a StatefulSet.
  v1StatefulSetStatus:
    type: object
    properties:
      observedGeneration:
        type: string
        format: int64
        title: >-
          observedGeneration is the most recent generation observed for this
          StatefulSet. It corresponds to the

          StatefulSet's generation, which is updated on mutation by the API
          Server.

          +optional
      replicas:
        type: integer
        format: int32
        description: replicas is the number of Pods created by the StatefulSet controller.
      readyReplicas:
        type: integer
        format: int32
        description: >-
          readyReplicas is the number of Pods created by the StatefulSet
          controller that have a Ready Condition.
      currentReplicas:
        type: integer
        format: int32
        description: >-
          currentReplicas is the number of Pods created by the StatefulSet
          controller from the StatefulSet version

          indicated by currentRevision.
      updatedReplicas:
        type: integer
        format: int32
        description: >-
          updatedReplicas is the number of Pods created by the StatefulSet
          controller from the StatefulSet version

          indicated by updateRevision.
      currentRevision:
        type: string
        description: >-
          currentRevision, if not empty, indicates the version of the
          StatefulSet used to generate Pods in the

          sequence [0,currentReplicas).
      updateRevision:
        type: string
        title: >-
          updateRevision, if not empty, indicates the version of the StatefulSet
          used to generate Pods in the sequence

          [replicas-updatedReplicas,replicas)
      collisionCount:
        type: integer
        format: int32
        title: >-
          collisionCount is the count of hash collisions for the StatefulSet.
          The StatefulSet controller

          uses this field as a collision avoidance mechanism when it needs to
          create the name for the

          newest ControllerRevision.

          +optional
      conditions:
        type: array
        items:
          $ref: '#/definitions/v1StatefulSetCondition'
        title: >-
          Represents the latest available observations of a statefulset's
          current state.

          +optional

          +patchMergeKey=type

          +patchStrategy=merge
    description: StatefulSetStatus represents the current state of a StatefulSet.
  v1StatefulSetUpdateStrategy:
    type: object
    properties:
      type:
        type: string
        title: |-
          Type indicates the type of the StatefulSetUpdateStrategy.
          Default is RollingUpdate.
          +optional
      rollingUpdate:
        $ref: '#/definitions/v1RollingUpdateStatefulSetStrategy'
        title: >-
          RollingUpdate is used to communicate parameters when Type is
          RollingUpdateStatefulSetStrategyType.

          +optional
    description: >-
      StatefulSetUpdateStrategy indicates the strategy that the StatefulSet

      controller will use to perform updates. It includes any additional
      parameters

      necessary to perform the update for the indicated strategy.
  v1Status:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/v1ListMeta'
        title: >-
          Standard list metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds

          +optional
      status:
        type: string
        title: >-
          Status of the operation.

          One of: "Success" or "Failure".

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      message:
        type: string
        title: |-
          A human-readable description of the status of this operation.
          +optional
      reason:
        type: string
        title: |-
          A machine-readable description of why this operation is in the
          "Failure" status. If this value is empty there
          is no information available. A Reason clarifies an HTTP status
          code but does not override it.
          +optional
      details:
        $ref: '#/definitions/v1StatusDetails'
        title: |-
          Extended data associated with the reason.  Each reason may define its
          own extended details. This field is optional and the data returned
          is not guaranteed to conform to any schema except that defined by
          the reason type.
          +optional
      code:
        type: integer
        format: int32
        title: |-
          Suggested HTTP return code for this status, 0 if not set.
          +optional
    description: Status is a return value for calls that don't return other objects.
  v1StatusCause:
    type: object
    properties:
      reason:
        type: string
        title: >-
          A machine-readable description of the cause of the error. If this
          value is

          empty there is no information available.

          +optional
      message:
        type: string
        title: >-
          A human-readable description of the cause of the error.  This field
          may be

          presented as-is to a reader.

          +optional
      field:
        type: string
        description: >-
          The field of the resource that has caused this error, as named by its
          JSON

          serialization. May include dot and postfix notation for nested
          attributes.

          Arrays are zero-indexed.  Fields may appear more than once in an array
          of

          causes due to fields having multiple errors.

          Optional.


          Examples:
            "name" - the field "name" on the current resource
            "items[0].name" - the field "name" on the first array entry in "items"
          +optional
    description: >-
      StatusCause provides more information about an api.Status failure,
      including

      cases when multiple errors are encountered.
  v1StatusDetails:
    type: object
    properties:
      name:
        type: string
        title: >-
          The name attribute of the resource associated with the status
          StatusReason

          (when there is a single name which can be described).

          +optional
      group:
        type: string
        title: >-
          The group attribute of the resource associated with the status
          StatusReason.

          +optional
      kind:
        type: string
        title: >-
          The kind attribute of the resource associated with the status
          StatusReason.

          On some operations may differ from the requested resource Kind.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds

          +optional
      uid:
        type: string
        title: |-
          UID of the resource.
          (when there is a single resource which can be described).
          More info: http://kubernetes.io/docs/user-guide/identifiers#uids
          +optional
      causes:
        type: array
        items:
          $ref: '#/definitions/v1StatusCause'
        title: >-
          The Causes array includes more details associated with the
          StatusReason

          failure. Not all StatusReasons may provide detailed causes.

          +optional
      retryAfterSeconds:
        type: integer
        format: int32
        title: >-
          If specified, the time in seconds before the operation should be
          retried. Some errors may indicate

          the client must take an alternate action - for those errors this field
          may indicate how long to wait

          before taking the alternate action.

          +optional
    description: |-
      StatusDetails is a set of additional properties that MAY be set by the
      server to provide additional information about a response. The Reason
      field of a Status object defines what attributes will be set. Clients
      must ignore fields that do not match the defined type of each attribute,
      and should assume that any attribute may be empty, invalid, or under
      defined.
  v1StorageOSVolumeSource:
    type: object
    properties:
      volumeName:
        type: string
        description: |-
          VolumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
      volumeNamespace:
        type: string
        title: >-
          VolumeNamespace specifies the scope of the volume within StorageOS. 
          If no

          namespace is specified then the Pod's namespace will be used.  This
          allows the

          Kubernetes name scoping to be mirrored within StorageOS for tighter
          integration.

          Set VolumeName to any name to override the default behaviour.

          Set to "default" if you are not using namespaces within StorageOS.

          Namespaces that do not pre-exist within StorageOS will be created.

          +optional
      fsType:
        type: string
        title: >-
          Filesystem type to mount.

          Must be a filesystem type supported by the host operating system.

          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.

          +optional
      readOnly:
        type: boolean
        format: boolean
        title: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
      secretRef:
        $ref: '#/definitions/v1LocalObjectReference'
        title: |-
          SecretRef specifies the secret to use for obtaining the StorageOS API
          credentials.  If not specified, default values will be attempted.
          +optional
    description: Represents a StorageOS persistent volume resource.
  v1Sysctl:
    type: object
    properties:
      name:
        type: string
        title: Name of a property to set
      value:
        type: string
        title: Value of a property to set
    title: Sysctl defines a kernel parameter to be set
  v1TCPSocketAction:
    type: object
    properties:
      port:
        $ref: '#/definitions/intstrIntOrString'
        description: |-
          Number or name of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
      host:
        type: string
        title: |-
          Optional: Host name to connect to, defaults to the pod IP.
          +optional
    title: TCPSocketAction describes an action based on opening a socket
  v1Taint:
    type: object
    properties:
      key:
        type: string
        description: Required. The taint key to be applied to a node.
      value:
        type: string
        title: |-
          Required. The taint value corresponding to the taint key.
          +optional
      effect:
        type: string
        description: |-
          Required. The effect of the taint on pods
          that do not tolerate the taint.
          Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
      timeAdded:
        $ref: '#/definitions/v1Time'
        title: |-
          TimeAdded represents the time at which the taint was added.
          It is only written for NoExecute taints.
          +optional
    description: |-
      The node this Taint is attached to has the "effect" on
      any pod that does not tolerate the Taint.
  v1Time:
    type: object
    properties:
      seconds:
        type: string
        format: int64
        description: |-
          Represents seconds of UTC time since Unix epoch
          1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
          9999-12-31T23:59:59Z inclusive.
      nanos:
        type: integer
        format: int32
        description: >-
          Non-negative fractions of a second at nanosecond resolution. Negative

          second values with fractions must still have non-negative nanos values

          that count forward in time. Must be from 0 to 999,999,999

          inclusive. This field may be limited in precision depending on
          context.
    description: |-
      Time is a wrapper around time.Time which supports correct
      marshaling to YAML and JSON.  Wrappers are provided for many
      of the factory methods that the time package offers.

      +protobuf.options.marshal=false
      +protobuf.as=Timestamp
      +protobuf.options.(gogoproto.goproto_stringer)=false
  v1Toleration:
    type: object
    properties:
      key:
        type: string
        title: >-
          Key is the taint key that the toleration applies to. Empty means match
          all taint keys.

          If the key is empty, operator must be Exists; this combination means
          to match all values and all keys.

          +optional
      operator:
        type: string
        title: |-
          Operator represents a key's relationship to the value.
          Valid operators are Exists and Equal. Defaults to Equal.
          Exists is equivalent to wildcard for value, so that a pod can
          tolerate all taints of a particular category.
          +optional
      value:
        type: string
        title: >-
          Value is the taint value the toleration matches to.

          If the operator is Exists, the value should be empty, otherwise just a
          regular string.

          +optional
      effect:
        type: string
        title: >-
          Effect indicates the taint effect to match. Empty means match all
          taint effects.

          When specified, allowed values are NoSchedule, PreferNoSchedule and
          NoExecute.

          +optional
      tolerationSeconds:
        type: string
        format: int64
        title: >-
          TolerationSeconds represents the period of time the toleration (which
          must be

          of effect NoExecute, otherwise this field is ignored) tolerates the
          taint. By default,

          it is not set, which means tolerate the taint forever (do not evict).
          Zero and

          negative values will be treated as 0 (evict immediately) by the
          system.

          +optional
    description: |-
      The pod this Toleration is attached to tolerates any taint that matches
      the triple <key,value,effect> using the matching operator <operator>.
  v1TypedLocalObjectReference:
    type: object
    properties:
      apiGroup:
        type: string
        title: >-
          APIGroup is the group for the resource being referenced.

          If APIGroup is not specified, the specified Kind must be in the core
          API group.

          For any other third-party types, APIGroup is required.

          +optional
      kind:
        type: string
        title: Kind is the type of resource being referenced
      name:
        type: string
        title: Name is the name of resource being referenced
    description: >-
      TypedLocalObjectReference contains enough information to let you locate
      the

      typed referenced object inside the same namespace.
  v1Volume:
    type: object
    properties:
      name:
        type: string
        title: >-
          Volume's name.

          Must be a DNS_LABEL and unique within the pod.

          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
      volumeSource:
        $ref: '#/definitions/v1VolumeSource'
        description: >-
          VolumeSource represents the location and type of the mounted volume.

          If not specified, the Volume is implied to be an EmptyDir.

          This implied behavior is deprecated and will be removed in a future
          version.
    description: >-
      Volume represents a named volume in a pod that may be accessed by any
      container in the pod.
  v1VolumeDevice:
    type: object
    properties:
      name:
        type: string
        title: name must match the name of a persistentVolumeClaim in the pod
      devicePath:
        type: string
        description: >-
          devicePath is the path inside of the container that the device will be
          mapped to.
    description: volumeDevice describes a mapping of a raw block device within a container.
  v1VolumeMount:
    type: object
    properties:
      name:
        type: string
        description: This must match the Name of a Volume.
      readOnly:
        type: boolean
        format: boolean
        title: >-
          Mounted read-only if true, read-write otherwise (false or
          unspecified).

          Defaults to false.

          +optional
      mountPath:
        type: string
        description: |-
          Path within the container at which the volume should be mounted.  Must
          not contain ':'.
      subPath:
        type: string
        title: >-
          Path within the volume from which the container's volume should be
          mounted.

          Defaults to "" (volume's root).

          +optional
      mountPropagation:
        type: string
        title: |-
          mountPropagation determines how mounts are propagated from the host
          to container and the other way around.
          When not set, MountPropagationNone is used.
          This field is beta in 1.10.
          +optional
      subPathExpr:
        type: string
        title: >-
          Expanded path within the volume from which the container's volume
          should be mounted.

          Behaves similarly to SubPath but environment variable references
          $(VAR_NAME) are expanded using the container's environment.

          Defaults to "" (volume's root).

          SubPathExpr and SubPath are mutually exclusive.

          This field is alpha in 1.14.

          +optional
    description: VolumeMount describes a mounting of a Volume within a container.
  v1VolumeProjection:
    type: object
    properties:
      secret:
        $ref: '#/definitions/v1SecretProjection'
        title: |-
          information about the secret data to project
          +optional
      downwardAPI:
        $ref: '#/definitions/v1DownwardAPIProjection'
        title: |-
          information about the downwardAPI data to project
          +optional
      configMap:
        $ref: '#/definitions/v1ConfigMapProjection'
        title: |-
          information about the configMap data to project
          +optional
      serviceAccountToken:
        $ref: '#/definitions/v1ServiceAccountTokenProjection'
        title: |-
          information about the serviceAccountToken data to project
          +optional
    title: Projection that may be projected along with other supported volume types
  v1VolumeSource:
    type: object
    properties:
      hostPath:
        $ref: '#/definitions/v1HostPathVolumeSource'
        title: >-
          HostPath represents a pre-existing file or directory on the host

          machine that is directly exposed to the container. This is generally

          used for system agents or other privileged things that are allowed

          to see the host machine. Most containers will NOT need this.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath

          ---

          TODO(jonesdl) We need to restrict who can use host directory mounts
          and who can/can not

          mount host directories as read/write.

          +optional
      emptyDir:
        $ref: '#/definitions/v1EmptyDirVolumeSource'
        title: >-
          EmptyDir represents a temporary directory that shares a pod's
          lifetime.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#emptydir

          +optional
      gcePersistentDisk:
        $ref: '#/definitions/v1GCEPersistentDiskVolumeSource'
        title: >-
          GCEPersistentDisk represents a GCE Disk resource that is attached to a

          kubelet's host machine and then exposed to the pod.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

          +optional
      awsElasticBlockStore:
        $ref: '#/definitions/v1AWSElasticBlockStoreVolumeSource'
        title: >-
          AWSElasticBlockStore represents an AWS Disk resource that is attached
          to a

          kubelet's host machine and then exposed to the pod.

          More info:
          https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

          +optional
      gitRepo:
        $ref: '#/definitions/v1GitRepoVolumeSource'
        title: >-
          GitRepo represents a git repository at a particular revision.

          DEPRECATED: GitRepo is deprecated. To provision a container with a git
          repo, mount an

          EmptyDir into an InitContainer that clones the repo using git, then
          mount the EmptyDir

          into the Pod's container.

          +optional
      secret:
        $ref: '#/definitions/v1SecretVolumeSource'
        title: |-
          Secret represents a secret that should populate this volume.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
      nfs:
        $ref: '#/definitions/v1NFSVolumeSource'
        title: |-
          NFS represents an NFS mount on the host that shares a pod's lifetime
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
      iscsi:
        $ref: '#/definitions/v1ISCSIVolumeSource'
        title: >-
          ISCSI represents an ISCSI Disk resource that is attached to a

          kubelet's host machine and then exposed to the pod.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md

          +optional
      glusterfs:
        $ref: '#/definitions/v1GlusterfsVolumeSource'
        title: >-
          Glusterfs represents a Glusterfs mount on the host that shares a pod's
          lifetime.

          More info:
          https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md

          +optional
      persistentVolumeClaim:
        $ref: '#/definitions/v1PersistentVolumeClaimVolumeSource'
        title: >-
          PersistentVolumeClaimVolumeSource represents a reference to a

          PersistentVolumeClaim in the same namespace.

          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

          +optional
      rbd:
        $ref: '#/definitions/v1RBDVolumeSource'
        title: >-
          RBD represents a Rados Block Device mount on the host that shares a
          pod's lifetime.

          More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md

          +optional
      flexVolume:
        $ref: '#/definitions/v1FlexVolumeSource'
        title: |-
          FlexVolume represents a generic volume resource that is
          provisioned/attached using an exec based plugin.
          +optional
      cinder:
        $ref: '#/definitions/v1CinderVolumeSource'
        title: >-
          Cinder represents a cinder volume attached and mounted on kubelets
          host machine

          More info:
          https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md

          +optional
      cephfs:
        $ref: '#/definitions/v1CephFSVolumeSource'
        title: >-
          CephFS represents a Ceph FS mount on the host that shares a pod's
          lifetime

          +optional
      flocker:
        $ref: '#/definitions/v1FlockerVolumeSource'
        title: >-
          Flocker represents a Flocker volume attached to a kubelet's host
          machine. This depends on the Flocker control service being running

          +optional
      downwardAPI:
        $ref: '#/definitions/v1DownwardAPIVolumeSource'
        title: >-
          DownwardAPI represents downward API about the pod that should populate
          this volume

          +optional
      fc:
        $ref: '#/definitions/v1FCVolumeSource'
        title: >-
          FC represents a Fibre Channel resource that is attached to a kubelet's
          host machine and then exposed to the pod.

          +optional
      azureFile:
        $ref: '#/definitions/v1AzureFileVolumeSource'
        title: >-
          AzureFile represents an Azure File Service mount on the host and bind
          mount to the pod.

          +optional
      configMap:
        $ref: '#/definitions/v1ConfigMapVolumeSource'
        title: |-
          ConfigMap represents a configMap that should populate this volume
          +optional
      vsphereVolume:
        $ref: '#/definitions/v1VsphereVirtualDiskVolumeSource'
        title: >-
          VsphereVolume represents a vSphere volume attached and mounted on
          kubelets host machine

          +optional
      quobyte:
        $ref: '#/definitions/v1QuobyteVolumeSource'
        title: >-
          Quobyte represents a Quobyte mount on the host that shares a pod's
          lifetime

          +optional
      azureDisk:
        $ref: '#/definitions/v1AzureDiskVolumeSource'
        title: >-
          AzureDisk represents an Azure Data Disk mount on the host and bind
          mount to the pod.

          +optional
      photonPersistentDisk:
        $ref: '#/definitions/v1PhotonPersistentDiskVolumeSource'
        title: >-
          PhotonPersistentDisk represents a PhotonController persistent disk
          attached and mounted on kubelets host machine
      projected:
        $ref: '#/definitions/v1ProjectedVolumeSource'
        title: 'Items for all in one resources secrets, configmaps, and downward API'
      portworxVolume:
        $ref: '#/definitions/v1PortworxVolumeSource'
        title: >-
          PortworxVolume represents a portworx volume attached and mounted on
          kubelets host machine

          +optional
      scaleIO:
        $ref: '#/definitions/v1ScaleIOVolumeSource'
        title: >-
          ScaleIO represents a ScaleIO persistent volume attached and mounted on
          Kubernetes nodes.

          +optional
      storageos:
        $ref: '#/definitions/v1StorageOSVolumeSource'
        title: >-
          StorageOS represents a StorageOS volume attached and mounted on
          Kubernetes nodes.

          +optional
      csi:
        $ref: '#/definitions/v1CSIVolumeSource'
        title: >-
          CSI (Container Storage Interface) represents storage that is handled
          by an external CSI driver (Alpha feature).

          +optional
    description: |-
      Represents the source of a volume to mount.
      Only one of its members may be specified.
  v1VsphereVirtualDiskVolumeSource:
    type: object
    properties:
      volumePath:
        type: string
        title: Path that identifies vSphere volume vmdk
      fsType:
        type: string
        title: >-
          Filesystem type to mount.

          Must be a filesystem type supported by the host operating system.

          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.

          +optional
      storagePolicyName:
        type: string
        title: |-
          Storage Policy Based Management (SPBM) profile name.
          +optional
      storagePolicyID:
        type: string
        title: >-
          Storage Policy Based Management (SPBM) profile ID associated with the
          StoragePolicyName.

          +optional
    description: Represents a vSphere volume resource.
  v1WeightedPodAffinityTerm:
    type: object
    properties:
      weight:
        type: integer
        format: int32
        description: |-
          weight associated with matching the corresponding podAffinityTerm,
          in the range 1-100.
      podAffinityTerm:
        $ref: '#/definitions/v1PodAffinityTerm'
        description: >-
          Required. A pod affinity term, associated with the corresponding
          weight.
    title: >-
      The weights of all of the matched WeightedPodAffinityTerm fields are added
      per-node to find the most preferred node(s)
  v1beta1CronJob:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1beta1CronJobSpec'
        title: >-
          Specification of the desired behavior of a cron job, including the
          schedule.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
      status:
        $ref: '#/definitions/v1beta1CronJobStatus'
        title: >-
          Current status of a cron job.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    description: CronJob represents the configuration of a single cron job.
  v1beta1CronJobSpec:
    type: object
    properties:
      schedule:
        type: string
        description: 'The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.'
      startingDeadlineSeconds:
        type: string
        format: int64
        title: >-
          Optional deadline in seconds for starting the job if it misses
          scheduled

          time for any reason.  Missed jobs executions will be counted as failed
          ones.

          +optional
      concurrencyPolicy:
        type: string
        title: >-
          Specifies how to treat concurrent executions of a Job.

          Valid values are:

          - "Allow" (default): allows CronJobs to run concurrently;

          - "Forbid": forbids concurrent runs, skipping next run if previous run
          hasn't finished yet;

          - "Replace": cancels currently running job and replaces it with a new
          one

          +optional
      suspend:
        type: boolean
        format: boolean
        title: >-
          This flag tells the controller to suspend subsequent executions, it
          does

          not apply to already started executions.  Defaults to false.

          +optional
      jobTemplate:
        $ref: '#/definitions/v1beta1JobTemplateSpec'
        description: Specifies the job that will be created when executing a CronJob.
      successfulJobsHistoryLimit:
        type: integer
        format: int32
        title: >-
          The number of successful finished jobs to retain.

          This is a pointer to distinguish between explicit zero and not
          specified.

          Defaults to 3.

          +optional
      failedJobsHistoryLimit:
        type: integer
        format: int32
        title: >-
          The number of failed finished jobs to retain.

          This is a pointer to distinguish between explicit zero and not
          specified.

          Defaults to 1.

          +optional
    description: >-
      CronJobSpec describes how the job execution will look like and when it
      will actually run.
  v1beta1CronJobStatus:
    type: object
    properties:
      active:
        type: array
        items:
          $ref: '#/definitions/v1ObjectReference'
        title: |-
          A list of pointers to currently running jobs.
          +optional
      lastScheduleTime:
        $ref: '#/definitions/v1Time'
        title: |-
          Information when was the last time the job was successfully scheduled.
          +optional
    description: CronJobStatus represents the current state of a cron job.
  v1beta1JobTemplateSpec:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/metav1ObjectMeta'
        title: >-
          Standard object's metadata of the jobs created from this template.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

          +optional
      spec:
        $ref: '#/definitions/v1JobSpec'
        title: >-
          Specification of the desired behavior of the job.

          More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

          +optional
    title: >-
      JobTemplateSpec describes the data a Job should have when created from a
      template
  WatchClusterGroupsResponseEventType:
    description: |-
      Possible types of events.

       - CREATE: Create event sent.
       - UPDATE: Update event sent.
       - DELETE: Delete event sent.
    type: string
    default: CREATE
    enum:
      - CREATE
      - UPDATE
      - DELETE
  clustergroupClusterGroup:
    description: A grouping of Kubernetes clusters.
    type: object
    properties:
      full_name:
        description: Full name for the ClusterGroup.
        $ref: '#/definitions/clustergroupFullName'
      object_meta:
        description: Metadata for the ClusterGroup object.
        $ref: '#/definitions/metaObjectMeta'
      spec:
        description: Spec for the ClusterGroup.
        $ref: '#/definitions/clustergroupClusterGroupSpec'
      type_meta:
        description: Metadata describing the type of the resource.
        $ref: '#/definitions/metaTypeMeta'
  clustergroupClusterGroupSpec:
    description: The ClusterGroup spec.
    type: object
  clustergroupCreateClusterGroupRequest:
    description: Request to create a ClusterGroup.
    type: object
    properties:
      clustergroup:
        description: ClusterGroup to create.
        $ref: '#/definitions/clustergroupClusterGroup'
  clustergroupCreateClusterGroupResponse:
    description: Response from creating a ClusterGroup.
    type: object
    properties:
      clustergroup:
        description: ClusterGroup created.
        $ref: '#/definitions/clustergroupClusterGroup'
  clustergroupDeleteClusterGroupResponse:
    description: Response from deleting ClusterGroup.
    type: object
    properties:
      message:
        description: Message regarding deletion.
        type: string
  clustergroupFullName:
    type: object
    properties:
      org_id:
        type: string
        description: ID of Organization.
      name:
        type: string
        description: Name of this ClusterGroup.
    description: |-
      Full name of the cluster group. This includes the object name along
      with any parents or further identifiers.
  clustergroupGetClusterGroupResponse:
    description: Response from getting a ClusterGroup.
    type: object
    properties:
      clustergroup:
        description: ClusterGroup returned.
        $ref: '#/definitions/clustergroupClusterGroup'
  clustergroupListClusterGroupsResponse:
    description: Response from listing ClusterGroups.
    type: object
    properties:
      clustergroups:
        description: List of clustergroups.
        type: array
        items:
          $ref: '#/definitions/clustergroupClusterGroup'
      next_page_token:
        description: Token to retrieve next page of records.
        type: string
  clustergroupPatchClusterGroupRequest:
    description: Request to patch a ClusterGroup.
    type: object
    properties:
      clustergroup:
        description: Patch ClusterGroup.
        $ref: '#/definitions/clustergroupClusterGroup'
  clustergroupPatchClusterGroupResponse:
    description: Response from patching a ClusterGroup.
    type: object
    properties:
      clustergroup:
        description: ClusterGroup to patch.
        $ref: '#/definitions/clustergroupClusterGroup'
  clustergroupSearchScope:
    description: 'Scope to search by, any fields left empty will be considered all (*).'
    type: object
    properties:
      group:
        description: Scope search to `group`; supports globbing; default (*).
        type: string
      name:
        description: Scope search to `name`; supports globbing; default (*).
        type: string
      org_id:
        description: Scope search to `org_id`; supports globbing; default (*).
        type: string
  clustergroupUpdateClusterGroupRequest:
    description: Request to update (overwrite) a ClusterGroup.
    type: object
    properties:
      clustergroup:
        description: Update ClusterGroup.
        $ref: '#/definitions/clustergroupClusterGroup'
  clustergroupUpdateClusterGroupResponse:
    description: Response from updating a ClusterGroup.
    type: object
    properties:
      clustergroup:
        description: ClusterGroup updated.
        $ref: '#/definitions/clustergroupClusterGroup'
  clustergroupWatchClusterGroupsResponse:
    description: Streamed response from watching ClusterGroups.
    type: object
    properties:
      clustergroup:
        description: ClusterGroup event.
        $ref: '#/definitions/clustergroupClusterGroup'
      type:
        description: Type of event.
        $ref: '#/definitions/WatchClusterGroupsResponseEventType'
  BindingDeltaOpType:
    type: string
    enum:
      - ADD
      - DELETE
    default: ADD
    description: |-
      Type of operation associated with the list of rolebindings.

       - ADD: Appending rolebindings to the existing policy.
       - DELETE: Deleting rolebindings from the existing policy.
  clustergroupGetClusterGroupIAMPolicyResponse:
    type: object
    properties:
      policy_list:
        type: array
        items:
          $ref: '#/definitions/policyIAMPolicy'
        description: ClusterGroup policy.
    description: GetClusterGroupIAMPolicy response message.
  clustergroupPatchClusterGroupIAMPolicyRequest:
    type: object
    properties:
      full_name:
        $ref: '#/definitions/clustergroupFullName'
        description: ClusterGroup full_name.
      binding_delta_list:
        type: array
        items:
          $ref: '#/definitions/policyBindingDelta'
        description: Binding delta to be applied.
    description: PatchClusterGroupIAMPolicy request message.
  clustergroupPatchClusterGroupIAMPolicyResponse:
    type: object
    properties:
      policy:
        $ref: '#/definitions/policyIAMPolicy'
        description: New policy object.
    description: PatchClusterGroupIAMPolicy response message.
  clustergroupTestClusterGroupIAMPermissionsRequest:
    type: object
    properties:
      full_name:
        $ref: '#/definitions/clustergroupFullName'
        description: ClusterGroup full_name.
      permissions:
        type: array
        items:
          type: string
        description: List of permissions to test.
    description: TestClusterGroupIAMPermissions request message.
  clustergroupTestClusterGroupIAMPermissionsResponse:
    type: object
    properties:
      permissions:
        type: array
        items:
          type: string
        description: List of allowed permissions.
    description: TestClusterGroupIAMPermissions response message.
  clustergroupUpdateClusterGroupIAMPolicyResponse:
    type: object
    properties:
      policy:
        $ref: '#/definitions/policyIAMPolicy'
        description: ClusterGroup policy set.
    description: UpdateClusterGroupIAMPolicy response message.
  policyBindingDelta:
    type: object
    properties:
      role:
        type: string
        description: Role for binding.
      subject:
        $ref: '#/definitions/policySubject'
        description: Subject of rolebinding.
      op:
        $ref: '#/definitions/BindingDeltaOpType'
        description: Type of operation.
    description: Used for modify policy apis.
