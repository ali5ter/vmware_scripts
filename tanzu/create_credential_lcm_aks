#!/usr/bin/env bash
# @file create_credential_lcm_aks
# Create an aks lcm credential
# @author Alister Lewis-Bowen <alister@lewis-bowen.org>

[[ -n $DEBUG ]] && {
    export PS4='+($(basename ${BASH_SOURCE[0]}):${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -x
}
set -eou pipefail

# shellcheck disable=SC1091
source tanzu_config.sh

AZURE_SUBSCRIPTION_ID='4f4d4982-9dd8-4da1-9227-b4650eae2f81'
# az account set --subscription "$AZURE_SUBSCRIPTION_ID"

# [ -z "$AZURE_CLIENT_ID" ] && { echo "AZURE_CLIENT_ID is not set"; exit 1; }
# [ -z "$AZURE_CLIENT_SECRET" ] && { echo "AZURE_CLIENT_SECRET is not set"; exit 1; }
# [ -z "$AZURE_TENANT_ID" ] && { echo "AZURE_TENANT_ID is not set"; exit 1; }
# [ -z "$AZURE_SUBSCRIPTION_ID" ] && { echo "AZURE_SUBSCRIPTION_ID is not set"; exit 1; }
TMC_AKS_LCM_CREDENTIAL='alb-test-aks-credential'
TMC_LCM_CREDENTIAL_INSTRUCTIONS='aks_lcm_setup_instructions.txt'
TMC_DATA_VALUES_FILE='aks_lcm_data_values.txt'

cred_exists() {
    # Check if the credential already exists
    if tanzu tmc account credential get "$TMC_AKS_LCM_CREDENTIAL" &> /dev/null; then
        echo "Credential '$TMC_AKS_LCM_CREDENTIAL' already exists"
        return 1
    else
        return 0
    fi
}

clean_up() {
    rm "$TMC_LCM_CREDENTIAL_INSTRUCTIONS"
    rm "$TMC_DATA_VALUES_FILE"
    # tanzu tmc account credential delete "$TMC_AKS_LCM_CREDENTIAL"
}

create_cred_step1() {
    # Initiate creating an eks lcm credential and save the instructions to a file
    tanzu tmc account credential permission-template generate \
        -n "$TMC_AKS_LCM_CREDENTIAL" \
        -c MANAGED_K8S_PROVIDER -p AZURE_AKS > $TMC_LCM_CREDENTIAL_INSTRUCTIONS
    
    # Parse what we need from the instructions file
    AWS_CLI_RUN_STACK=$(cat $TMC_LCM_CREDENTIAL_INSTRUCTIONS | \
        grep "aws cloudformation create-stack" | tr -d '"')
    # Note: The IAM capability is required to create the IAM role
    AWS_CLI_RUN_STACK="$AWS_CLI_RUN_STACK --capabilities CAPABILITY_NAMED_IAM"
    AWS_CLI_GET_ARN_CMD=$(cat $EKS_LCM_CREDENTIAL_INSTRUCTIONS | \
        grep "aws iam get-role" | tr -d '"')
    AWS_CF_STACK_NAME=$(cat $EKS_LCM_CREDENTIAL_INSTRUCTIONS | \
        grep "aws cloudformation create-stack" | \
        awk '{print $5}')
}

create_sf_stack() {
    # Run the AWS CLI command to create the AWS CF stack
    eval "$AWS_CLI_RUN_STACK"

    get_stack_status() {
        # Loop to check state of stack creation
        # shellcheck disable=SC2086
        aws cloudformation list-stacks --output json | \
            jq -r --arg STACK $AWS_CF_STACK_NAME \
            'first(.StackSummaries[] | select(.StackName == $STACK) | .StackStatus)'
    }
    echo -n 'Waiting for stack to be created...'
    while [[ $(get_stack_status) != "CREATE_COMPLETE" ]]; do
        echo -n '.'
        sleep 10
    done
}

fetch_arn() {
    # Run the AWS CLI commands get the ARN
    EKS_LCM_ARN=$(eval "$AWS_CLI_GET_ARN_CMD")
}

create_values_file() {
    # Create the data values file
    echo "Name: $EKS_LCM_CREDENTIAL" > "$DATA_VALUES_FILE"
    echo "Arn: $EKS_LCM_ARN" >> "$DATA_VALUES_FILE"
}

create_cred_step2() {
    # Complete the credential creation by providing the ARN
    tanzu tmc account credential create \
        --input-template lcm-eks \
        --data-values-file "$DATA_VALUES_FILE"
}

cred_exists
clean_up
create_cred_step1
create_sf_stack
fetch_arn
create_values_file
create_cred_step2