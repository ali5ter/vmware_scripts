#!/usr/bin/env bash
# @file playground
# Scratchpad of tmc commands while testing
# @author Alister Lewis-Bowen <alister@lewis-bowen.org>

# shellcheck disable=SC1091
source tmc_env.sh

# stand up env ---------------------------------------------------------------

set_up

heading "Context detail"
context_detail

start_local_cluster

attach_local_cluster

# play with cluster templates ------------------------------------------------

heading "Change cluster metadata using a cluster template"

echo "What cluster templates do we have"
erun tmc cluster template list

echo "Get and modify the 'attached' cluster template"
erun tmc cluster template get attached > cluster_template.yaml

echo "Update our existing cluster using the template"
# erun tmc cluster update 

# play with access policies --------------------------------------------------

heading "Add some policies to the cluster"

# Add access policy
# !! Inconsistent use of positional arg for cluster name
# !! Be nice if there was a role binding name
echo "Add an access policy role binding to allow a user to edit this cluster"
erun tmc cluster iam add-binding "$TMC_CLUSTER_NAME" \
    -m attached -p attached \
    -r cluster.edit -u bowena@vmware.com

# List access policies
# !! No list command
# tmc cluster iam list \
#     --clust
# So resort to listing k8s rolebindings...
erun kubectl get rolebindings -A | grep "$TMC_CLUSTER_NAME"
echo

get_cluster_access_policies() {
    local cluster="${1:-TMC_CLUSTER_NAME}"
    tmc cluster iam get-policy "$cluster" \
        -m attached -p attached \
        -o json | jq -r '.policyList[]'
}

# filters on list of scans json output
accessPolicyNames()         { echo "$1" | jq -r '.meta.uid'; }
accessPolicyDetail()        { echo "$1" | jq --arg n "$2" -r '. | select(.meta.uid == '\$n')'; }
accessPolicyType()          { echo "$1" | jq -r '.meta.parentReferences[].rid' | cut -d':' -f 2; }
accessPolicyRole()          { echo "$1" | jq -r '.roleBindings[].role'; }
accessPolicySubjects()      { echo "$1" | jq --arg r "$2" -r '.roleBindings[] | select(.role == '\$r') | .subjects[].name'; }

list_cluster_access_policies() {
    local cluster="${1:-TMC_CLUSTER_NAME}"
    local policies detail type role subject subjects
    policies="$(get_cluster_access_policies "$cluster")"
    printf "%-15s  %-32s  %s\\n" "TYPE" "ROLE" "SUBJECTS"
    for policy in $(accessPolicyNames "$policies"); do
        detail=$(accessPolicyDetail "$policies" "$policy")
        type="$(accessPolicyType "$detail")"
        case $type in
            org)    type='organization';;
            c)      type='cluster';;
        esac
        for role in $(accessPolicyRole "$detail"); do
            subjects=''
            for subject in $(accessPolicySubjects "$detail" "$role"); do
                subjects="$subjects $subject"
            done
            printf "%-15s  %-32s  %s\\n" "$type" "$role" "$subjects"
        done
    done
    echo
}

list_cluster_access_policies "$TMC_CLUSTER_NAME"

# play with security policies ------------------------------------------------

# Add security policy
# !! No autocomplete for security-policy subcommand
# !! Help doesn't talk about cluster name flag
# !! No name parameter
echo "Add a security policy for baseline lockdown of the cluster"
erun tmc cluster security-policy create \
    --cluster-name "$TMC_CLUSTER_NAME" -m attached -p attached \
    -r baseline

# List security policies
# !! No autocomplete for security-policy subcommand
erun tmc cluster security-policy list \
    --cluster-name "$TMC_CLUSTER_NAME" -m attached -p attached
    
# run a default (lite) inpection scan ----------------------------------------

heading "Run a minimal inspection scan on the cluster"

read -p "${TMC_BOLD}âœ‹ A scan can take a while to run. Do you want to run one now? [y/N] ${TMC_RESET}" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    # Run a lite inspection scan
    # !! Have to parse out the scan name
    scanName="$(tmc cluster inspection scan create \
        -c "$TMC_CLUSTER_NAME" -m attached -p attached \
        | tail -n 1 | cut -d'"' -f2)"
    echo "Lite inspection scan, $scanName, started"
    echo

    # !! List command doesn't include -c option

    echo -n "Monitoring the inspection scan"
    # !! Why does cluster need to be defined?
    # shellcheck disable=SC2086 
    while [ "$(tmc cluster inspection scan get $scanName \
        --cluster-name $TMC_CLUSTER_NAME -m attached -p attached \
        -o json | jq -r .status.phase)" != "COMPLETE" ]; do
        echo -n '.'
        sleep 10
    done
    echo ' âœ…'
    echo

    erun tmc cluster inspection scan get "$scanName" \
        --cluster-name "$TMC_CLUSTER_NAME" -m attached -p attached \
        -o json | jq -r .status.conditions.READY.message
fi

# Enable TO or TSM integration on this cluster

export toCredential=''

get_to_credential() {
    # !! Help doesn't tell you what capability or provider strings to use
    tmc account credential list \
        --capability TANZU_OBSERVABILITY -o json \
        | jq -r .credentials[].fullName.name \
        | fzf --height=40% --layout=reverse --info=inline --border
}

heading "Set up TO integration for your cluster"

echo "${TMC_BOLD}âœ‹ Please select a suitable account credential for tanzu observability ${TMC_RESET}"
toCredential=$(get_to_credential)
echo "'$toCredential' selected"
echo

# Grab the name TMC uses for the TO integration
# !! No format compatability of capability/integration name as seen in accounts
integrationName="$(tmc integration list -o json \
    | jq -r '.integrations[].fullName.name' | grep observability)"

# !! Why is cluster group listed in the output when scoped to a cluster?
# !! Doesn't list the account credential used unless you output json
if tmc clustergroup integration list --cluster-group-name "$TMC_CLUSTER_GROUP" \
        | grep -q "$integrationName"; then
    echo "Tanzu Observability already integrated with cluster group $TMC_CLUSTER_GROUP"
else
    echo "Enable Tanzu Observability for cluster group $TMC_CLUSTER_GROUP"
    # !! options don't follow consistent format with rest of tmc CLI
    erun tmc clustergroup integration create \
        --full-name.cluster-group-name "$TMC_CLUSTER_GROUP" \
        --full-name.name "$integrationName" \
        --spec.credential-name "$toCredential"
fi

echo -n "Monitoring the integration of tanzu observability"
# !! Why does cluster need to be defined?
phase='PENDING'
while [ "$phase" == 'PENDING' ]; do
    # shellcheck disable=SC2086 
    phase="$(tmc clustergroup integration get $integrationName \
    --cluster-group-name $TMC_CLUSTER_GROUP \
    -o json | jq -r .status.phase)"
    case "$phase" in
        COMPLETE)
            echo ' âœ…'
            break
            ;;
        ERROR)
            echo -n ' ðŸ˜± not all integrations successfully reconciled'
            break
            ;;
        PENDING)
            echo -n '.'
            sleep 10
    esac
done
echo

# !! Doesn't show you what clusters to is installed on
erun tmc clustergroup integration get "$integrationName" --cluster-group-name "$TMC_CLUSTER_GROUP"